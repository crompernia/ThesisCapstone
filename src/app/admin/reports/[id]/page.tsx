/**
 * @fileoverview This file defines the detailed report view page for the Admin portal.
 * It displays the specific details of a single report identified by its ID.
 */
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ArrowLeft, User, FileText, Clock, AlertTriangle } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { getReportDetails } from "@/lib/data";

/**
 * Renders the detailed view of a single report.
 * @param {{ params: { id: string } }} props - The props containing the report ID from the URL.
 * @returns {JSX.Element} The report details page component.
 */
export default async function ReportDetailsPage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = await params;
  const report = await getReportDetails(parseInt(resolvedParams.id)) as any;

  if (!report) {
    return (
      <div className="text-center">
        <h1 className="text-2xl font-bold">Report not found</h1>
        <p className="text-muted-foreground">The report with ID {resolvedParams.id} could not be found.</p>
        <Button asChild variant="link" className="mt-4">
          <Link href="/admin/reports">
            <ArrowLeft className="mr-2" />
            Back to All Reports
          </Link>
        </Button>
      </div>
    )
  }

  return (
    <div className="space-y-6">
       <div>
            <Button asChild variant="outline" size="sm">
                <Link href="/admin/reports">
                    <ArrowLeft className="mr-2" />
                    Back to Reports
                </Link>
            </Button>
        </div>

      <Card>
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-2xl font-bold font-headline flex items-center gap-2">
                <FileText />
                Report Details
              </CardTitle>
              <CardDescription>
                Detailed log for report ID: <span className="font-mono text-foreground">{report.id}</span>
              </CardDescription>
            </div>
             <Badge variant={report.status === 'Success' ? 'default' : 'destructive'} className={`${report.status === 'Success' ? 'bg-green-500' : ''} text-lg`}>
                {report.status}
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div className="flex items-center gap-2">
                    <User className="text-muted-foreground"/>
                    <div>
                        <p className="font-medium">Generated By</p>
                        <p className="text-muted-foreground">{report.generatedBy}</p>
                    </div>
                </div>
                <div className="flex items-center gap-2">
                    <Badge variant="outline" className="">{report.type}</Badge>
                </div>
                 <div className="flex items-center gap-2">
                    <Clock className="text-muted-foreground"/>
                     <div>
                        <p className="font-medium">Timestamp</p>
                        <p className="text-muted-foreground">{report.timestamp}</p>
                    </div>
                </div>
            </div>
            <Separator />
            <div>
                <h4 className="font-semibold mb-2">Report Data</h4>
                {report.details ? (
                    <div className="p-4 bg-muted/50 rounded-lg text-sm space-y-2">
                        {Object.entries(report.details).map(([key, value]) => (
                            <div key={key} className="grid grid-cols-3 gap-4">
                                <span className="font-medium capitalize col-span-1">{key.replace(/([A-Z])/g, ' $1')}:</span>
                                <span className="col-span-2 font-mono">{String(value)}</span>
                            </div>
                        ))}
                    </div>
                ) : (
                     <p className="text-muted-foreground">No specific data was logged for this report.</p>
                )}

                 {report.status === 'Failed' && report.details?.error && (
                    <div className="mt-4 p-4 bg-destructive/10 border-l-4 border-destructive rounded-r-lg">
                        <div className="flex items-start gap-2">
                            <AlertTriangle className="text-destructive"/>
                            <div>
                                <h5 className="font-semibold text-destructive">Error Message</h5>
                                <p className="text-destructive/90">{String(report.details.error)}</p>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </CardContent>
      </Card>
    </div>
  );
}
