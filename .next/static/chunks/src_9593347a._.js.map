{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Label component.\n * It is a styled text label, typically used for form fields.\n * It is built on top of the Radix UI Label primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/label\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the base styles for the label.\n */\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\n/**\n * The Label component.\n */\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF;;CAEC,GACD,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the AlertDialog component and its parts.\n * It is a modal dialog that interrupts the user with important content and\n * requires a response. It is built on top of the Radix UI Alert Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/alert-dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\n/**\n * The root component for an alert dialog.\n */\nconst AlertDialog = AlertDialogPrimitive.Root\n\n/**\n * The trigger that opens the alert dialog.\n */\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the alert dialog.\n */\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\n/**\n * The header of the alert dialog, containing the title and description.\n */\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\n/**\n * The footer of the alert dialog, containing action buttons.\n */\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\n/**\n * The title of the alert dialog.\n */\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\n/**\n * The description of the alert dialog.\n */\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\n/**\n * The action button that typically performs the primary action of the dialog.\n */\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\n/**\n * The cancel button that closes the dialog.\n */\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20', sss_number: '00-0000000-0', philhealth_number: '00-000000000-0', pagibig_number: '0000-0000-0000', tin: '000-000-000-000' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters', coordinates: '14.5547, 121.0244' },\n    { id: 2, name: 'Downtown Office', coordinates: '14.5995, 120.9842' },\n    { id: 3, name: 'Remote', coordinates: 'N/A' },\n];\nlet MOCK_POSITIONS = [\n    { id: 1, title: 'Senior Software Engineer', rate: 50.00 },\n    { id: 2, title: 'Project Manager', rate: 55.00 },\n    { id: 3, title: 'UX Designer', rate: 45.00 },\n    { id: 4, title: 'QA Tester', rate: 35.00 },\n    { id: 5, title: 'Junior Developer', rate: 30.00 },\n    { id: 6, title: 'HR Manager', rate: 48.00 },\n    { id: 7, title: 'System Administrator', rate: 52.00 },\n];\nconst MOCK_STRUCTURE = {\n    'Headquarters': {\n        'Technology': ['Senior Software Engineer', 'Junior Developer', 'QA Tester'],\n        'Management': ['Project Manager'],\n        'Human Resources': ['HR Manager'],\n        'IT': ['System Administrator']\n    },\n    'Downtown Office': {\n        'Design': ['UX Designer'],\n        'Sales': ['Sales Associate'],\n        'Marketing': ['Marketing Specialist']\n    },\n    'Remote': {\n        'Technology': ['Senior Software Engineer', 'QA Tester'],\n        'Design': ['UX Designer']\n    }\n};\n\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${''}${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === id);\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const initialLength = MOCK_ACCOUNTS.length;\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== id);\n    return MOCK_ACCOUNTS.length < initialLength;\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => {\n            const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n            const positionDetails = MOCK_POSITIONS.find(p => p.title === a.position);\n            return {\n                id: a.id,\n                name: `${a.first_name} ${a.last_name}`,\n                position: a.position,\n                department: a.department,\n                rate: positionDetails ? positionDetails.rate : 0,\n                payslipStatus: 'Pending',\n                benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n            };\n        });\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName, coordinates };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    const branchInUse = MOCK_ACCOUNTS.some(hr => hr.managed_branches?.includes(MOCK_BRANCHES.find(b => b.id === branchId)?.name));\n    if (branchInUse) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n\nexport async function updateEmployee(id, data) {\n    const index = MOCK_ACCOUNTS.findIndex(a => a.id === id);\n    if (index === -1) {\n        return { success: false, message: 'Employee not found.' };\n    }\n\n    const updatedEmployee = {\n        ...MOCK_ACCOUNTS[index],\n        first_name: data.firstName,\n        last_name: data.lastName,\n        middle_name: data.middleName,\n        gender: data.gender,\n        date_of_birth: data.dob,\n        position: data.position,\n        department: data.department,\n        branch: data.branch,\n        date_hired: data.hireDate,\n        email: data.email,\n        // Assuming phone number is not directly on the main account object in this mock\n    };\n\n    MOCK_ACCOUNTS[index] = updatedEmployee;\n    return { success: true, message: 'Employee updated successfully.' };\n}\n\n\n// --- Positions & Rates Functions ---\n\nexport async function getPositions() {\n    // This now returns all unique position titles across all departments/branches\n    const allPositions = new Set();\n    Object.values(MOCK_STRUCTURE).forEach(departments => {\n        Object.values(departments).forEach(positions => {\n            positions.forEach(p => allPositions.add(p));\n        });\n    });\n    return Array.from(allPositions).map((title, index) => {\n        // Find original rate if possible, otherwise default\n        const originalPosition = MOCK_POSITIONS.find(p => p.title === title);\n        return {\n            id: index + 1,\n            title,\n            rate: originalPosition ? originalPosition.rate : 0\n        }\n    });\n}\n\nexport async function createPosition(title, rate) {\n    if (MOCK_POSITIONS.some(p => p.title.toLowerCase() === title.toLowerCase())) {\n        throw new Error('A position with this title already exists.');\n    }\n    const newId = MOCK_POSITIONS.length > 0 ? Math.max(...MOCK_POSITIONS.map(p => p.id)) + 1 : 1;\n    const newPosition = { id: newId, title, rate };\n    MOCK_POSITIONS.push(newPosition);\n    return newPosition;\n}\n\nexport async function deletePosition(positionId) {\n    const positionInUse = MOCK_ACCOUNTS.some(acc => acc.position === MOCK_POSITIONS.find(p => p.id === positionId)?.title);\n    if (positionInUse) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    MOCK_POSITIONS = MOCK_POSITIONS.filter(p => p.id !== positionId);\n}\n\n// --- Cascading Dropdown Functions ---\n\nexport async function getDepartmentsForBranch(branchName) {\n    if (!branchName || !MOCK_STRUCTURE[branchName]) {\n        return [];\n    }\n    return Object.keys(MOCK_STRUCTURE[branchName]);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    for (const branch in MOCK_STRUCTURE) {\n        if (MOCK_STRUCTURE[branch][departmentName]) {\n            return MOCK_STRUCTURE[branch][departmentName];\n        }\n    }\n    return [];\n}\n\n    "],"names":[],"mappings":";;;;;;IAuHsB,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20', sss_number: '00-0000000-0', philhealth_number: '00-000000000-0', pagibig_number: '0000-0000-0000', tin: '000-000-000-000' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters', coordinates: '14.5547, 121.0244' },\n    { id: 2, name: 'Downtown Office', coordinates: '14.5995, 120.9842' },\n    { id: 3, name: 'Remote', coordinates: 'N/A' },\n];\nlet MOCK_POSITIONS = [\n    { id: 1, title: 'Senior Software Engineer', rate: 50.00 },\n    { id: 2, title: 'Project Manager', rate: 55.00 },\n    { id: 3, title: 'UX Designer', rate: 45.00 },\n    { id: 4, title: 'QA Tester', rate: 35.00 },\n    { id: 5, title: 'Junior Developer', rate: 30.00 },\n    { id: 6, title: 'HR Manager', rate: 48.00 },\n    { id: 7, title: 'System Administrator', rate: 52.00 },\n];\nconst MOCK_STRUCTURE = {\n    'Headquarters': {\n        'Technology': ['Senior Software Engineer', 'Junior Developer', 'QA Tester'],\n        'Management': ['Project Manager'],\n        'Human Resources': ['HR Manager'],\n        'IT': ['System Administrator']\n    },\n    'Downtown Office': {\n        'Design': ['UX Designer'],\n        'Sales': ['Sales Associate'],\n        'Marketing': ['Marketing Specialist']\n    },\n    'Remote': {\n        'Technology': ['Senior Software Engineer', 'QA Tester'],\n        'Design': ['UX Designer']\n    }\n};\n\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${''}${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === id);\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const initialLength = MOCK_ACCOUNTS.length;\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== id);\n    return MOCK_ACCOUNTS.length < initialLength;\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => {\n            const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n            const positionDetails = MOCK_POSITIONS.find(p => p.title === a.position);\n            return {\n                id: a.id,\n                name: `${a.first_name} ${a.last_name}`,\n                position: a.position,\n                department: a.department,\n                rate: positionDetails ? positionDetails.rate : 0,\n                payslipStatus: 'Pending',\n                benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n            };\n        });\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName, coordinates };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    const branchInUse = MOCK_ACCOUNTS.some(hr => hr.managed_branches?.includes(MOCK_BRANCHES.find(b => b.id === branchId)?.name));\n    if (branchInUse) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n\nexport async function updateEmployee(id, data) {\n    const index = MOCK_ACCOUNTS.findIndex(a => a.id === id);\n    if (index === -1) {\n        return { success: false, message: 'Employee not found.' };\n    }\n\n    const updatedEmployee = {\n        ...MOCK_ACCOUNTS[index],\n        first_name: data.firstName,\n        last_name: data.lastName,\n        middle_name: data.middleName,\n        gender: data.gender,\n        date_of_birth: data.dob,\n        position: data.position,\n        department: data.department,\n        branch: data.branch,\n        date_hired: data.hireDate,\n        email: data.email,\n        // Assuming phone number is not directly on the main account object in this mock\n    };\n\n    MOCK_ACCOUNTS[index] = updatedEmployee;\n    return { success: true, message: 'Employee updated successfully.' };\n}\n\n\n// --- Positions & Rates Functions ---\n\nexport async function getPositions() {\n    // This now returns all unique position titles across all departments/branches\n    const allPositions = new Set();\n    Object.values(MOCK_STRUCTURE).forEach(departments => {\n        Object.values(departments).forEach(positions => {\n            positions.forEach(p => allPositions.add(p));\n        });\n    });\n    return Array.from(allPositions).map((title, index) => {\n        // Find original rate if possible, otherwise default\n        const originalPosition = MOCK_POSITIONS.find(p => p.title === title);\n        return {\n            id: index + 1,\n            title,\n            rate: originalPosition ? originalPosition.rate : 0\n        }\n    });\n}\n\nexport async function createPosition(title, rate) {\n    if (MOCK_POSITIONS.some(p => p.title.toLowerCase() === title.toLowerCase())) {\n        throw new Error('A position with this title already exists.');\n    }\n    const newId = MOCK_POSITIONS.length > 0 ? Math.max(...MOCK_POSITIONS.map(p => p.id)) + 1 : 1;\n    const newPosition = { id: newId, title, rate };\n    MOCK_POSITIONS.push(newPosition);\n    return newPosition;\n}\n\nexport async function deletePosition(positionId) {\n    const positionInUse = MOCK_ACCOUNTS.some(acc => acc.position === MOCK_POSITIONS.find(p => p.id === positionId)?.title);\n    if (positionInUse) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    MOCK_POSITIONS = MOCK_POSITIONS.filter(p => p.id !== positionId);\n}\n\n// --- Cascading Dropdown Functions ---\n\nexport async function getDepartmentsForBranch(branchName) {\n    if (!branchName || !MOCK_STRUCTURE[branchName]) {\n        return [];\n    }\n    return Object.keys(MOCK_STRUCTURE[branchName]);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    for (const branch in MOCK_STRUCTURE) {\n        if (MOCK_STRUCTURE[branch][departmentName]) {\n            return MOCK_STRUCTURE[branch][departmentName];\n        }\n    }\n    return [];\n}\n\n    "],"names":[],"mappings":";;;;;;IAgWsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/hr/payslip-generation/%5Bid%5D/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the individual employee payslip calculation page.\n * It allows HR personnel to review attendance data, input adjustments like paid absences\n * and deductions, and calculate the final net pay for an employee.\n */\n'use client';\n\nimport * as React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { ArrowLeft, User, Calendar, ClipboardCheck, PlusCircle, Trash2, Calculator, Info } from 'lucide-react';\nimport Link from 'next/link';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { getEmployeeById, getPositions } from '@/lib/data';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRouter } from 'next/navigation';\n\n\n/**\n * Renders the detailed payslip calculation page for a single employee.\n * @param {{ params: { id: string } }} props - The props containing the employee ID from the URL.\n * @returns {JSX.Element} The payslip calculation page component.\n */\nexport default function GenerateEmployeePayslipPage({ params }) {\n    const { toast } = useToast();\n    const router = useRouter();\n    const [employee, setEmployee] = React.useState(null);\n    const [positions, setPositions] = React.useState([]);\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [additionalEarnings, setAdditionalEarnings] = React.useState([{ id: 1, name: '', amount: '' }]);\n    const [deductions, setDeductions] = React.useState([{ id: 1, name: '', amount: '' }]);\n\n    // Mock data for attendance summary\n    const dataSummary = {\n        scheduledHours: 160,\n        workedHours: 158,\n        overtimeHours: 5,\n        lates: 2,\n        absences: 1,\n    };\n\n    React.useEffect(() => {\n        const fetchData = async () => {\n            setIsLoading(true);\n            try {\n                const [empData, posData] = await Promise.all([\n                    getEmployeeById(params.id),\n                    getPositions()\n                ]);\n                setEmployee(empData);\n                setPositions(posData);\n            } catch (error) {\n                toast({\n                    variant: 'destructive',\n                    title: 'Error',\n                    description: 'Failed to fetch initial data.',\n                });\n            }\n            setIsLoading(false);\n        };\n        fetchData();\n    }, [params.id, toast]);\n\n    const employeePosition = positions.find(p => p.title === employee?.position);\n    const hourlyRate = employeePosition?.rate ?? 0;\n    const overtimeRate = hourlyRate * 1.5;\n\n    const basicPay = dataSummary.workedHours * hourlyRate;\n    const overtimePay = dataSummary.overtimeHours * overtimeRate;\n\n\n    const addEarning = () => {\n        setAdditionalEarnings([...additionalEarnings, { id: Date.now(), name: '', amount: '' }]);\n    };\n\n    const removeEarning = (id) => {\n        setAdditionalEarnings(additionalEarnings.filter(d => d.id !== id));\n    };\n\n    const addDeduction = () => {\n        setDeductions([...deductions, { id: Date.now(), name: '', amount: '' }]);\n    };\n\n    const removeDeduction = (id) => {\n        setDeductions(deductions.filter(d => d.id !== id));\n    };\n    \n    const handleCalculateAndSave = () => {\n        // In a real application, you would send this data to the server.\n        console.log(\"Saving payslip data...\");\n        toast({\n            title: \"Success\",\n            description: `Payslip for ${employee.name} has been calculated and saved.`\n        });\n        router.push('/hr/payslip-generation');\n    };\n\n    const formatCurrency = (value) => {\n        return new Intl.NumberFormat('en-PH', {\n            style: 'currency',\n            currency: 'PHP',\n        }).format(value);\n    };\n\n    if (isLoading) {\n        return (\n             <div className=\"space-y-6\">\n                <div>\n                    <Button asChild variant=\"outline\" size=\"sm\">\n                        <Link href=\"/hr/payslip-generation\">\n                            <ArrowLeft className=\"mr-2\" />\n                            Back to Employee List\n                        </Link>\n                    </Button>\n                </div>\n                 <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                    <div className=\"lg:col-span-1 space-y-6\">\n                        <Skeleton className=\"h-24 w-full\" />\n                        <Skeleton className=\"h-48 w-full\" />\n                    </div>\n                    <div className=\"lg:col-span-2\">\n                         <Skeleton className=\"h-96 w-full\" />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n  return (\n    <div className=\"space-y-6\">\n        <div>\n            <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/hr/payslip-generation\">\n                    <ArrowLeft className=\"mr-2\" />\n                    Back to Employee List\n                </Link>\n            </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Left Column: Data Summary & Inputs */}\n            <div className=\"lg:col-span-1 space-y-6\">\n                <Card>\n                    <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\"><User /> {employee.name}</CardTitle>\n                        <CardDescription>{employee.position} - ID: {employee.id}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-sm p-2 rounded-lg bg-blue-50 border border-blue-200 text-blue-800 flex items-start gap-2\">\n                             <Info className=\"h-4 w-4 mt-0.5\"/>\n                             <span>Hourly Rate: <strong>{formatCurrency(hourlyRate)}</strong></span>\n                        </div>\n                    </CardContent>\n                </Card>\n\n                {/* Attendance & Schedule Summary */}\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Data Summary</CardTitle>\n                        <CardDescription>Comparison of scheduled vs. actual work.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        <div className=\"flex justify-between p-2 rounded-lg bg-muted/50\">\n                            <span className=\"font-medium flex items-center gap-2\"><Calendar/>Scheduled Hours</span>\n                            <span>{dataSummary.scheduledHours}</span>\n                        </div>\n                        <div className=\"flex justify-between p-2 rounded-lg bg-muted/50\">\n                            <span className=\"font-medium flex items-center gap-2\"><ClipboardCheck/>Actual Worked Hours</span>\n                            <span>{dataSummary.workedHours}</span>\n                        </div>\n                         <Separator/>\n                         <div className=\"space-y-2\">\n                            <Label htmlFor=\"absences-paid\">Paid Absences (Days)</Label>\n                            <Input id=\"absences-paid\" type=\"number\" placeholder=\"e.g., 0\" />\n                            <p className=\"text-xs text-muted-foreground\">Total absences this period: {dataSummary.absences}</p>\n                         </div>\n                    </CardContent>\n                </Card>\n            </div>\n\n            {/* Right Column: Calculation and Deductions */}\n            <div className=\"lg:col-span-2\">\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Payslip Calculation</CardTitle>\n                        <CardDescription>Review earnings and enter deductions for this pay period.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                        {/* Earnings Section */}\n                        <div>\n                            <h3 className=\"text-lg font-semibold mb-2\">Earnings</h3>\n                            <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"basic-pay\">Basic Pay</Label>\n                                        <Input id=\"basic-pay\" value={formatCurrency(basicPay)} readOnly className=\"font-mono bg-muted\"/>\n                                    </div>\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"overtime-pay\">Overtime Pay</Label>\n                                        <Input id=\"overtime-pay\" value={formatCurrency(overtimePay)} readOnly className=\"font-mono bg-muted\"/>\n                                    </div>\n                                </div>\n                                \n                                <Separator/>\n\n                                <div className=\"flex justify-between items-center\">\n                                    <h4 className=\"font-medium\">Additional Earnings</h4>\n                                    <Button variant=\"outline\" size=\"sm\" onClick={addEarning}>\n                                        <PlusCircle className=\"mr-2\"/> Add Earning\n                                    </Button>\n                                </div>\n                                <div className=\"space-y-3\">\n                                    {additionalEarnings.map((earning, index) => (\n                                        <div key={earning.id} className=\"flex items-end gap-2\">\n                                            <div className=\"grid grid-cols-2 gap-2 flex-1\">\n                                                <div className=\"space-y-1\">\n                                                    <Label htmlFor={`earning-name-${index}`} className=\"sr-only\">Earning Name</Label>\n                                                    <Input id={`earning-name-${index}`} placeholder=\"e.g., Holiday Bonus\"/>\n                                                </div>\n                                                <div className=\"space-y-1\">\n                                                    <Label htmlFor={`earning-amount-${index}`} className=\"sr-only\">Amount</Label>\n                                                    <Input id={`earning-amount-${index}`} type=\"number\" placeholder=\"e.g., 1000.00\"/>\n                                                </div>\n                                            </div>\n                                            <Button variant=\"ghost\" size=\"icon\" onClick={() => removeEarning(earning.id)}>\n                                                <Trash2 className=\"text-destructive\"/>\n                                            </Button>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n\n                        <Separator/>\n                        \n                        {/* Deductions Section */}\n                        <div>\n                            <div className=\"flex justify-between items-center mb-2\">\n                                <h3 className=\"text-lg font-semibold\">Deductions</h3>\n                                <Button variant=\"outline\" size=\"sm\" onClick={addDeduction}>\n                                    <PlusCircle className=\"mr-2\"/> Add Deduction\n                                </Button>\n                            </div>\n                            <div className=\"space-y-3\">\n                                {deductions.map((ded, index) => (\n                                    <div key={ded.id} className=\"flex items-end gap-2\">\n                                        <div className=\"grid grid-cols-2 gap-2 flex-1\">\n                                            <div className=\"space-y-1\">\n                                                <Label htmlFor={`ded-name-${index}`} className=\"sr-only\">Deduction Name</Label>\n                                                <Input id={`ded-name-${index}`} placeholder=\"e.g., Government Loan\"/>\n                                            </div>\n                                            <div className=\"space-y-1\">\n                                                <Label htmlFor={`ded-amount-${index}`} className=\"sr-only\">Amount</Label>\n                                                <Input id={`ded-amount-${index}`} type=\"number\" placeholder=\"e.g., 500.00\"/>\n                                            </div>\n                                        </div>\n                                        <Button variant=\"ghost\" size=\"icon\" onClick={() => removeDeduction(ded.id)}>\n                                            <Trash2 className=\"text-destructive\"/>\n                                        </Button>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </CardContent>\n                    <CardFooter className=\"flex justify-end gap-2\">\n                        <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                                <Button>\n                                    <Calculator className=\"mr-2\" />\n                                    Calculate & Save\n                                </Button>\n                            </AlertDialogTrigger>\n                             <AlertDialogContent>\n                                <AlertDialogHeader>\n                                    <AlertDialogTitle>Are you sure you want to calculate and save?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                        This will finalize and save the payslip for this employee. This action cannot be easily undone.\n                                    </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction onClick={handleCalculateAndSave}>Calculate & Save</AlertDialogAction>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                        </AlertDialog>\n                    </CardFooter>\n                </Card>\n            </div>\n        </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AAGD;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAWA;AAAA;AACA;AACA;AACA;;;AA/BA;;;;;;;;;;;;;;AAuCe,SAAS,4BAA4B,EAAE,MAAM,EAAE;;IAC1D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAC/C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE,EAAE;IACnD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IACjD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;QAAC;YAAE,IAAI;YAAG,MAAM;YAAI,QAAQ;QAAG;KAAE;IACpG,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;QAAC;YAAE,IAAI;YAAG,MAAM;YAAI,QAAQ;QAAG;KAAE;IAEpF,mCAAmC;IACnC,MAAM,cAAc;QAChB,gBAAgB;QAChB,aAAa;QACb,eAAe;QACf,OAAO;QACP,UAAU;IACd;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;iDAAE;YACZ,MAAM;mEAAY;oBACd,aAAa;oBACb,IAAI;wBACA,MAAM,CAAC,SAAS,QAAQ,GAAG,MAAM,QAAQ,GAAG,CAAC;4BACzC,CAAA,GAAA,qJAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,EAAE;4BACzB,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD;yBACd;wBACD,YAAY;wBACZ,aAAa;oBACjB,EAAE,OAAO,OAAO;wBACZ,MAAM;4BACF,SAAS;4BACT,OAAO;4BACP,aAAa;wBACjB;oBACJ;oBACA,aAAa;gBACjB;;YACA;QACJ;gDAAG;QAAC,OAAO,EAAE;QAAE;KAAM;IAErB,MAAM,mBAAmB,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,UAAU;IACnE,MAAM,aAAa,kBAAkB,QAAQ;IAC7C,MAAM,eAAe,aAAa;IAElC,MAAM,WAAW,YAAY,WAAW,GAAG;IAC3C,MAAM,cAAc,YAAY,aAAa,GAAG;IAGhD,MAAM,aAAa;QACf,sBAAsB;eAAI;YAAoB;gBAAE,IAAI,KAAK,GAAG;gBAAI,MAAM;gBAAI,QAAQ;YAAG;SAAE;IAC3F;IAEA,MAAM,gBAAgB,CAAC;QACnB,sBAAsB,mBAAmB,MAAM,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IAClE;IAEA,MAAM,eAAe;QACjB,cAAc;eAAI;YAAY;gBAAE,IAAI,KAAK,GAAG;gBAAI,MAAM;gBAAI,QAAQ;YAAG;SAAE;IAC3E;IAEA,MAAM,kBAAkB,CAAC;QACrB,cAAc,WAAW,MAAM,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IAClD;IAEA,MAAM,yBAAyB;QAC3B,iEAAiE;QACjE,QAAQ,GAAG,CAAC;QACZ,MAAM;YACF,OAAO;YACP,aAAa,CAAC,YAAY,EAAE,SAAS,IAAI,CAAC,+BAA+B,CAAC;QAC9E;QACA,OAAO,IAAI,CAAC;IAChB;IAEA,MAAM,iBAAiB,CAAC;QACpB,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;YAClC,OAAO;YACP,UAAU;QACd,GAAG,MAAM,CAAC;IACd;IAEA,IAAI,WAAW;QACX,qBACK,6LAAC;YAAI,WAAU;;8BACZ,6LAAC;8BACG,cAAA,6LAAC,qIAAA,CAAA,SAAM;wBAAC,OAAO;wBAAC,SAAQ;wBAAU,MAAK;kCACnC,cAAA,6LAAC,+JAAA,CAAA,UAAI;4BAAC,MAAK;;8CACP,6LAAC,mNAAA,CAAA,YAAS;oCAAC,WAAU;;;;;;gCAAS;;;;;;;;;;;;;;;;;8BAKzC,6LAAC;oBAAI,WAAU;;sCACZ,6LAAC;4BAAI,WAAU;;8CACX,6LAAC,uIAAA,CAAA,WAAQ;oCAAC,WAAU;;;;;;8CACpB,6LAAC,uIAAA,CAAA,WAAQ;oCAAC,WAAU;;;;;;;;;;;;sCAExB,6LAAC;4BAAI,WAAU;sCACV,cAAA,6LAAC,uIAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;IAKzC;IAEF,qBACE,6LAAC;QAAI,WAAU;;0BACX,6LAAC;0BACG,cAAA,6LAAC,qIAAA,CAAA,SAAM;oBAAC,OAAO;oBAAC,SAAQ;oBAAU,MAAK;8BACnC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wBAAC,MAAK;;0CACP,6LAAC,mNAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;4BAAS;;;;;;;;;;;;;;;;;0BAM1C,6LAAC;gBAAI,WAAU;;kCAEX,6LAAC;wBAAI,WAAU;;0CACX,6LAAC,mIAAA,CAAA,OAAI;;kDACD,6LAAC,mIAAA,CAAA,aAAU;;0DACP,6LAAC,mIAAA,CAAA,YAAS;gDAAC,WAAU;;kEAA0B,6LAAC,qMAAA,CAAA,OAAI;;;;;oDAAG;oDAAE,SAAS,IAAI;;;;;;;0DACtE,6LAAC,mIAAA,CAAA,kBAAe;;oDAAE,SAAS,QAAQ;oDAAC;oDAAQ,SAAS,EAAE;;;;;;;;;;;;;kDAE3D,6LAAC,mIAAA,CAAA,cAAW;kDACR,cAAA,6LAAC;4CAAI,WAAU;;8DACV,6LAAC,qMAAA,CAAA,OAAI;oDAAC,WAAU;;;;;;8DAChB,6LAAC;;wDAAK;sEAAa,6LAAC;sEAAQ,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAMxD,6LAAC,mIAAA,CAAA,OAAI;;kDACD,6LAAC,mIAAA,CAAA,aAAU;;0DACP,6LAAC,mIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,6LAAC,mIAAA,CAAA,kBAAe;0DAAC;;;;;;;;;;;;kDAErB,6LAAC,mIAAA,CAAA,cAAW;wCAAC,WAAU;;0DACnB,6LAAC;gDAAI,WAAU;;kEACX,6LAAC;wDAAK,WAAU;;0EAAsC,6LAAC,6MAAA,CAAA,WAAQ;;;;;4DAAE;;;;;;;kEACjE,6LAAC;kEAAM,YAAY,cAAc;;;;;;;;;;;;0DAErC,6LAAC;gDAAI,WAAU;;kEACX,6LAAC;wDAAK,WAAU;;0EAAsC,6LAAC,6NAAA,CAAA,iBAAc;;;;;4DAAE;;;;;;;kEACvE,6LAAC;kEAAM,YAAY,WAAW;;;;;;;;;;;;0DAEjC,6LAAC,wIAAA,CAAA,YAAS;;;;;0DACV,6LAAC;gDAAI,WAAU;;kEACZ,6LAAC,oIAAA,CAAA,QAAK;wDAAC,SAAQ;kEAAgB;;;;;;kEAC/B,6LAAC,oIAAA,CAAA,QAAK;wDAAC,IAAG;wDAAgB,MAAK;wDAAS,aAAY;;;;;;kEACpD,6LAAC;wDAAE,WAAU;;4DAAgC;4DAA6B,YAAY,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAO9G,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC,mIAAA,CAAA,OAAI;;8CACD,6LAAC,mIAAA,CAAA,aAAU;;sDACP,6LAAC,mIAAA,CAAA,YAAS;sDAAC;;;;;;sDACX,6LAAC,mIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAErB,6LAAC,mIAAA,CAAA,cAAW;oCAAC,WAAU;;sDAEnB,6LAAC;;8DACG,6LAAC;oDAAG,WAAU;8DAA6B;;;;;;8DAC3C,6LAAC;oDAAI,WAAU;;sEACX,6LAAC;4DAAI,WAAU;;8EACX,6LAAC;oEAAI,WAAU;;sFACX,6LAAC,oIAAA,CAAA,QAAK;4EAAC,SAAQ;sFAAY;;;;;;sFAC3B,6LAAC,oIAAA,CAAA,QAAK;4EAAC,IAAG;4EAAY,OAAO,eAAe;4EAAW,QAAQ;4EAAC,WAAU;;;;;;;;;;;;8EAE9E,6LAAC;oEAAI,WAAU;;sFACX,6LAAC,oIAAA,CAAA,QAAK;4EAAC,SAAQ;sFAAe;;;;;;sFAC9B,6LAAC,oIAAA,CAAA,QAAK;4EAAC,IAAG;4EAAe,OAAO,eAAe;4EAAc,QAAQ;4EAAC,WAAU;;;;;;;;;;;;;;;;;;sEAIxF,6LAAC,wIAAA,CAAA,YAAS;;;;;sEAEV,6LAAC;4DAAI,WAAU;;8EACX,6LAAC;oEAAG,WAAU;8EAAc;;;;;;8EAC5B,6LAAC,qIAAA,CAAA,SAAM;oEAAC,SAAQ;oEAAU,MAAK;oEAAK,SAAS;;sFACzC,6LAAC,qNAAA,CAAA,aAAU;4EAAC,WAAU;;;;;;wEAAQ;;;;;;;;;;;;;sEAGtC,6LAAC;4DAAI,WAAU;sEACV,mBAAmB,GAAG,CAAC,CAAC,SAAS,sBAC9B,6LAAC;oEAAqB,WAAU;;sFAC5B,6LAAC;4EAAI,WAAU;;8FACX,6LAAC;oFAAI,WAAU;;sGACX,6LAAC,oIAAA,CAAA,QAAK;4FAAC,SAAS,CAAC,aAAa,EAAE,OAAO;4FAAE,WAAU;sGAAU;;;;;;sGAC7D,6LAAC,oIAAA,CAAA,QAAK;4FAAC,IAAI,CAAC,aAAa,EAAE,OAAO;4FAAE,aAAY;;;;;;;;;;;;8FAEpD,6LAAC;oFAAI,WAAU;;sGACX,6LAAC,oIAAA,CAAA,QAAK;4FAAC,SAAS,CAAC,eAAe,EAAE,OAAO;4FAAE,WAAU;sGAAU;;;;;;sGAC/D,6LAAC,oIAAA,CAAA,QAAK;4FAAC,IAAI,CAAC,eAAe,EAAE,OAAO;4FAAE,MAAK;4FAAS,aAAY;;;;;;;;;;;;;;;;;;sFAGxE,6LAAC,qIAAA,CAAA,SAAM;4EAAC,SAAQ;4EAAQ,MAAK;4EAAO,SAAS,IAAM,cAAc,QAAQ,EAAE;sFACvE,cAAA,6LAAC,6MAAA,CAAA,SAAM;gFAAC,WAAU;;;;;;;;;;;;mEAZhB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;sDAoBpC,6LAAC,wIAAA,CAAA,YAAS;;;;;sDAGV,6LAAC;;8DACG,6LAAC;oDAAI,WAAU;;sEACX,6LAAC;4DAAG,WAAU;sEAAwB;;;;;;sEACtC,6LAAC,qIAAA,CAAA,SAAM;4DAAC,SAAQ;4DAAU,MAAK;4DAAK,SAAS;;8EACzC,6LAAC,qNAAA,CAAA,aAAU;oEAAC,WAAU;;;;;;gEAAQ;;;;;;;;;;;;;8DAGtC,6LAAC;oDAAI,WAAU;8DACV,WAAW,GAAG,CAAC,CAAC,KAAK,sBAClB,6LAAC;4DAAiB,WAAU;;8EACxB,6LAAC;oEAAI,WAAU;;sFACX,6LAAC;4EAAI,WAAU;;8FACX,6LAAC,oIAAA,CAAA,QAAK;oFAAC,SAAS,CAAC,SAAS,EAAE,OAAO;oFAAE,WAAU;8FAAU;;;;;;8FACzD,6LAAC,oIAAA,CAAA,QAAK;oFAAC,IAAI,CAAC,SAAS,EAAE,OAAO;oFAAE,aAAY;;;;;;;;;;;;sFAEhD,6LAAC;4EAAI,WAAU;;8FACX,6LAAC,oIAAA,CAAA,QAAK;oFAAC,SAAS,CAAC,WAAW,EAAE,OAAO;oFAAE,WAAU;8FAAU;;;;;;8FAC3D,6LAAC,oIAAA,CAAA,QAAK;oFAAC,IAAI,CAAC,WAAW,EAAE,OAAO;oFAAE,MAAK;oFAAS,aAAY;;;;;;;;;;;;;;;;;;8EAGpE,6LAAC,qIAAA,CAAA,SAAM;oEAAC,SAAQ;oEAAQ,MAAK;oEAAO,SAAS,IAAM,gBAAgB,IAAI,EAAE;8EACrE,cAAA,6LAAC,6MAAA,CAAA,SAAM;wEAAC,WAAU;;;;;;;;;;;;2DAZhB,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;;8CAmBhC,6LAAC,mIAAA,CAAA,aAAU;oCAAC,WAAU;8CAClB,cAAA,6LAAC,8IAAA,CAAA,cAAW;;0DACR,6LAAC,8IAAA,CAAA,qBAAkB;gDAAC,OAAO;0DACvB,cAAA,6LAAC,qIAAA,CAAA,SAAM;;sEACH,6LAAC,iNAAA,CAAA,aAAU;4DAAC,WAAU;;;;;;wDAAS;;;;;;;;;;;;0DAItC,6LAAC,8IAAA,CAAA,qBAAkB;;kEAChB,6LAAC,8IAAA,CAAA,oBAAiB;;0EACd,6LAAC,8IAAA,CAAA,mBAAgB;0EAAC;;;;;;0EAClB,6LAAC,8IAAA,CAAA,yBAAsB;0EAAC;;;;;;;;;;;;kEAI5B,6LAAC,8IAAA,CAAA,oBAAiB;;0EACd,6LAAC,8IAAA,CAAA,oBAAiB;0EAAC;;;;;;0EACnB,6LAAC,8IAAA,CAAA,oBAAiB;gEAAC,SAAS;0EAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUxF;GA5QwB;;QACF,+HAAA,CAAA,WAAQ;QACX,qIAAA,CAAA,YAAS;;;KAFJ","debugId":null}}]
}