{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Table component and its parts.\n * This provides a set of styled components for creating tables.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root `<table>` element. */\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\n/** The `<thead>` element. */\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\n/** The `<tbody>` element. */\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\n/** The `<tfoot>` element. */\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\n/** The `<tr>` element. */\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\n/** The `<th>` element. */\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\n/** The `<td>` element. */\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\n/** The `<caption>` element. */\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;AACD;AAEA;;;;AAEA,gCAAgC,GAChC,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,2BAA2B,GAC3B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,wBAAwB,GACxB,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,6BAA6B,GAC7B,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC9D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Label component.\n * It is a styled text label, typically used for form fields.\n * It is built on top of the Radix UI Label primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/label\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the base styles for the label.\n */\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\n/**\n * The Label component.\n */\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF;;CAEC,GACD,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAgPsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA+BsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAgDsB,uBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA2DsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAwEsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA6EsB,yBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAkFsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA4FsB,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA4GsB,2BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAmHsB,gCAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA+HsB,4BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAyIsB,2BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA0JsB,oBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAiKsB,uBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA6KsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA4LsB,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 571, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAgMsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAqMsB,8BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 603, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAiNsB,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAsNsB,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 635, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA0NsB,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IA+NsB,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAqOsB,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 683, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAqPsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 699, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAgQsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 715, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":";;;;;;IAoQsB,2BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters' },\n    { id: 2, name: 'Downtown Office' },\n    { id: 3, name: 'Remote' },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending'\n        }));\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n"],"names":[],"mappings":"AAAA;;CAEC","debugId":null}},
    {"offset": {"line": 828, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the AlertDialog component and its parts.\n * It is a modal dialog that interrupts the user with important content and\n * requires a response. It is built on top of the Radix UI Alert Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/alert-dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\n/**\n * The root component for an alert dialog.\n */\nconst AlertDialog = AlertDialogPrimitive.Root\n\n/**\n * The trigger that opens the alert dialog.\n */\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the alert dialog.\n */\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\n/**\n * The header of the alert dialog, containing the title and description.\n */\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\n/**\n * The footer of the alert dialog, containing action buttons.\n */\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\n/**\n * The title of the alert dialog.\n */\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\n/**\n * The description of the alert dialog.\n */\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\n/**\n * The action button that typically performs the primary action of the dialog.\n */\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\n/**\n * The cancel button that closes the dialog.\n */\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;;;;AAGD;AACA;AAEA;AACA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,cAAc,8KAAA,CAAA,OAAyB;AAE7C;;CAEC,GACD,MAAM,qBAAqB,8KAAA,CAAA,UAA4B;AAEvD;;CAEC,GACD,MAAM,oBAAoB,8KAAA,CAAA,SAA2B;AAErD;;CAEC,GACD,MAAM,mCAAqB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACpE,6LAAC,8KAAA,CAAA,UAA4B;QAC3B,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2JACA;QAED,GAAG,KAAK;QACT,KAAK;;;;;;KAPH;AAUN,mBAAmB,WAAW,GAAG,8KAAA,CAAA,UAA4B,CAAC,WAAW;AAEzE;;CAEC,GACD,MAAM,mCAAqB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACpE,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,8KAAA,CAAA,UAA4B;gBAC3B,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;;;;;;;;;;;;AAIf,mBAAmB,WAAW,GAAG,8KAAA,CAAA,UAA4B,CAAC,WAAW;AAEzE;;CAEC,GACD,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACJ,iBACC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,kBAAkB,WAAW,GAAG;AAEhC;;CAEC,GACD,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACJ,iBACC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,kBAAkB,WAAW,GAAG;AAEhC;;CAEC,GACD,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAClE,6LAAC,8KAAA,CAAA,QAA0B;QACzB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,yBAAyB;QACtC,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG,8KAAA,CAAA,QAA0B,CAAC,WAAW;AAErE;;CAEC,GACD,MAAM,uCAAyB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACxE,6LAAC,8KAAA,CAAA,cAAgC;QAC/B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,uBAAuB,WAAW,GAChC,8KAAA,CAAA,cAAgC,CAAC,WAAW;AAE9C;;CAEC,GACD,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACnE,6LAAC,8KAAA,CAAA,SAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,KAAK;QAC/B,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,8KAAA,CAAA,SAA2B,CAAC,WAAW;AAEvE;;CAEC,GACD,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACnE,6LAAC,8KAAA,CAAA,SAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;YAAE,SAAS;QAAU,IACpC,gBACA;QAED,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,8KAAA,CAAA,SAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1007, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/branches/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Branches page for the Admin portal.\n * It allows administrators to view, add, and delete company branches.\n */\n'use client';\n\nimport * as React from 'react';\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    CardTitle,\n    CardDescription,\n    CardFooter,\n} from \"@/components/ui/card\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getBranches, createBranchAction, deleteBranchAction } from \"@/lib/data\";\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\n/**\n * Renders the admin branches management page.\n * @returns {JSX.Element} The branches page component.\n */\nexport default function BranchesPage() {\n    const { toast } = useToast();\n    const [branches, setBranches] = React.useState([]);\n    const [newBranchName, setNewBranchName] = React.useState('');\n\n    const fetchBranches = React.useCallback(async () => {\n        const data = await getBranches();\n        setBranches(data);\n    }, []);\n\n    React.useEffect(() => {\n        fetchBranches();\n    }, [fetchBranches]);\n\n    const handleAddBranch = async () => {\n        if (!newBranchName.trim()) {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: 'Branch name cannot be empty.',\n            });\n            return;\n        }\n        const result = await createBranchAction(newBranchName);\n        if (result.success) {\n            toast({\n                title: 'Success',\n                description: 'New branch has been added.',\n            });\n            setNewBranchName('');\n            fetchBranches();\n        } else {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: result.message || 'Failed to add branch.',\n            });\n        }\n    };\n\n    const handleDeleteBranch = async (id) => {\n        const result = await deleteBranchAction(id);\n        if (result.success) {\n            toast({\n                title: 'Success',\n                description: 'Branch has been deleted.',\n            });\n            fetchBranches();\n        } else {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: result.message || 'Failed to delete branch.',\n            });\n        }\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            <h1 className=\"text-3xl font-bold font-headline\">Manage Branches</h1>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Add Branch Form */}\n                <div className=\"lg:col-span-1\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Add New Branch</CardTitle>\n                            <CardDescription>Create a new branch location.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"branch-name\">Branch Name</Label>\n                                <Input\n                                    id=\"branch-name\"\n                                    placeholder=\"e.g., North Campus\"\n                                    value={newBranchName}\n                                    onChange={(e) => setNewBranchName(e.target.value)}\n                                />\n                            </div>\n                        </CardContent>\n                        <CardFooter>\n                            <Button className=\"w-full\" onClick={handleAddBranch}>Add Branch</Button>\n                        </CardFooter>\n                    </Card>\n                </div>\n\n                {/* Branches Table */}\n                <div className=\"lg:col-span-2\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Existing Branches</CardTitle>\n                            <CardDescription>The list of all current company branches.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            {branches.length > 0 ? (\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead>Branch Name</TableHead>\n                                            <TableHead className=\"text-right\">Actions</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {branches.map((branch) => (\n                                            <TableRow key={branch.id}>\n                                                <TableCell className=\"font-medium\">{branch.name}</TableCell>\n                                                <TableCell className=\"text-right\">\n                                                    <AlertDialog>\n                                                        <AlertDialogTrigger asChild>\n                                                            <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive\">\n                                                                <Trash2 className=\"h-4 w-4\" />\n                                                            </Button>\n                                                        </AlertDialogTrigger>\n                                                        <AlertDialogContent>\n                                                            <AlertDialogHeader>\n                                                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                                                <AlertDialogDescription>\n                                                                    This will permanently delete the branch. This action cannot be undone.\n                                                                </AlertDialogDescription>\n                                                            </AlertDialogHeader>\n                                                            <AlertDialogFooter>\n                                                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                                                <AlertDialogAction onClick={() => handleDeleteBranch(branch.id)}>Delete</AlertDialogAction>\n                                                            </AlertDialogFooter>\n                                                        </AlertDialogContent>\n                                                    </AlertDialog>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            ) : (\n                                <p className=\"text-muted-foreground text-center\">No branches found. Add one to get started.</p>\n                            )}\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AAGD;AACA;AAQA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAzBA;;;;;;;;;;;AAyCe,SAAS;;IACpB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE,EAAE;IACjD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAEzD,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,cAAiB,AAAD;mDAAE;YACpC,MAAM,OAAO,MAAM,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD;YAC7B,YAAY;QAChB;kDAAG,EAAE;IAEL,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;kCAAE;YACZ;QACJ;iCAAG;QAAC;KAAc;IAElB,MAAM,kBAAkB;QACpB,IAAI,CAAC,cAAc,IAAI,IAAI;YACvB,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,aAAa;YACjB;YACA;QACJ;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE;QACxC,IAAI,OAAO,OAAO,EAAE;YAChB,MAAM;gBACF,OAAO;gBACP,aAAa;YACjB;YACA,iBAAiB;YACjB;QACJ,OAAO;YACH,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,OAAO,IAAI;YACnC;QACJ;IACJ;IAEA,MAAM,qBAAqB,OAAO;QAC9B,MAAM,SAAS,MAAM,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE;QACxC,IAAI,OAAO,OAAO,EAAE;YAChB,MAAM;gBACF,OAAO;gBACP,aAAa;YACjB;YACA;QACJ,OAAO;YACH,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,OAAO,IAAI;YACnC;QACJ;IACJ;IAEA,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAG,WAAU;0BAAmC;;;;;;0BAEjD,6LAAC;gBAAI,WAAU;;kCAEX,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC,mIAAA,CAAA,OAAI;;8CACD,6LAAC,mIAAA,CAAA,aAAU;;sDACP,6LAAC,mIAAA,CAAA,YAAS;sDAAC;;;;;;sDACX,6LAAC,mIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAErB,6LAAC,mIAAA,CAAA,cAAW;8CACR,cAAA,6LAAC;wCAAI,WAAU;;0DACX,6LAAC,oIAAA,CAAA,QAAK;gDAAC,SAAQ;0DAAc;;;;;;0DAC7B,6LAAC,oIAAA,CAAA,QAAK;gDACF,IAAG;gDACH,aAAY;gDACZ,OAAO;gDACP,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;;;;;;8CAI5D,6LAAC,mIAAA,CAAA,aAAU;8CACP,cAAA,6LAAC,qIAAA,CAAA,SAAM;wCAAC,WAAU;wCAAS,SAAS;kDAAiB;;;;;;;;;;;;;;;;;;;;;;kCAMjE,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC,mIAAA,CAAA,OAAI;;8CACD,6LAAC,mIAAA,CAAA,aAAU;;sDACP,6LAAC,mIAAA,CAAA,YAAS;sDAAC;;;;;;sDACX,6LAAC,mIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAErB,6LAAC,mIAAA,CAAA,cAAW;8CACP,SAAS,MAAM,GAAG,kBACf,6LAAC,oIAAA,CAAA,QAAK;;0DACF,6LAAC,oIAAA,CAAA,cAAW;0DACR,cAAA,6LAAC,oIAAA,CAAA,WAAQ;;sEACL,6LAAC,oIAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,6LAAC,oIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAa;;;;;;;;;;;;;;;;;0DAG1C,6LAAC,oIAAA,CAAA,YAAS;0DACL,SAAS,GAAG,CAAC,CAAC,uBACX,6LAAC,oIAAA,CAAA,WAAQ;;0EACL,6LAAC,oIAAA,CAAA,YAAS;gEAAC,WAAU;0EAAe,OAAO,IAAI;;;;;;0EAC/C,6LAAC,oIAAA,CAAA,YAAS;gEAAC,WAAU;0EACjB,cAAA,6LAAC,8IAAA,CAAA,cAAW;;sFACR,6LAAC,8IAAA,CAAA,qBAAkB;4EAAC,OAAO;sFACvB,cAAA,6LAAC,qIAAA,CAAA,SAAM;gFAAC,SAAQ;gFAAQ,MAAK;gFAAO,WAAU;0FAC1C,cAAA,6LAAC,6MAAA,CAAA,SAAM;oFAAC,WAAU;;;;;;;;;;;;;;;;sFAG1B,6LAAC,8IAAA,CAAA,qBAAkB;;8FACf,6LAAC,8IAAA,CAAA,oBAAiB;;sGACd,6LAAC,8IAAA,CAAA,mBAAgB;sGAAC;;;;;;sGAClB,6LAAC,8IAAA,CAAA,yBAAsB;sGAAC;;;;;;;;;;;;8FAI5B,6LAAC,8IAAA,CAAA,oBAAiB;;sGACd,6LAAC,8IAAA,CAAA,oBAAiB;sGAAC;;;;;;sGACnB,6LAAC,8IAAA,CAAA,oBAAiB;4FAAC,SAAS,IAAM,mBAAmB,OAAO,EAAE;sGAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDAlBtE,OAAO,EAAE;;;;;;;;;;;;;;;6DA4BpC,6LAAC;wCAAE,WAAU;kDAAoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQjF;GA5IwB;;QACF,+HAAA,CAAA,WAAQ;;;KADN","debugId":null}}]
}