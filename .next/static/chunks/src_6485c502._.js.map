{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Table component and its parts.\n * This provides a set of styled components for creating tables.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root `<table>` element. */\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\n/** The `<thead>` element. */\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\n/** The `<tbody>` element. */\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\n/** The `<tfoot>` element. */\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\n/** The `<tr>` element. */\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\n/** The `<th>` element. */\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\n/** The `<td>` element. */\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\n/** The `<caption>` element. */\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;AACD;AAEA;;;;AAEA,gCAAgC,GAChC,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,2BAA2B,GAC3B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,wBAAwB,GACxB,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,6BAA6B,GAC7B,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC9D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n * It acts as a centralized and server-side-only data access layer.\n * All functions include error handling to return safe default values in case of\n * a database error, preventing the application from crashing.\n */\n'use server';\n\nimport { query } from './db';\nimport { formatDistanceToNow } from 'date-fns';\n\n/**\n * Fetches all the necessary data for the HR dashboard from the database.\n * This includes employee counts, leave requests, and recent activities.\n * @returns {Promise<object>} A promise that resolves with the dashboard data.\n */\nexport async function getHRDashboardData() {\n    try {\n        const employeeCountQuery = \"SELECT COUNT(*) FROM employees WHERE status = 'Active'\";\n        const pendingLeaveQuery = \"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\";\n        const recentActivityQuery = `\n            SELECT \n                lr.id, \n                e.first_name || ' ' || e.last_name as employee_name, \n                lr.leave_type, \n                lr.start_date \n            FROM leave_requests lr\n            JOIN employees e ON lr.employee_id = e.id\n            ORDER BY lr.id DESC\n            LIMIT 5;\n        `;\n\n        const [employeeResult, pendingLeaveResult, activityResult] = await Promise.all([\n            query(employeeCountQuery),\n            query(pendingLeaveQuery),\n            query(recentActivityQuery)\n        ]);\n\n        const employeeCount = employeeResult?.rows?.[0]?.count ?? 0;\n        const pendingLeaves = pendingLeaveResult?.rows?.[0]?.count ?? 0;\n        const recentActivities = activityResult?.rows?.map(row => ({\n            id: row.id,\n            activity: `${row.employee_name} requested ${row.leave_type.toLowerCase()} leave`,\n            timestamp: formatDistanceToNow(new Date(row.start_date), { addSuffix: true }),\n            type: 'Leave'\n        })) ?? [];\n\n        return {\n            stats: [\n                { title: 'Total Employees', value: employeeCount, icon: '<Users />', change: '+2 this month' },\n                { title: 'On Time Percentage', value: '96%', icon: '<CheckCircle />', change: '-1% from last month' },\n                { title: 'Active Job Postings', value: '4', icon: '<Briefcase />', change: '+1 new posting' },\n                { title: 'Pending Leave Requests', value: pendingLeaves, icon: '<Bell />', change: `${pendingLeaves} new today` },\n            ],\n            recentActivities\n        };\n    } catch (error) {\n        console.error(\"Database Error fetching HR dashboard data:\", error);\n        return {\n            stats: [],\n            recentActivities: []\n        };\n    }\n}\n\n/**\n * Fetches past announcements from the database.\n * @returns {Promise<object[]>}\n */\nexport async function getPastAnnouncements() {\n    try {\n        const announcementsQuery = `\n            SELECT \n                a.id, \n                a.title, \n                p.first_name || ' ' || p.last_name as \"postedBy\",\n                to_char(a.posted_at, 'YYYY-MM-DD') as date,\n                a.status\n            FROM announcements a\n            JOIN hr_personnel p ON a.posted_by_id = p.id\n            ORDER BY a.posted_at DESC;\n        `;\n        const result = await query(announcementsQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching announcements:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches attendance data for a specific date.\n * @param {string} date - The date to fetch data for in 'YYYY-MM-DD' format.\n * @returns {Promise<object[]>}\n */\nexport async function getDailyAttendanceData(date) {\n    try {\n        const attendanceQuery = `\n            SELECT \n                e.id, \n                e.first_name || ' ' || e.last_name as name,\n                e.position,\n                e.branch,\n                to_char(a.time_in, 'HH24:MI') as \"timeIn\",\n                to_char(a.time_out, 'HH24:MI') as \"timeOut\",\n                a.status\n            FROM employees e\n            LEFT JOIN attendance a ON e.id = a.employee_id AND a.attendance_date = $1\n            WHERE e.status = 'Active'\n            ORDER BY e.last_name, e.first_name;\n        `;\n        const result = await query(attendanceQuery, [date]);\n        if (!result) return [];\n        return result.rows.map(row => ({\n            ...row,\n            status: row.status || 'Absent'\n        }));\n    } catch (error) {\n        console.error(\"Database Error fetching daily attendance data:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all employees from the database.\n * @returns {Promise<object[]>} A promise that resolves to an array of employee objects.\n */\nexport async function getEmployees() {\n    try {\n        const employeesQuery = `\n            SELECT \n                id,\n                first_name || ' ' || last_name as name,\n                position,\n                branch,\n                status\n            FROM employees\n            ORDER BY last_name, first_name;\n        `;\n        const result = await query(employeesQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching employees:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all leave requests from the database.\n * @returns {Promise<object[]>}\n */\nexport async function getLeaveRequests() {\n    try {\n        const leaveRequestsQuery = `\n            SELECT \n                lr.id,\n                e.first_name || ' ' || e.last_name as \"employeeName\",\n                e.id as \"employeeId\",\n                lr.leave_type,\n                to_char(lr.start_date, 'YYYY-MM-DD') as \"startDate\",\n                to_char(lr.end_date, 'YYYY-MM-DD') as \"endDate\",\n                lr.reason,\n                lr.status\n            FROM leave_requests lr\n            JOIN employees e ON lr.employee_id = e.id\n            ORDER BY \n                CASE lr.status\n                    WHEN 'Pending' THEN 1\n                    WHEN 'Approved' THEN 2\n                    WHEN 'Rejected' THEN 3\n                    ELSE 4\n                END,\n                lr.start_date ASC;\n        `;\n        const result = await query(leaveRequestsQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching leave requests:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all employees and their latest payslip status.\n * @returns {Promise<object[]>}\n */\nexport async function getEmployeesWithPayslipStatus() {\n    try {\n        const employeesQuery = `\n            SELECT \n                e.id,\n                e.first_name || ' ' || e.last_name as name,\n                e.position,\n                e.department,\n                CASE \n                    WHEN p.id IS NOT NULL THEN 'Generated'\n                    ELSE 'Pending'\n                END as \"payslipStatus\"\n            FROM employees e\n            LEFT JOIN payslips p ON e.id = p.employee_id \n                AND p.period_start >= date_trunc('month', current_date)\n                AND p.period_end <= (date_trunc('month', current_date) + interval '1 month - 1 day')\n            WHERE e.status = 'Active'\n            ORDER BY e.last_name, e.first_name;\n        `;\n        const result = await query(employeesQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching employee payslip status:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all active employees to be scheduled.\n * @returns {Promise<object[]>}\n */\nexport async function getEmployeesForScheduling() {\n    try {\n        const employeesQuery = `\n            SELECT id, first_name || ' ' || last_name as name\n            FROM employees\n            WHERE status = 'Active'\n            ORDER BY last_name, first_name;\n        `;\n        const result = await query(employeesQuery);\n        if (!result) return [];\n        return result.rows.map(emp => ({...emp, shift: '9:00 - 17:00'}));\n    } catch (error) {\n        console.error(\"Database Error fetching employees for scheduling:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches the dashboard data for a specific employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<{employee: object, announcements: object[]}>}\n */\nexport async function getEmployeeDashboardData(employeeId) {\n    try {\n        const employeeQuery = \"SELECT id as \\\"employeeId\\\", first_name || ' ' || last_name as name, position, department FROM employees WHERE id = $1\";\n        const announcementsQuery = \"SELECT id, title, content, to_char(posted_at, 'Month DD, YYYY') as date FROM announcements WHERE status = 'Published' ORDER BY posted_at DESC LIMIT 5\";\n        \n        const [employeeResult, announcementsResult] = await Promise.all([\n            query(employeeQuery, [employeeId]),\n            query(announcementsQuery)\n        ]);\n\n        return {\n            employee: employeeResult?.rows[0] || null,\n            announcements: announcementsResult?.rows || []\n        };\n    } catch (error) {\n        console.error(\"Database Error fetching employee dashboard data:\", error);\n        return { employee: null, announcements: [] };\n    }\n}\n\n/**\n * Fetches attendance data for a specific employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<{summary: object, records: object[]}>}\n */\nexport async function getAttendanceData(employeeId) {\n    const defaultData = { \n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: [] \n    };\n\n    try {\n        const attendanceQuery = `\n            SELECT \n                attendance_date, \n                to_char(time_in, 'HH24:MI') as \"time_in\", \n                to_char(time_out, 'HH24:MI') as \"time_out\", \n                status\n            FROM attendance\n            WHERE employee_id = $1 \n              AND attendance_date >= date_trunc('month', current_date)\n            ORDER BY attendance_date DESC;\n        `;\n        const leaveBalanceQuery = `\n            SELECT available_leaves FROM employees WHERE id = $1;\n        `;\n        \n        const [attendanceResult, leaveResult] = await Promise.all([\n            query(attendanceQuery, [employeeId]),\n            query(leaveBalanceQuery, [employeeId])\n        ]);\n\n        if (!attendanceResult || !leaveResult) {\n             return defaultData;\n        }\n\n        const records = attendanceResult.rows.map(r => ({\n            date: new Date(r.attendance_date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric'}),\n            timeIn: r.time_in,\n            timeOut: r.time_out,\n            status: r.status\n        }));\n        \n        let daysAttended = 0;\n        let lates = 0;\n        let absences = 0;\n        let totalHours = 0;\n\n        records.forEach(record => {\n            if (record.status === 'Present' || record.status === 'Late') {\n                daysAttended++;\n                totalHours += 8;\n            }\n            if (record.status === 'Late') {\n                lates++;\n            }\n        });\n        \n        const availableLeaves = leaveResult?.rows?.[0]?.available_leaves ?? 0;\n        const summary = { daysAttended, lates, absences, totalHours, availableLeaves };\n\n        return { summary, records };\n    } catch (error) {\n        console.error(\"Database Error fetching attendance data:\", error);\n        return defaultData;\n    }\n}\n\n/**\n * Fetches past leave requests for a given employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<object[]>}\n */\nexport async function getPastLeaveRequests(employeeId) {\n    try {\n        const pastRequestsQuery = `\n            SELECT \n                id, \n                leave_type, \n                to_char(start_date, 'YYYY-MM-DD') as \"startDate\", \n                to_char(end_date, 'YYYY-MM-DD') as \"endDate\", \n                status \n            FROM leave_requests \n            WHERE employee_id = $1 \n            ORDER BY start_date DESC;\n        `;\n        const result = await query(pastRequestsQuery, [employeeId]);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching leave requests:\", error);\n        return [];\n    }\n}\n\n/**\n * Creates a new leave request in the database.\n * @param {object} leaveRequest - The leave request data.\n * @returns {Promise<void>}\n */\nexport async function createLeaveRequest(leaveRequest) {\n    const { employeeId, leaveType, startDate, endDate, reason } = leaveRequest;\n    try {\n        const insertQuery = `\n            INSERT INTO leave_requests (employee_id, leave_type, start_date, end_date, reason)\n            VALUES ($1, $2, $3, $4, $5);\n        `;\n        await query(insertQuery, [employeeId, leaveType, startDate, endDate, reason]);\n    } catch (error) {\n        console.error(\"Database error creating leave request:\", error);\n        throw new Error(\"Failed to create leave request in database.\");\n    }\n}\n\n/**\n * Fetches the pay periods for the specified employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<object[]>} A promise that resolves to an array of pay periods.\n */\nexport async function getPayPeriods(employeeId) {\n    try {\n        const result = await query(\n            `SELECT \n                id,\n                period_start,\n                period_end,\n                to_char(pay_date, 'Month DD, YYYY') as \"payDate\",\n                earnings,\n                deductions,\n                net_pay\n             FROM payslips \n             WHERE employee_id = $1 \n             ORDER BY period_start DESC`,\n            [employeeId]\n        );\n        if (!result) return [];\n        const formattedPeriods = result.rows.map(p => ({\n            ...p,\n            period: `${new Date(p.period_start).toLocaleDateString()} - ${new Date(p.period_end).toLocaleDateString()}`\n        }));\n        return formattedPeriods;\n    } catch (error) {\n        console.error(\"Failed to fetch pay periods:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches the schedule for a given employee for the current week.\n * @param {string} employeeId The ID of the employee.\n * @returns {Promise<object[]>}\n */\nexport async function getSchedule(employeeId) {\n    try {\n        const scheduleQuery = `\n            SELECT schedule_data \n            FROM schedules\n            WHERE employee_id = $1 \n              AND week_start_date = date_trunc('week', current_date);\n        `;\n        const result = await query(scheduleQuery, [employeeId]);\n        if (result && result.rows.length > 0 && result.rows[0].schedule_data) {\n            return result.rows[0].schedule_data;\n        }\n        return [];\n    } catch (error) {\n        console.error(\"Database error fetching schedule:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches the details for a specific report.\n * In this mock version, it returns null.\n * @param {string} id - The ID of the report to fetch.\n * @returns {Promise<null>} A promise that resolves with null.\n */\nexport async function getReportDetails(id) {\n    try {\n        // In a real application, this would query the database.\n        // For now, we return null to simulate a report not being found\n        // which demonstrates the UI's handling of this case.\n        return null;\n    } catch (error) {\n        console.error(\"Database Error fetching report details:\", error);\n        return null;\n    }\n}\n\n/**\n * Fetches all pending employee approvals from the database.\n * In this mock version, it returns a hardcoded list.\n * @returns {Promise<object[]>}\n */\nexport async function getPendingEmployeeApprovals() {\n    try {\n        // In a real application, this would query the database for employees with 'Pending Approval' status.\n        // For now, we return a hardcoded list to demonstrate the feature.\n        return [\n            { id: 'PEND-001', submittedBy: 'Olivia Chen (HR)', employeeName: 'Michael Johnson', position: 'Software Engineer', submissionDate: '2024-08-22' },\n            { id: 'PEND-002', submittedBy: 'Olivia Chen (HR)', employeeName: 'Jessica Williams', position: 'Marketing Lead', submissionDate: '2024-08-21' },\n            { id: 'PEND-003', submittedBy: 'Olivia Chen (HR)', employeeName: 'Chris Brown', position: 'IT Support', submissionDate: '2024-08-20' },\n        ];\n    } catch (error) {\n        console.error(\"Database Error fetching pending approvals:\", error);\n        return [];\n    }\n}\n\n/**\n * Approves a pending employee.\n * In this mock version, it just simulates success without a database write.\n * @param {string} employeeId The ID of the employee to approve.\n * @returns {Promise<void>}\n */\nexport async function approveEmployee(employeeId) {\n    console.log(`Approving employee ${employeeId}`);\n    // In a real app, you would run an UPDATE query:\n    // await query(\"UPDATE employees SET status = 'Active' WHERE id = $1\", [employeeId]);\n    return Promise.resolve();\n}\n\n/**\n * Rejects a pending employee.\n * In this mock version, it just simulates success without a database write.\n * @param {string} employeeId The ID of the employee to reject.\n * @returns {Promise<void>}\n */\nexport async function rejectEmployee(employeeId) {\n    console.log(`Rejecting employee ${employeeId}`);\n    // In a real app, you would run a DELETE query or update status to 'Rejected':\n    // await query(\"DELETE FROM employees WHERE id = $1 AND status = 'Pending Approval'\", [employeeId]);\n    return Promise.resolve();\n}\n"],"names":[],"mappings":";;;;;;IAocsB,8BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/approvals/actions.js"],"sourcesContent":["/**\n * @fileoverview This file contains the server actions for the employee approvals page.\n */\n'use server';\n\nimport { approveEmployee as approveEmployeeDb, rejectEmployee as rejectEmployeeDb } from '@/lib/data';\nimport { revalidatePath } from 'next/cache';\n\nexport async function approveEmployee(employeeId) {\n    try {\n        await approveEmployeeDb(employeeId);\n        revalidatePath('/admin/approvals');\n        revalidatePath('/admin/dashboard');\n        return { success: true, message: 'Employee approved successfully.' };\n    } catch (e) {\n        return { success: false, message: 'Failed to approve employee.' };\n    }\n}\n\nexport async function rejectEmployee(employeeId) {\n    try {\n        await rejectEmployeeDb(employeeId);\n        revalidatePath('/admin/approvals');\n        revalidatePath('/admin/dashboard');\n        return { success: true, message: 'Employee rejected successfully.' };\n    } catch (e) {\n        return { success: false, message: 'Failed to reject employee.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAQsB,kBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/approvals/actions.js"],"sourcesContent":["/**\n * @fileoverview This file contains the server actions for the employee approvals page.\n */\n'use server';\n\nimport { approveEmployee as approveEmployeeDb, rejectEmployee as rejectEmployeeDb } from '@/lib/data';\nimport { revalidatePath } from 'next/cache';\n\nexport async function approveEmployee(employeeId) {\n    try {\n        await approveEmployeeDb(employeeId);\n        revalidatePath('/admin/approvals');\n        revalidatePath('/admin/dashboard');\n        return { success: true, message: 'Employee approved successfully.' };\n    } catch (e) {\n        return { success: false, message: 'Failed to approve employee.' };\n    }\n}\n\nexport async function rejectEmployee(employeeId) {\n    try {\n        await rejectEmployeeDb(employeeId);\n        revalidatePath('/admin/approvals');\n        revalidatePath('/admin/dashboard');\n        return { success: true, message: 'Employee rejected successfully.' };\n    } catch (e) {\n        return { success: false, message: 'Failed to reject employee.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAmBsB,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the AlertDialog component and its parts.\n * It is a modal dialog that interrupts the user with important content and\n * requires a response. It is built on top of the Radix UI Alert Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/alert-dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\n/**\n * The root component for an alert dialog.\n */\nconst AlertDialog = AlertDialogPrimitive.Root\n\n/**\n * The trigger that opens the alert dialog.\n */\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the alert dialog.\n */\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\n/**\n * The header of the alert dialog, containing the title and description.\n */\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\n/**\n * The footer of the alert dialog, containing action buttons.\n */\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\n/**\n * The title of the alert dialog.\n */\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\n/**\n * The description of the alert dialog.\n */\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\n/**\n * The action button that typically performs the primary action of the dialog.\n */\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\n/**\n * The cancel button that closes the dialog.\n */\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 494, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Dialog component and its parts.\n * A dialog is a window overlaid on either the primary window or another dialog window.\n * It is built on top of the Radix UI Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The root component for a dialog.\n */\nconst Dialog = DialogPrimitive.Root\n\n/**\n * The trigger that opens the dialog.\n */\nconst DialogTrigger = DialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst DialogPortal = DialogPrimitive.Portal\n\n/**\n * A button that closes the dialog.\n */\nconst DialogClose = DialogPrimitive.Close\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the dialog.\n */\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\n/**\n * The header of the dialog, containing the title and description.\n */\nconst DialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\n/**\n * The footer of the dialog, typically containing action buttons.\n */\nconst DialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\n/**\n * The title of the dialog.\n */\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\n/**\n * The description of the dialog.\n */\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,SAAS,qKAAA,CAAA,OAAoB;AAEnC;;CAEC,GACD,MAAM,gBAAgB,qKAAA,CAAA,UAAuB;AAE7C;;CAEC,GACD,MAAM,eAAe,qKAAA,CAAA,SAAsB;AAE3C;;CAEC,GACD,MAAM,cAAc,qKAAA,CAAA,QAAqB;AAEzC;;CAEC,GACD,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC/D,6LAAC,qKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;KAPP;AAUN,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D;;CAEC,GACD,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACzE,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,qKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,qKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,+LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D;;CAEC,GACD,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACJ,iBACC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B;;CAEC,GACD,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACJ,iBACC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D;;CAEC,GACD,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACnE,6LAAC,qKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,qKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 670, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/approvals/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Pending Approvals page for the Admin portal.\n * It provides administrators with a view to manage and approve/reject new employee submissions.\n */\n'use client';\n\nimport * as React from 'react';\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    CardTitle,\n    CardDescription,\n} from \"@/components/ui/card\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, X, Eye } from \"lucide-react\";\nimport { getPendingEmployeeApprovals } from \"@/lib/data\";\nimport { approveEmployee, rejectEmployee } from './actions';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n    AlertDialog,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogCancel,\n    AlertDialogAction,\n    AlertDialogTrigger\n} from \"@/components/ui/alert-dialog\";\nimport {\n    Dialog,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogDescription,\n    DialogFooter,\n    DialogTrigger,\n    DialogClose\n} from \"@/components/ui/dialog\";\n\n\n/**\n * Renders the admin pending approvals page.\n * @returns {JSX.Element} The pending approvals page component.\n */\nexport default function PendingApprovalsPage() {\n    const { toast } = useToast();\n    const [pendingApprovals, setPendingApprovals] = React.useState([]);\n\n    React.useEffect(() => {\n        const fetchData = async () => {\n            const data = await getPendingEmployeeApprovals();\n            setPendingApprovals(data);\n        };\n        fetchData();\n    }, []);\n\n    const handleApprove = async (id) => {\n        const result = await approveEmployee(id);\n        if (result?.success) {\n            toast({\n                title: 'Success',\n                description: 'Employee has been approved.',\n            });\n            setPendingApprovals(prev => prev.filter(req => req.id !== id));\n        } else {\n             toast({\n                variant: \"destructive\",\n                title: 'Error',\n                description: result?.message || 'Failed to approve employee.',\n            });\n        }\n    };\n    \n    const handleReject = async (id) => {\n        const result = await rejectEmployee(id);\n        if (result?.success) {\n            toast({\n                title: 'Success',\n                description: 'Employee has been rejected.',\n            });\n            setPendingApprovals(prev => prev.filter(req => req.id !== id));\n        } else {\n             toast({\n                variant: \"destructive\",\n                title: 'Error',\n                description: result?.message || 'Failed to reject employee.',\n            });\n        }\n    };\n\n\n    return (\n        <div className=\"space-y-6\">\n            <h1 className=\"text-3xl font-bold font-headline\">Pending Employee Approvals</h1>\n\n            {/* Pending Approvals Table */}\n            <Card>\n                <CardHeader>\n                    <CardTitle>Incoming Employee Submissions</CardTitle>\n                    <CardDescription>Review and act on new employee profiles submitted by HR.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    {pendingApprovals.length > 0 ? (\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Submitted By</TableHead>\n                                    <TableHead>Employee Name</TableHead>\n                                    <TableHead>Position</TableHead>\n                                    <TableHead>Submission Date</TableHead>\n                                    <TableHead className=\"text-right\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {pendingApprovals.map((req) => (\n                                    <TableRow key={req.id}>\n                                        <TableCell>\n                                            <div className=\"font-medium\">{req.submittedBy}</div>\n                                        </TableCell>\n                                        <TableCell>{req.employeeName}</TableCell>\n                                        <TableCell>{req.position}</TableCell>\n                                        <TableCell>{req.submissionDate}</TableCell>\n                                        <TableCell className=\"text-right\">\n                                            <div className=\"flex gap-2 justify-end\">\n                                                <Dialog>\n                                                    <DialogTrigger asChild>\n                                                        <Button variant=\"outline\" size=\"sm\">\n                                                            <Eye className=\"mr-2 h-4 w-4\" /> View Details\n                                                        </Button>\n                                                    </DialogTrigger>\n                                                    <DialogContent>\n                                                        <DialogHeader>\n                                                            <DialogTitle>Pending Approval: {req.employeeName}</DialogTitle>\n                                                            <DialogDescription>\n                                                                Review the details of this new employee submission.\n                                                            </DialogDescription>\n                                                        </DialogHeader>\n                                                        <div className=\"space-y-2 text-sm\">\n                                                            <p><strong>Submitted By:</strong> {req.submittedBy}</p>\n                                                            <p><strong>Position:</strong> {req.position}</p>\n                                                            <p><strong>Submission Date:</strong> {req.submissionDate}</p>\n                                                        </div>\n                                                        <DialogFooter>\n                                                            <DialogClose asChild>\n                                                                <Button variant=\"outline\">Close</Button>\n                                                            </DialogClose>\n                                                        </DialogFooter>\n                                                    </DialogContent>\n                                                </Dialog>\n                                                <AlertDialog>\n                                                    <AlertDialogTrigger asChild>\n                                                        <Button variant=\"outline\" size=\"sm\" className=\"text-green-600 border-green-600 hover:bg-green-100 hover:text-green-700\">\n                                                            <Check className=\"h-4 w-4\" /> Approve\n                                                        </Button>\n                                                    </AlertDialogTrigger>\n                                                    <AlertDialogContent>\n                                                        <AlertDialogHeader>\n                                                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                                            <AlertDialogDescription>\n                                                                This action will approve the new employee and create their profile.\n                                                            </AlertDialogDescription>\n                                                        </AlertDialogHeader>\n                                                        <AlertDialogFooter>\n                                                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                                            <AlertDialogAction onClick={() => handleApprove(req.id)}>Approve</AlertDialogAction>\n                                                        </AlertDialogFooter>\n                                                    </AlertDialogContent>\n                                                </AlertDialog>\n                                                <AlertDialog>\n                                                    <AlertDialogTrigger asChild>\n                                                        <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 border-red-600 hover:bg-red-100 hover:text-red-700\">\n                                                            <X className=\"h-4 w-4\" /> Reject\n                                                        </Button>\n                                                    </AlertDialogTrigger>\n                                                    <AlertDialogContent>\n                                                        <AlertDialogHeader>\n                                                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                                            <AlertDialogDescription>\n                                                                This action will reject the new employee submission. This cannot be undone.\n                                                            </AlertDialogDescription>\n                                                        </AlertDialogHeader>\n                                                        <AlertDialogFooter>\n                                                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                                            <AlertDialogAction onClick={() => handleReject(req.id)}>Reject</AlertDialogAction>\n                                                        </AlertDialogFooter>\n                                                    </AlertDialogContent>\n                                                </AlertDialog>\n                                            </div>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    ) : (\n                        <p className=\"text-muted-foreground text-center\">No pending employee approvals.</p>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}