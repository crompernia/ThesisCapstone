{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/components/ui/table.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Table component and its parts.\n * This provides a set of styled components for creating tables.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root `<table>` element. */\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\n/** The `<thead>` element. */\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\n/** The `<tbody>` element. */\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\n/** The `<tfoot>` element. */\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\n/** The `<tr>` element. */\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\n/** The `<th>` element. */\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\n/** The `<td>` element. */\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\n/** The `<caption>` element. */\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;AACD;AAEA;;;;AAEA,gCAAgC,GAChC,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,2BAA2B,GAC3B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,wBAAwB,GACxB,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,6BAA6B,GAC7B,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC9D,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/components/ui/badge.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Badge component.\n * Badges are used to highlight small pieces of information, such as a status or a category.\n * They come in different visual styles (variants).\n */\nimport * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the visual styles for the badge component.\n * Includes variants for different states like 'default', 'secondary', 'destructive', and 'outline'.\n */\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n/**\n * The Badge component itself.\n * @param {BadgeProps} props - The properties for the badge.\n * @returns {JSX.Element} The rendered badge component.\n */\nfunction Badge({ className, variant, ...props }) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;AACD;AACA;AAEA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF;;;;CAIC,GACD,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO;IAC7C,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/components/ui/select.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Select component and its parts.\n * A select component allows the user to choose one option from a list.\n * It is built on top of the Radix UI Select primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/select\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root component for a select dropdown. */\nconst Select = SelectPrimitive.Root\n\n/** A group of related options in a select dropdown. */\nconst SelectGroup = SelectPrimitive.Group\n\n/** The part of the select that displays the currently selected value. */\nconst SelectValue = SelectPrimitive.Value\n\n/** The trigger that opens the select dropdown. */\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\n/** The button to scroll up in the select content. */\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\n/** The button to scroll down in the select content. */\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\n/** The content of the select dropdown, containing the list of options. */\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\n/** A label for a group of options in the select dropdown. */\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\n/** An individual option in the select dropdown. */\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\n/** A separator between groups of options in the select dropdown. */\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format } from 'date-fns';\n\nexport async function getHRDashboardData() {\n    const totalEmployeesResult = await query(\"SELECT COUNT(*) FROM accounts WHERE role = 'Employee'\");\n    const totalEmployees = totalEmployeesResult.rows[0].count || '0';\n\n    const pendingLeaveRequestsResult = await query(\"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\");\n    const pendingLeaveRequests = pendingLeaveRequestsResult.rows[0].count || '0';\n\n    // Mocking some stats as there's no table for them yet\n    const stats = [\n        { title: 'Total Employees', value: String(totalEmployees), change: '' },\n        { title: 'On Time Percentage', value: `0%`, change: '' }, // No attendance data yet\n        { title: 'Active Job Postings', value: '4', change: 'External API' },\n        { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n    ];\n\n    // No activity log table yet\n    return {\n        stats,\n        recentActivities: []\n    };\n}\n\n\nexport async function getPastAnnouncements() {\n    const result = await query(`\n        SELECT a.id, a.title, a.content, a.status, a.created_at, acc.first_name, acc.last_name\n        FROM announcements a\n        JOIN accounts acc ON a.posted_by = acc.id\n        ORDER BY a.created_at DESC\n    `);\n    return result.rows.map(a => ({\n        ...a,\n        postedBy: `${a.first_name} ${a.last_name}`,\n        date: format(new Date(a.created_at), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001'; // In a real app, this should come from session\n    await query(\n        'INSERT INTO announcements (title, content, status, posted_by_id) VALUES ($1, $2, $3, $4)',\n        [title, content, status, hrUserId]\n    );\n}\n\nexport async function deleteAnnouncement(id) {\n    await query('DELETE FROM announcements WHERE id = $1', [id]);\n}\n\nexport async function getDailyAttendanceData(date) {\n    // This is a placeholder as there is no attendance table yet.\n    return [];\n}\n\n\nexport async function getEmployees() {\n    const result = await query(`\n        SELECT id, first_name, last_name, position, branch, status\n        FROM accounts\n        WHERE role = 'Employee' AND status != 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const result = await query('SELECT * FROM accounts WHERE id = $1', [id]);\n    const employee = result.rows[0];\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const result = await query('DELETE FROM accounts WHERE id = $1', [id]);\n    return result.rowCount > 0;\n}\n\nexport async function getLeaveRequests() {\n    const result = await query(`\n        SELECT lr.id, lr.leave_type, lr.start_date, lr.end_date, lr.reason, lr.status,\n               a.id as \"employeeId\", a.first_name, a.last_name\n        FROM leave_requests lr\n        JOIN accounts a ON lr.employee_id = a.id\n        ORDER BY lr.created_at DESC\n    `);\n    return result.rows.map(lr => ({\n        id: lr.id,\n        employeeId: lr.employeeId,\n        employeeName: `${lr.first_name} ${lr.last_name}`,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        reason: lr.reason,\n        status: lr.status\n    }));\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    await query('UPDATE leave_requests SET status = $1 WHERE id = $2', [status, requestId]);\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", department, sss_number, philhealth_number, pagibig_number, tin\n        FROM accounts\n        WHERE role = 'Employee'\n    `);\n    \n    return result.rows.map(a => {\n        const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n        return {\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending', // No payslip table yet\n            benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n        };\n    });\n}\n\nexport async function getEmployeesForScheduling() {\n    const result = await query(`\n        SELECT id, first_name, last_name FROM accounts WHERE role = 'Employee' AND status = 'Active'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        shift: '9:00 - 17:00' // Default shift\n    }));\n}\n    // Fetch Employee Data from Database\nexport async function getEmployeeDashboardData(employeeid) {\n    const result = await query('SELECT id, first_name, last_name, \"position\", department, branch, email FROM accounts WHERE id = $1', [employeeid]);\n    const employee = result.rows[0];\n    \n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n\n    const announcementsResult = await query(\"SELECT title, content, created_at FROM announcements WHERE status = 'Published' ORDER BY created_at DESC LIMIT 5\");\n    \n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            branch: employee.branch,\n            email: employee.email,\n        },\n        announcements: announcementsResult.rows.map(a => ({\n            id: a.id,\n            title: a.title,\n            content: a.content,\n            date: format(new Date(a.created_at), 'MMMM d, yyyy')\n        }))\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    // This is a placeholder as there is no attendance table yet.\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const result = await query(\n        'SELECT id, leave_type, start_date, end_date, status FROM leave_requests WHERE employee_id = $1 ORDER BY start_date DESC',\n        [employeeId]\n    );\n\n    return result.rows.map(lr => ({\n        id: lr.id,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        status: lr.status,\n    }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    await query(\n        'INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason) VALUES ($1, $2, $3, $4, $5)',\n        [employeeId, leaveType, startDate, endDate, reason]\n    );\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    // This is a placeholder as there is no payslip table yet.\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    // This is a placeholder as there is no schedule table yet.\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", date_hired\n        FROM accounts\n        WHERE status = 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        employeeName: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        submittedBy: 'Olivia Chen', // Placeholder\n        submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function approveEmployee(employeeId) {\n    await query(\"UPDATE accounts SET status = 'Active' WHERE id = $1\", [employeeId]);\n}\n\nexport async function rejectEmployee(employeeId) {\n    await query(\"DELETE FROM accounts WHERE id = $1\", [employeeId]);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const result = await query('SELECT first_name, last_name FROM accounts WHERE id = $1', [employeeId]);\n    const employee = result.rows[0];\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This is a placeholder as there is no reports table yet.\n    return null;\n}\n\nexport async function getHrPersonnel() {\n    const result = await query(`\n        SELECT id, first_name, last_name, \"position\", managed_branches\n        FROM accounts WHERE role = 'HR'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        managed_branches: a.managed_branches || []\n    }));\n}\n\nexport async function getBranches() {\n    const result = await query('SELECT id, name, coordinates FROM branches ORDER BY name');\n    return result.rows;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    try {\n        const result = await query(\n            'INSERT INTO branches (name, coordinates) VALUES ($1, $2) RETURNING *',\n            [branchName, coordinates]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A branch with this name already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deleteBranch(branchId) {\n    // Check if any HR personnel is assigned to this branch\n    const branchResult = await query('SELECT name FROM branches WHERE id = $1', [branchId]);\n    if (branchResult.rowCount === 0) return;\n    const branchName = branchResult.rows[0].name;\n\n    const hrResult = await query(\"SELECT 1 FROM accounts WHERE role = 'HR' AND $1 = ANY(managed_branches)\", [branchName]);\n    if (hrResult.rowCount > 0) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    await query('DELETE FROM branches WHERE id = $1', [branchId]);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const result = await query(\n        'UPDATE accounts SET managed_branches = $1 WHERE id = $2',\n        [branches, hrId]\n    );\n    return { success: result.rowCount > 0 };\n}\n\n\nexport async function updateEmployee(id, data) {\n    const { firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email } = data;\n    const result = await query(`\n        UPDATE accounts SET\n            first_name = $1, last_name = $2, middle_name = $3, gender = $4,\n            date_of_birth = $5, \"position\" = $6, department = $7, branch = $8,\n            date_hired = $9, email = $10\n        WHERE id = $11\n    `, [firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email, id]);\n    \n    return { success: result.rowCount > 0, message: result.rowCount > 0 ? 'Employee updated successfully.' : 'Employee not found.' };\n}\n\n\nexport async function getPositions() {\n    const result = await query('SELECT id, title, rate FROM positions ORDER BY title');\n    return result.rows;\n}\n\nexport async function createPosition(title, rate) {\n    try {\n        const result = await query(\n            'INSERT INTO positions (title, rate) VALUES ($1, $2) RETURNING *',\n            [title, rate]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A position with this title already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deletePosition(positionId) {\n    const positionResult = await query('SELECT title FROM positions WHERE id = $1', [positionId]);\n    if (positionResult.rowCount === 0) return;\n    const positionTitle = positionResult.rows[0].title;\n\n    const accountResult = await query(\"SELECT 1 FROM accounts WHERE position = $1\", [positionTitle]);\n    if (accountResult.rowCount > 0) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    await query('DELETE FROM positions WHERE id = $1', [positionId]);\n}\n\nexport async function getDepartmentsForBranch(branchName) {\n    // This assumes a separate 'departments' table or similar structure.\n    // For now, let's query distinct departments from accounts in that branch.\n    const result = await query(\n        'SELECT DISTINCT department FROM accounts WHERE branch = $1 AND department IS NOT NULL ORDER BY department',\n        [branchName]\n    );\n    return result.rows.map(r => r.department);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    // This is a simplification. A real app might have a departments_positions link table.\n    // Here we get all positions associated with employees in that department.\n    const result = await query(\n        'SELECT DISTINCT \"position\" FROM accounts WHERE department = $1 AND \"position\" IS NOT NULL ORDER BY \"position\"',\n        [departmentName]\n    );\n    return result.rows.map(r => r.position);\n}\n"],"names":[],"mappings":";;;;;;IA+DsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format } from 'date-fns';\n\nexport async function getHRDashboardData() {\n    const totalEmployeesResult = await query(\"SELECT COUNT(*) FROM accounts WHERE role = 'Employee'\");\n    const totalEmployees = totalEmployeesResult.rows[0].count || '0';\n\n    const pendingLeaveRequestsResult = await query(\"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\");\n    const pendingLeaveRequests = pendingLeaveRequestsResult.rows[0].count || '0';\n\n    // Mocking some stats as there's no table for them yet\n    const stats = [\n        { title: 'Total Employees', value: String(totalEmployees), change: '' },\n        { title: 'On Time Percentage', value: `0%`, change: '' }, // No attendance data yet\n        { title: 'Active Job Postings', value: '4', change: 'External API' },\n        { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n    ];\n\n    // No activity log table yet\n    return {\n        stats,\n        recentActivities: []\n    };\n}\n\n\nexport async function getPastAnnouncements() {\n    const result = await query(`\n        SELECT a.id, a.title, a.content, a.status, a.created_at, acc.first_name, acc.last_name\n        FROM announcements a\n        JOIN accounts acc ON a.posted_by = acc.id\n        ORDER BY a.created_at DESC\n    `);\n    return result.rows.map(a => ({\n        ...a,\n        postedBy: `${a.first_name} ${a.last_name}`,\n        date: format(new Date(a.created_at), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001'; // In a real app, this should come from session\n    await query(\n        'INSERT INTO announcements (title, content, status, posted_by_id) VALUES ($1, $2, $3, $4)',\n        [title, content, status, hrUserId]\n    );\n}\n\nexport async function deleteAnnouncement(id) {\n    await query('DELETE FROM announcements WHERE id = $1', [id]);\n}\n\nexport async function getDailyAttendanceData(date) {\n    // This is a placeholder as there is no attendance table yet.\n    return [];\n}\n\n\nexport async function getEmployees() {\n    const result = await query(`\n        SELECT id, first_name, last_name, position, branch, status\n        FROM accounts\n        WHERE role = 'Employee' AND status != 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const result = await query('SELECT * FROM accounts WHERE id = $1', [id]);\n    const employee = result.rows[0];\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const result = await query('DELETE FROM accounts WHERE id = $1', [id]);\n    return result.rowCount > 0;\n}\n\nexport async function getLeaveRequests() {\n    const result = await query(`\n        SELECT lr.id, lr.leave_type, lr.start_date, lr.end_date, lr.reason, lr.status,\n               a.id as \"employeeId\", a.first_name, a.last_name\n        FROM leave_requests lr\n        JOIN accounts a ON lr.employee_id = a.id\n        ORDER BY lr.created_at DESC\n    `);\n    return result.rows.map(lr => ({\n        id: lr.id,\n        employeeId: lr.employeeId,\n        employeeName: `${lr.first_name} ${lr.last_name}`,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        reason: lr.reason,\n        status: lr.status\n    }));\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    await query('UPDATE leave_requests SET status = $1 WHERE id = $2', [status, requestId]);\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", department, sss_number, philhealth_number, pagibig_number, tin\n        FROM accounts\n        WHERE role = 'Employee'\n    `);\n    \n    return result.rows.map(a => {\n        const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n        return {\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending', // No payslip table yet\n            benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n        };\n    });\n}\n\nexport async function getEmployeesForScheduling() {\n    const result = await query(`\n        SELECT id, first_name, last_name FROM accounts WHERE role = 'Employee' AND status = 'Active'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        shift: '9:00 - 17:00' // Default shift\n    }));\n}\n    // Fetch Employee Data from Database\nexport async function getEmployeeDashboardData(employeeid) {\n    const result = await query('SELECT id, first_name, last_name, \"position\", department, branch, email FROM accounts WHERE id = $1', [employeeid]);\n    const employee = result.rows[0];\n    \n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n\n    const announcementsResult = await query(\"SELECT title, content, created_at FROM announcements WHERE status = 'Published' ORDER BY created_at DESC LIMIT 5\");\n    \n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            branch: employee.branch,\n            email: employee.email,\n        },\n        announcements: announcementsResult.rows.map(a => ({\n            id: a.id,\n            title: a.title,\n            content: a.content,\n            date: format(new Date(a.created_at), 'MMMM d, yyyy')\n        }))\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    // This is a placeholder as there is no attendance table yet.\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const result = await query(\n        'SELECT id, leave_type, start_date, end_date, status FROM leave_requests WHERE employee_id = $1 ORDER BY start_date DESC',\n        [employeeId]\n    );\n\n    return result.rows.map(lr => ({\n        id: lr.id,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        status: lr.status,\n    }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    await query(\n        'INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason) VALUES ($1, $2, $3, $4, $5)',\n        [employeeId, leaveType, startDate, endDate, reason]\n    );\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    // This is a placeholder as there is no payslip table yet.\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    // This is a placeholder as there is no schedule table yet.\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", date_hired\n        FROM accounts\n        WHERE status = 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        employeeName: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        submittedBy: 'Olivia Chen', // Placeholder\n        submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function approveEmployee(employeeId) {\n    await query(\"UPDATE accounts SET status = 'Active' WHERE id = $1\", [employeeId]);\n}\n\nexport async function rejectEmployee(employeeId) {\n    await query(\"DELETE FROM accounts WHERE id = $1\", [employeeId]);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const result = await query('SELECT first_name, last_name FROM accounts WHERE id = $1', [employeeId]);\n    const employee = result.rows[0];\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This is a placeholder as there is no reports table yet.\n    return null;\n}\n\nexport async function getHrPersonnel() {\n    const result = await query(`\n        SELECT id, first_name, last_name, \"position\", managed_branches\n        FROM accounts WHERE role = 'HR'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        managed_branches: a.managed_branches || []\n    }));\n}\n\nexport async function getBranches() {\n    const result = await query('SELECT id, name, coordinates FROM branches ORDER BY name');\n    return result.rows;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    try {\n        const result = await query(\n            'INSERT INTO branches (name, coordinates) VALUES ($1, $2) RETURNING *',\n            [branchName, coordinates]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A branch with this name already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deleteBranch(branchId) {\n    // Check if any HR personnel is assigned to this branch\n    const branchResult = await query('SELECT name FROM branches WHERE id = $1', [branchId]);\n    if (branchResult.rowCount === 0) return;\n    const branchName = branchResult.rows[0].name;\n\n    const hrResult = await query(\"SELECT 1 FROM accounts WHERE role = 'HR' AND $1 = ANY(managed_branches)\", [branchName]);\n    if (hrResult.rowCount > 0) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    await query('DELETE FROM branches WHERE id = $1', [branchId]);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const result = await query(\n        'UPDATE accounts SET managed_branches = $1 WHERE id = $2',\n        [branches, hrId]\n    );\n    return { success: result.rowCount > 0 };\n}\n\n\nexport async function updateEmployee(id, data) {\n    const { firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email } = data;\n    const result = await query(`\n        UPDATE accounts SET\n            first_name = $1, last_name = $2, middle_name = $3, gender = $4,\n            date_of_birth = $5, \"position\" = $6, department = $7, branch = $8,\n            date_hired = $9, email = $10\n        WHERE id = $11\n    `, [firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email, id]);\n    \n    return { success: result.rowCount > 0, message: result.rowCount > 0 ? 'Employee updated successfully.' : 'Employee not found.' };\n}\n\n\nexport async function getPositions() {\n    const result = await query('SELECT id, title, rate FROM positions ORDER BY title');\n    return result.rows;\n}\n\nexport async function createPosition(title, rate) {\n    try {\n        const result = await query(\n            'INSERT INTO positions (title, rate) VALUES ($1, $2) RETURNING *',\n            [title, rate]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A position with this title already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deletePosition(positionId) {\n    const positionResult = await query('SELECT title FROM positions WHERE id = $1', [positionId]);\n    if (positionResult.rowCount === 0) return;\n    const positionTitle = positionResult.rows[0].title;\n\n    const accountResult = await query(\"SELECT 1 FROM accounts WHERE position = $1\", [positionTitle]);\n    if (accountResult.rowCount > 0) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    await query('DELETE FROM positions WHERE id = $1', [positionId]);\n}\n\nexport async function getDepartmentsForBranch(branchName) {\n    // This assumes a separate 'departments' table or similar structure.\n    // For now, let's query distinct departments from accounts in that branch.\n    const result = await query(\n        'SELECT DISTINCT department FROM accounts WHERE branch = $1 AND department IS NOT NULL ORDER BY department',\n        [branchName]\n    );\n    return result.rows.map(r => r.department);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    // This is a simplification. A real app might have a departments_positions link table.\n    // Here we get all positions associated with employees in that department.\n    const result = await query(\n        'SELECT DISTINCT \"position\" FROM accounts WHERE department = $1 AND \"position\" IS NOT NULL ORDER BY \"position\"',\n        [departmentName]\n    );\n    return result.rows.map(r => r.position);\n}\n"],"names":[],"mappings":";;;;;;IA4FsB,iBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 580, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format } from 'date-fns';\n\nexport async function getHRDashboardData() {\n    const totalEmployeesResult = await query(\"SELECT COUNT(*) FROM accounts WHERE role = 'Employee'\");\n    const totalEmployees = totalEmployeesResult.rows[0].count || '0';\n\n    const pendingLeaveRequestsResult = await query(\"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\");\n    const pendingLeaveRequests = pendingLeaveRequestsResult.rows[0].count || '0';\n\n    // Mocking some stats as there's no table for them yet\n    const stats = [\n        { title: 'Total Employees', value: String(totalEmployees), change: '' },\n        { title: 'On Time Percentage', value: `0%`, change: '' }, // No attendance data yet\n        { title: 'Active Job Postings', value: '4', change: 'External API' },\n        { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n    ];\n\n    // No activity log table yet\n    return {\n        stats,\n        recentActivities: []\n    };\n}\n\n\nexport async function getPastAnnouncements() {\n    const result = await query(`\n        SELECT a.id, a.title, a.content, a.status, a.created_at, acc.first_name, acc.last_name\n        FROM announcements a\n        JOIN accounts acc ON a.posted_by = acc.id\n        ORDER BY a.created_at DESC\n    `);\n    return result.rows.map(a => ({\n        ...a,\n        postedBy: `${a.first_name} ${a.last_name}`,\n        date: format(new Date(a.created_at), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001'; // In a real app, this should come from session\n    await query(\n        'INSERT INTO announcements (title, content, status, posted_by_id) VALUES ($1, $2, $3, $4)',\n        [title, content, status, hrUserId]\n    );\n}\n\nexport async function deleteAnnouncement(id) {\n    await query('DELETE FROM announcements WHERE id = $1', [id]);\n}\n\nexport async function getDailyAttendanceData(date) {\n    // This is a placeholder as there is no attendance table yet.\n    return [];\n}\n\n\nexport async function getEmployees() {\n    const result = await query(`\n        SELECT id, first_name, last_name, position, branch, status\n        FROM accounts\n        WHERE role = 'Employee' AND status != 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const result = await query('SELECT * FROM accounts WHERE id = $1', [id]);\n    const employee = result.rows[0];\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const result = await query('DELETE FROM accounts WHERE id = $1', [id]);\n    return result.rowCount > 0;\n}\n\nexport async function getLeaveRequests() {\n    const result = await query(`\n        SELECT lr.id, lr.leave_type, lr.start_date, lr.end_date, lr.reason, lr.status,\n               a.id as \"employeeId\", a.first_name, a.last_name\n        FROM leave_requests lr\n        JOIN accounts a ON lr.employee_id = a.id\n        ORDER BY lr.created_at DESC\n    `);\n    return result.rows.map(lr => ({\n        id: lr.id,\n        employeeId: lr.employeeId,\n        employeeName: `${lr.first_name} ${lr.last_name}`,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        reason: lr.reason,\n        status: lr.status\n    }));\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    await query('UPDATE leave_requests SET status = $1 WHERE id = $2', [status, requestId]);\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", department, sss_number, philhealth_number, pagibig_number, tin\n        FROM accounts\n        WHERE role = 'Employee'\n    `);\n    \n    return result.rows.map(a => {\n        const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n        return {\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending', // No payslip table yet\n            benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n        };\n    });\n}\n\nexport async function getEmployeesForScheduling() {\n    const result = await query(`\n        SELECT id, first_name, last_name FROM accounts WHERE role = 'Employee' AND status = 'Active'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        shift: '9:00 - 17:00' // Default shift\n    }));\n}\n    // Fetch Employee Data from Database\nexport async function getEmployeeDashboardData(employeeid) {\n    const result = await query('SELECT id, first_name, last_name, \"position\", department, branch, email FROM accounts WHERE id = $1', [employeeid]);\n    const employee = result.rows[0];\n    \n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n\n    const announcementsResult = await query(\"SELECT title, content, created_at FROM announcements WHERE status = 'Published' ORDER BY created_at DESC LIMIT 5\");\n    \n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            branch: employee.branch,\n            email: employee.email,\n        },\n        announcements: announcementsResult.rows.map(a => ({\n            id: a.id,\n            title: a.title,\n            content: a.content,\n            date: format(new Date(a.created_at), 'MMMM d, yyyy')\n        }))\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    // This is a placeholder as there is no attendance table yet.\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const result = await query(\n        'SELECT id, leave_type, start_date, end_date, status FROM leave_requests WHERE employee_id = $1 ORDER BY start_date DESC',\n        [employeeId]\n    );\n\n    return result.rows.map(lr => ({\n        id: lr.id,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        status: lr.status,\n    }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    await query(\n        'INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason) VALUES ($1, $2, $3, $4, $5)',\n        [employeeId, leaveType, startDate, endDate, reason]\n    );\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    // This is a placeholder as there is no payslip table yet.\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    // This is a placeholder as there is no schedule table yet.\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", date_hired\n        FROM accounts\n        WHERE status = 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        employeeName: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        submittedBy: 'Olivia Chen', // Placeholder\n        submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function approveEmployee(employeeId) {\n    await query(\"UPDATE accounts SET status = 'Active' WHERE id = $1\", [employeeId]);\n}\n\nexport async function rejectEmployee(employeeId) {\n    await query(\"DELETE FROM accounts WHERE id = $1\", [employeeId]);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const result = await query('SELECT first_name, last_name FROM accounts WHERE id = $1', [employeeId]);\n    const employee = result.rows[0];\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This is a placeholder as there is no reports table yet.\n    return null;\n}\n\nexport async function getHrPersonnel() {\n    const result = await query(`\n        SELECT id, first_name, last_name, \"position\", managed_branches\n        FROM accounts WHERE role = 'HR'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        managed_branches: a.managed_branches || []\n    }));\n}\n\nexport async function getBranches() {\n    const result = await query('SELECT id, name, coordinates FROM branches ORDER BY name');\n    return result.rows;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    try {\n        const result = await query(\n            'INSERT INTO branches (name, coordinates) VALUES ($1, $2) RETURNING *',\n            [branchName, coordinates]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A branch with this name already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deleteBranch(branchId) {\n    // Check if any HR personnel is assigned to this branch\n    const branchResult = await query('SELECT name FROM branches WHERE id = $1', [branchId]);\n    if (branchResult.rowCount === 0) return;\n    const branchName = branchResult.rows[0].name;\n\n    const hrResult = await query(\"SELECT 1 FROM accounts WHERE role = 'HR' AND $1 = ANY(managed_branches)\", [branchName]);\n    if (hrResult.rowCount > 0) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    await query('DELETE FROM branches WHERE id = $1', [branchId]);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const result = await query(\n        'UPDATE accounts SET managed_branches = $1 WHERE id = $2',\n        [branches, hrId]\n    );\n    return { success: result.rowCount > 0 };\n}\n\n\nexport async function updateEmployee(id, data) {\n    const { firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email } = data;\n    const result = await query(`\n        UPDATE accounts SET\n            first_name = $1, last_name = $2, middle_name = $3, gender = $4,\n            date_of_birth = $5, \"position\" = $6, department = $7, branch = $8,\n            date_hired = $9, email = $10\n        WHERE id = $11\n    `, [firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email, id]);\n    \n    return { success: result.rowCount > 0, message: result.rowCount > 0 ? 'Employee updated successfully.' : 'Employee not found.' };\n}\n\n\nexport async function getPositions() {\n    const result = await query('SELECT id, title, rate FROM positions ORDER BY title');\n    return result.rows;\n}\n\nexport async function createPosition(title, rate) {\n    try {\n        const result = await query(\n            'INSERT INTO positions (title, rate) VALUES ($1, $2) RETURNING *',\n            [title, rate]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A position with this title already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deletePosition(positionId) {\n    const positionResult = await query('SELECT title FROM positions WHERE id = $1', [positionId]);\n    if (positionResult.rowCount === 0) return;\n    const positionTitle = positionResult.rows[0].title;\n\n    const accountResult = await query(\"SELECT 1 FROM accounts WHERE position = $1\", [positionTitle]);\n    if (accountResult.rowCount > 0) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    await query('DELETE FROM positions WHERE id = $1', [positionId]);\n}\n\nexport async function getDepartmentsForBranch(branchName) {\n    // This assumes a separate 'departments' table or similar structure.\n    // For now, let's query distinct departments from accounts in that branch.\n    const result = await query(\n        'SELECT DISTINCT department FROM accounts WHERE branch = $1 AND department IS NOT NULL ORDER BY department',\n        [branchName]\n    );\n    return result.rows.map(r => r.department);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    // This is a simplification. A real app might have a departments_positions link table.\n    // Here we get all positions associated with employees in that department.\n    const result = await query(\n        'SELECT DISTINCT \"position\" FROM accounts WHERE department = $1 AND \"position\" IS NOT NULL ORDER BY \"position\"',\n        [departmentName]\n    );\n    return result.rows.map(r => r.position);\n}\n"],"names":[],"mappings":";;;;;;IA8QsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format } from 'date-fns';\n\nexport async function getHRDashboardData() {\n    const totalEmployeesResult = await query(\"SELECT COUNT(*) FROM accounts WHERE role = 'Employee'\");\n    const totalEmployees = totalEmployeesResult.rows[0].count || '0';\n\n    const pendingLeaveRequestsResult = await query(\"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\");\n    const pendingLeaveRequests = pendingLeaveRequestsResult.rows[0].count || '0';\n\n    // Mocking some stats as there's no table for them yet\n    const stats = [\n        { title: 'Total Employees', value: String(totalEmployees), change: '' },\n        { title: 'On Time Percentage', value: `0%`, change: '' }, // No attendance data yet\n        { title: 'Active Job Postings', value: '4', change: 'External API' },\n        { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n    ];\n\n    // No activity log table yet\n    return {\n        stats,\n        recentActivities: []\n    };\n}\n\n\nexport async function getPastAnnouncements() {\n    const result = await query(`\n        SELECT a.id, a.title, a.content, a.status, a.created_at, acc.first_name, acc.last_name\n        FROM announcements a\n        JOIN accounts acc ON a.posted_by = acc.id\n        ORDER BY a.created_at DESC\n    `);\n    return result.rows.map(a => ({\n        ...a,\n        postedBy: `${a.first_name} ${a.last_name}`,\n        date: format(new Date(a.created_at), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001'; // In a real app, this should come from session\n    await query(\n        'INSERT INTO announcements (title, content, status, posted_by_id) VALUES ($1, $2, $3, $4)',\n        [title, content, status, hrUserId]\n    );\n}\n\nexport async function deleteAnnouncement(id) {\n    await query('DELETE FROM announcements WHERE id = $1', [id]);\n}\n\nexport async function getDailyAttendanceData(date) {\n    // This is a placeholder as there is no attendance table yet.\n    return [];\n}\n\n\nexport async function getEmployees() {\n    const result = await query(`\n        SELECT id, first_name, last_name, position, branch, status\n        FROM accounts\n        WHERE role = 'Employee' AND status != 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const result = await query('SELECT * FROM accounts WHERE id = $1', [id]);\n    const employee = result.rows[0];\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const result = await query('DELETE FROM accounts WHERE id = $1', [id]);\n    return result.rowCount > 0;\n}\n\nexport async function getLeaveRequests() {\n    const result = await query(`\n        SELECT lr.id, lr.leave_type, lr.start_date, lr.end_date, lr.reason, lr.status,\n               a.id as \"employeeId\", a.first_name, a.last_name\n        FROM leave_requests lr\n        JOIN accounts a ON lr.employee_id = a.id\n        ORDER BY lr.created_at DESC\n    `);\n    return result.rows.map(lr => ({\n        id: lr.id,\n        employeeId: lr.employeeId,\n        employeeName: `${lr.first_name} ${lr.last_name}`,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        reason: lr.reason,\n        status: lr.status\n    }));\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    await query('UPDATE leave_requests SET status = $1 WHERE id = $2', [status, requestId]);\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", department, sss_number, philhealth_number, pagibig_number, tin\n        FROM accounts\n        WHERE role = 'Employee'\n    `);\n    \n    return result.rows.map(a => {\n        const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n        return {\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending', // No payslip table yet\n            benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n        };\n    });\n}\n\nexport async function getEmployeesForScheduling() {\n    const result = await query(`\n        SELECT id, first_name, last_name FROM accounts WHERE role = 'Employee' AND status = 'Active'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        shift: '9:00 - 17:00' // Default shift\n    }));\n}\n    // Fetch Employee Data from Database\nexport async function getEmployeeDashboardData(employeeid) {\n    const result = await query('SELECT id, first_name, last_name, \"position\", department, branch, email FROM accounts WHERE id = $1', [employeeid]);\n    const employee = result.rows[0];\n    \n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n\n    const announcementsResult = await query(\"SELECT title, content, created_at FROM announcements WHERE status = 'Published' ORDER BY created_at DESC LIMIT 5\");\n    \n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            branch: employee.branch,\n            email: employee.email,\n        },\n        announcements: announcementsResult.rows.map(a => ({\n            id: a.id,\n            title: a.title,\n            content: a.content,\n            date: format(new Date(a.created_at), 'MMMM d, yyyy')\n        }))\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    // This is a placeholder as there is no attendance table yet.\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const result = await query(\n        'SELECT id, leave_type, start_date, end_date, status FROM leave_requests WHERE employee_id = $1 ORDER BY start_date DESC',\n        [employeeId]\n    );\n\n    return result.rows.map(lr => ({\n        id: lr.id,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        status: lr.status,\n    }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    await query(\n        'INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason) VALUES ($1, $2, $3, $4, $5)',\n        [employeeId, leaveType, startDate, endDate, reason]\n    );\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    // This is a placeholder as there is no payslip table yet.\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    // This is a placeholder as there is no schedule table yet.\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", date_hired\n        FROM accounts\n        WHERE status = 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        employeeName: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        submittedBy: 'Olivia Chen', // Placeholder\n        submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function approveEmployee(employeeId) {\n    await query(\"UPDATE accounts SET status = 'Active' WHERE id = $1\", [employeeId]);\n}\n\nexport async function rejectEmployee(employeeId) {\n    await query(\"DELETE FROM accounts WHERE id = $1\", [employeeId]);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const result = await query('SELECT first_name, last_name FROM accounts WHERE id = $1', [employeeId]);\n    const employee = result.rows[0];\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This is a placeholder as there is no reports table yet.\n    return null;\n}\n\nexport async function getHrPersonnel() {\n    const result = await query(`\n        SELECT id, first_name, last_name, \"position\", managed_branches\n        FROM accounts WHERE role = 'HR'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        managed_branches: a.managed_branches || []\n    }));\n}\n\nexport async function getBranches() {\n    const result = await query('SELECT id, name, coordinates FROM branches ORDER BY name');\n    return result.rows;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    try {\n        const result = await query(\n            'INSERT INTO branches (name, coordinates) VALUES ($1, $2) RETURNING *',\n            [branchName, coordinates]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A branch with this name already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deleteBranch(branchId) {\n    // Check if any HR personnel is assigned to this branch\n    const branchResult = await query('SELECT name FROM branches WHERE id = $1', [branchId]);\n    if (branchResult.rowCount === 0) return;\n    const branchName = branchResult.rows[0].name;\n\n    const hrResult = await query(\"SELECT 1 FROM accounts WHERE role = 'HR' AND $1 = ANY(managed_branches)\", [branchName]);\n    if (hrResult.rowCount > 0) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    await query('DELETE FROM branches WHERE id = $1', [branchId]);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const result = await query(\n        'UPDATE accounts SET managed_branches = $1 WHERE id = $2',\n        [branches, hrId]\n    );\n    return { success: result.rowCount > 0 };\n}\n\n\nexport async function updateEmployee(id, data) {\n    const { firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email } = data;\n    const result = await query(`\n        UPDATE accounts SET\n            first_name = $1, last_name = $2, middle_name = $3, gender = $4,\n            date_of_birth = $5, \"position\" = $6, department = $7, branch = $8,\n            date_hired = $9, email = $10\n        WHERE id = $11\n    `, [firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email, id]);\n    \n    return { success: result.rowCount > 0, message: result.rowCount > 0 ? 'Employee updated successfully.' : 'Employee not found.' };\n}\n\n\nexport async function getPositions() {\n    const result = await query('SELECT id, title, rate FROM positions ORDER BY title');\n    return result.rows;\n}\n\nexport async function createPosition(title, rate) {\n    try {\n        const result = await query(\n            'INSERT INTO positions (title, rate) VALUES ($1, $2) RETURNING *',\n            [title, rate]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A position with this title already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deletePosition(positionId) {\n    const positionResult = await query('SELECT title FROM positions WHERE id = $1', [positionId]);\n    if (positionResult.rowCount === 0) return;\n    const positionTitle = positionResult.rows[0].title;\n\n    const accountResult = await query(\"SELECT 1 FROM accounts WHERE position = $1\", [positionTitle]);\n    if (accountResult.rowCount > 0) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    await query('DELETE FROM positions WHERE id = $1', [positionId]);\n}\n\nexport async function getDepartmentsForBranch(branchName) {\n    // This assumes a separate 'departments' table or similar structure.\n    // For now, let's query distinct departments from accounts in that branch.\n    const result = await query(\n        'SELECT DISTINCT department FROM accounts WHERE branch = $1 AND department IS NOT NULL ORDER BY department',\n        [branchName]\n    );\n    return result.rows.map(r => r.department);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    // This is a simplification. A real app might have a departments_positions link table.\n    // Here we get all positions associated with employees in that department.\n    const result = await query(\n        'SELECT DISTINCT \"position\" FROM accounts WHERE department = $1 AND \"position\" IS NOT NULL ORDER BY \"position\"',\n        [departmentName]\n    );\n    return result.rows.map(r => r.position);\n}\n"],"names":[],"mappings":";;;;;;IAuWsB,0BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 612, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format } from 'date-fns';\n\nexport async function getHRDashboardData() {\n    const totalEmployeesResult = await query(\"SELECT COUNT(*) FROM accounts WHERE role = 'Employee'\");\n    const totalEmployees = totalEmployeesResult.rows[0].count || '0';\n\n    const pendingLeaveRequestsResult = await query(\"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\");\n    const pendingLeaveRequests = pendingLeaveRequestsResult.rows[0].count || '0';\n\n    // Mocking some stats as there's no table for them yet\n    const stats = [\n        { title: 'Total Employees', value: String(totalEmployees), change: '' },\n        { title: 'On Time Percentage', value: `0%`, change: '' }, // No attendance data yet\n        { title: 'Active Job Postings', value: '4', change: 'External API' },\n        { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n    ];\n\n    // No activity log table yet\n    return {\n        stats,\n        recentActivities: []\n    };\n}\n\n\nexport async function getPastAnnouncements() {\n    const result = await query(`\n        SELECT a.id, a.title, a.content, a.status, a.created_at, acc.first_name, acc.last_name\n        FROM announcements a\n        JOIN accounts acc ON a.posted_by = acc.id\n        ORDER BY a.created_at DESC\n    `);\n    return result.rows.map(a => ({\n        ...a,\n        postedBy: `${a.first_name} ${a.last_name}`,\n        date: format(new Date(a.created_at), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001'; // In a real app, this should come from session\n    await query(\n        'INSERT INTO announcements (title, content, status, posted_by_id) VALUES ($1, $2, $3, $4)',\n        [title, content, status, hrUserId]\n    );\n}\n\nexport async function deleteAnnouncement(id) {\n    await query('DELETE FROM announcements WHERE id = $1', [id]);\n}\n\nexport async function getDailyAttendanceData(date) {\n    // This is a placeholder as there is no attendance table yet.\n    return [];\n}\n\n\nexport async function getEmployees() {\n    const result = await query(`\n        SELECT id, first_name, last_name, position, branch, status\n        FROM accounts\n        WHERE role = 'Employee' AND status != 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const result = await query('SELECT * FROM accounts WHERE id = $1', [id]);\n    const employee = result.rows[0];\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const result = await query('DELETE FROM accounts WHERE id = $1', [id]);\n    return result.rowCount > 0;\n}\n\nexport async function getLeaveRequests() {\n    const result = await query(`\n        SELECT lr.id, lr.leave_type, lr.start_date, lr.end_date, lr.reason, lr.status,\n               a.id as \"employeeId\", a.first_name, a.last_name\n        FROM leave_requests lr\n        JOIN accounts a ON lr.employee_id = a.id\n        ORDER BY lr.created_at DESC\n    `);\n    return result.rows.map(lr => ({\n        id: lr.id,\n        employeeId: lr.employeeId,\n        employeeName: `${lr.first_name} ${lr.last_name}`,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        reason: lr.reason,\n        status: lr.status\n    }));\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    await query('UPDATE leave_requests SET status = $1 WHERE id = $2', [status, requestId]);\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", department, sss_number, philhealth_number, pagibig_number, tin\n        FROM accounts\n        WHERE role = 'Employee'\n    `);\n    \n    return result.rows.map(a => {\n        const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n        return {\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending', // No payslip table yet\n            benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n        };\n    });\n}\n\nexport async function getEmployeesForScheduling() {\n    const result = await query(`\n        SELECT id, first_name, last_name FROM accounts WHERE role = 'Employee' AND status = 'Active'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        shift: '9:00 - 17:00' // Default shift\n    }));\n}\n    // Fetch Employee Data from Database\nexport async function getEmployeeDashboardData(employeeid) {\n    const result = await query('SELECT id, first_name, last_name, \"position\", department, branch, email FROM accounts WHERE id = $1', [employeeid]);\n    const employee = result.rows[0];\n    \n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n\n    const announcementsResult = await query(\"SELECT title, content, created_at FROM announcements WHERE status = 'Published' ORDER BY created_at DESC LIMIT 5\");\n    \n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            branch: employee.branch,\n            email: employee.email,\n        },\n        announcements: announcementsResult.rows.map(a => ({\n            id: a.id,\n            title: a.title,\n            content: a.content,\n            date: format(new Date(a.created_at), 'MMMM d, yyyy')\n        }))\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    // This is a placeholder as there is no attendance table yet.\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const result = await query(\n        'SELECT id, leave_type, start_date, end_date, status FROM leave_requests WHERE employee_id = $1 ORDER BY start_date DESC',\n        [employeeId]\n    );\n\n    return result.rows.map(lr => ({\n        id: lr.id,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        status: lr.status,\n    }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    await query(\n        'INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason) VALUES ($1, $2, $3, $4, $5)',\n        [employeeId, leaveType, startDate, endDate, reason]\n    );\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    // This is a placeholder as there is no payslip table yet.\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    // This is a placeholder as there is no schedule table yet.\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", date_hired\n        FROM accounts\n        WHERE status = 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        employeeName: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        submittedBy: 'Olivia Chen', // Placeholder\n        submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function approveEmployee(employeeId) {\n    await query(\"UPDATE accounts SET status = 'Active' WHERE id = $1\", [employeeId]);\n}\n\nexport async function rejectEmployee(employeeId) {\n    await query(\"DELETE FROM accounts WHERE id = $1\", [employeeId]);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const result = await query('SELECT first_name, last_name FROM accounts WHERE id = $1', [employeeId]);\n    const employee = result.rows[0];\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This is a placeholder as there is no reports table yet.\n    return null;\n}\n\nexport async function getHrPersonnel() {\n    const result = await query(`\n        SELECT id, first_name, last_name, \"position\", managed_branches\n        FROM accounts WHERE role = 'HR'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        managed_branches: a.managed_branches || []\n    }));\n}\n\nexport async function getBranches() {\n    const result = await query('SELECT id, name, coordinates FROM branches ORDER BY name');\n    return result.rows;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    try {\n        const result = await query(\n            'INSERT INTO branches (name, coordinates) VALUES ($1, $2) RETURNING *',\n            [branchName, coordinates]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A branch with this name already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deleteBranch(branchId) {\n    // Check if any HR personnel is assigned to this branch\n    const branchResult = await query('SELECT name FROM branches WHERE id = $1', [branchId]);\n    if (branchResult.rowCount === 0) return;\n    const branchName = branchResult.rows[0].name;\n\n    const hrResult = await query(\"SELECT 1 FROM accounts WHERE role = 'HR' AND $1 = ANY(managed_branches)\", [branchName]);\n    if (hrResult.rowCount > 0) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    await query('DELETE FROM branches WHERE id = $1', [branchId]);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const result = await query(\n        'UPDATE accounts SET managed_branches = $1 WHERE id = $2',\n        [branches, hrId]\n    );\n    return { success: result.rowCount > 0 };\n}\n\n\nexport async function updateEmployee(id, data) {\n    const { firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email } = data;\n    const result = await query(`\n        UPDATE accounts SET\n            first_name = $1, last_name = $2, middle_name = $3, gender = $4,\n            date_of_birth = $5, \"position\" = $6, department = $7, branch = $8,\n            date_hired = $9, email = $10\n        WHERE id = $11\n    `, [firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email, id]);\n    \n    return { success: result.rowCount > 0, message: result.rowCount > 0 ? 'Employee updated successfully.' : 'Employee not found.' };\n}\n\n\nexport async function getPositions() {\n    const result = await query('SELECT id, title, rate FROM positions ORDER BY title');\n    return result.rows;\n}\n\nexport async function createPosition(title, rate) {\n    try {\n        const result = await query(\n            'INSERT INTO positions (title, rate) VALUES ($1, $2) RETURNING *',\n            [title, rate]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A position with this title already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deletePosition(positionId) {\n    const positionResult = await query('SELECT title FROM positions WHERE id = $1', [positionId]);\n    if (positionResult.rowCount === 0) return;\n    const positionTitle = positionResult.rows[0].title;\n\n    const accountResult = await query(\"SELECT 1 FROM accounts WHERE position = $1\", [positionTitle]);\n    if (accountResult.rowCount > 0) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    await query('DELETE FROM positions WHERE id = $1', [positionId]);\n}\n\nexport async function getDepartmentsForBranch(branchName) {\n    // This assumes a separate 'departments' table or similar structure.\n    // For now, let's query distinct departments from accounts in that branch.\n    const result = await query(\n        'SELECT DISTINCT department FROM accounts WHERE branch = $1 AND department IS NOT NULL ORDER BY department',\n        [branchName]\n    );\n    return result.rows.map(r => r.department);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    // This is a simplification. A real app might have a departments_positions link table.\n    // Here we get all positions associated with employees in that department.\n    const result = await query(\n        'SELECT DISTINCT \"position\" FROM accounts WHERE department = $1 AND \"position\" IS NOT NULL ORDER BY \"position\"',\n        [departmentName]\n    );\n    return result.rows.map(r => r.position);\n}\n"],"names":[],"mappings":";;;;;;IAiXsB,4BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/components/ui/alert-dialog.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the AlertDialog component and its parts.\n * It is a modal dialog that interrupts the user with important content and\n * requires a response. It is built on top of the Radix UI Alert Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/alert-dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\n/**\n * The root component for an alert dialog.\n */\nconst AlertDialog = AlertDialogPrimitive.Root\n\n/**\n * The trigger that opens the alert dialog.\n */\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the alert dialog.\n */\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\n/**\n * The header of the alert dialog, containing the title and description.\n */\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\n/**\n * The footer of the alert dialog, containing action buttons.\n */\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\n/**\n * The title of the alert dialog.\n */\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\n/**\n * The description of the alert dialog.\n */\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\n/**\n * The action button that typically performs the primary action of the dialog.\n */\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\n/**\n * The cancel button that closes the dialog.\n */\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 807, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Downloads/Capstone%20v2/src/app/hr/employee-data/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Employee Data Management page for the HR portal.\n * It provides a comprehensive interface for HR personnel to view, search, filter,\n * and manage all employee records in the company.\n */\n'use client';\nimport * as React from 'react';\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Search, PlusCircle, FileText, MoreHorizontal } from \"lucide-react\";\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport Link from \"next/link\";\nimport { getEmployees, deleteEmployee, getBranches, getDepartmentsForBranch, getPositionsForDepartment } from \"@/lib/data\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\n/**\n * Renders the HR employee data management page.\n * Allows searching, filtering, and managing employee records.\n * @returns {JSX.Element} The employee data management page component.\n */\nexport default function EmployeeDataPage() {\n  const [employees, setEmployees] = React.useState([]);\n  const { toast } = useToast();\n  const [branches, setBranches] = React.useState([]);\n  const [departments, setDepartments] = React.useState([]);\n  const [positions, setPositions] = React.useState([]);\n  const [selectedBranch, setSelectedBranch] = React.useState('');\n  const [selectedDepartment, setSelectedDepartment] = React.useState('');\n\n  const fetchEmployees = React.useCallback(async () => {\n      const data = await getEmployees();\n      setEmployees(data);\n  }, []);\n\n  React.useEffect(() => {\n    fetchEmployees();\n    const fetchFilterData = async () => {\n      const branchesData = await getBranches();\n      setBranches(branchesData);\n    };\n    fetchFilterData();\n  }, [fetchEmployees]);\n  \n  React.useEffect(() => {\n    const fetchDepartments = async () => {\n      if (selectedBranch) {\n        const depts = await getDepartmentsForBranch(selectedBranch);\n        setDepartments(depts);\n        setSelectedDepartment('');\n        setPositions([]);\n      } else {\n        setDepartments([]);\n        setPositions([]);\n      }\n    };\n    fetchDepartments();\n  }, [selectedBranch]);\n\n  React.useEffect(() => {\n    const fetchPositions = async () => {\n      if (selectedDepartment) {\n        const pos = await getPositionsForDepartment(selectedDepartment);\n        setPositions(pos);\n      } else {\n        setPositions([]);\n      }\n    };\n    fetchPositions();\n  }, [selectedDepartment]);\n\n\n  const handleGenerateReport = () => {\n    const doc = new jsPDF();\n    \n    doc.setFontSize(20);\n    doc.text(\"Employee Report\", 14, 22);\n    doc.setFontSize(10);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);\n\n    autoTable(doc, {\n      startY: 40,\n      head: [['Employee ID', 'Name', 'Position', 'Branch', 'Status']],\n      body: employees.map(emp => [\n        emp.id,\n        emp.name,\n        emp.position,\n        emp.branch,\n        emp.status,\n      ]),\n      theme: 'striped',\n      headStyles: { fillColor: [41, 128, 185] },\n    });\n\n    doc.save('Employee-Report.pdf');\n  };\n  \n  const handleDelete = async (id) => {\n    const result = await deleteEmployee(id);\n    if (result) {\n        toast({\n            title: \"Success\",\n            description: \"Employee has been deleted.\",\n        });\n        fetchEmployees();\n    } else {\n        toast({\n            variant: \"destructive\",\n            title: \"Error\",\n            description: \"Failed to delete employee.\",\n        });\n    }\n  };\n\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header and Actions */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n            <h1 className=\"text-3xl font-bold font-headline\">Employee Data Management</h1>\n            <p className=\"text-muted-foreground\">Add, search, and manage employee profiles.</p>\n        </div>\n        <div className=\"flex gap-2\">\n            {/* Buttons for primary actions like uploading bulk data or adding a single new employee */}\n            <Button variant=\"outline\" onClick={handleGenerateReport}><FileText /> Generate Employee Report</Button>\n            <Button asChild>\n                <Link href=\"/hr/employee-data/new\">\n                    <PlusCircle /> Add Employee\n                </Link>\n            </Button>\n        </div>\n      </div>\n      \n      {/* Employee Table and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Find Employees</CardTitle>\n          <CardDescription>Use the filters below to search for specific employees.</CardDescription>\n          {/* A set of controls to filter the employee list */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4 pt-4\">\n            <Input placeholder=\"Search by name or ID...\" className=\"lg:col-span-2\"/>\n            <Select value={selectedBranch} onValueChange={setSelectedBranch}>\n              <SelectTrigger><SelectValue placeholder=\"Select Branch\" /></SelectTrigger>\n              <SelectContent>\n                {branches.map(b => <SelectItem key={b.id} value={b.name}>{b.name}</SelectItem>)}\n              </SelectContent>\n            </Select>\n            <Select value={selectedDepartment} onValueChange={setSelectedDepartment} disabled={!selectedBranch || departments.length === 0}>\n              <SelectTrigger><SelectValue placeholder=\"Select Department\" /></SelectTrigger>\n              <SelectContent>\n                {departments.map(d => <SelectItem key={d} value={d}>{d}</SelectItem>)}\n              </SelectContent>\n            </Select>\n            <Select disabled={!selectedDepartment || positions.length === 0}>\n              <SelectTrigger><SelectValue placeholder=\"Select Position\" /></SelectTrigger>\n              <SelectContent>\n                 {positions.map(p => <SelectItem key={p} value={p}>{p}</SelectItem>)}\n              </SelectContent>\n            </Select>\n            <Button className=\"w-full\"><Search />Search</Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {employees.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Employee ID</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Position</TableHead>\n                  <TableHead>Branch</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {employees.map((emp) => (\n                  <TableRow key={emp.id}>\n                    <TableCell className=\"font-mono text-xs\">{emp.id}</TableCell>\n                    <TableCell className=\"font-medium\">{emp.name}</TableCell>\n                    <TableCell>{emp.position}</TableCell>\n                    <TableCell>{emp.branch}</TableCell>\n                    <TableCell>\n                      {/* Badge color reflects the employee's status */}\n                      <Badge variant={emp.status === 'Active' ? 'default' : emp.status === 'On Leave' ? 'secondary' : 'destructive'} className={emp.status === 'Active' ? 'bg-green-500' : ''}>\n                        {emp.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {/* Dropdown menu for individual employee actions */}\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <span className=\"sr-only\">Open menu</span>\n                            <MoreHorizontal />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem asChild><Link href={`/hr/employee-data/${emp.id}`}>View Profile</Link></DropdownMenuItem>\n                          <DropdownMenuItem asChild><Link href={`/hr/employee-data/${emp.id}/edit`}>Edit</Link></DropdownMenuItem>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                                <DropdownMenuItem onSelect={(e) => e.preventDefault()} className=\"text-red-600\">Delete Employee Data</DropdownMenuItem>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                                <AlertDialogHeader>\n                                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                        This action cannot be undone. This will permanently delete the employee's data from the servers.\n                                    </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction onClick={() => handleDelete(emp.id)}>Delete</AlertDialogAction>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <p className=\"text-muted-foreground text-center\">No employees found.</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AAED;AACA;AACA;AACA;AAOA;AAQA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAvCA;;;;;;;;;;;;;;;;AAwDe,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE,EAAE;IACnD,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE,EAAE;IACjD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE,EAAE;IACvD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE,EAAE;IACnD,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAC3D,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAc,AAAD,EAAE;IAEnE,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,cAAiB,AAAD;wDAAE;YACrC,MAAM,OAAO,MAAM,CAAA,GAAA,qJAAA,CAAA,eAAY,AAAD;YAC9B,aAAa;QACjB;uDAAG,EAAE;IAEL,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;sCAAE;YACd;YACA,MAAM;8DAAkB;oBACtB,MAAM,eAAe,MAAM,CAAA,GAAA,qJAAA,CAAA,cAAW,AAAD;oBACrC,YAAY;gBACd;;YACA;QACF;qCAAG;QAAC;KAAe;IAEnB,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;sCAAE;YACd,MAAM;+DAAmB;oBACvB,IAAI,gBAAgB;wBAClB,MAAM,QAAQ,MAAM,CAAA,GAAA,qJAAA,CAAA,0BAAuB,AAAD,EAAE;wBAC5C,eAAe;wBACf,sBAAsB;wBACtB,aAAa,EAAE;oBACjB,OAAO;wBACL,eAAe,EAAE;wBACjB,aAAa,EAAE;oBACjB;gBACF;;YACA;QACF;qCAAG;QAAC;KAAe;IAEnB,CAAA,GAAA,6JAAA,CAAA,YAAe,AAAD;sCAAE;YACd,MAAM;6DAAiB;oBACrB,IAAI,oBAAoB;wBACtB,MAAM,MAAM,MAAM,CAAA,GAAA,qJAAA,CAAA,4BAAyB,AAAD,EAAE;wBAC5C,aAAa;oBACf,OAAO;wBACL,aAAa,EAAE;oBACjB;gBACF;;YACA;QACF;qCAAG;QAAC;KAAmB;IAGvB,MAAM,uBAAuB;QAC3B,MAAM,MAAM,IAAI,sJAAA,CAAA,UAAK;QAErB,IAAI,WAAW,CAAC;QAChB,IAAI,IAAI,CAAC,mBAAmB,IAAI;QAChC,IAAI,WAAW,CAAC;QAChB,IAAI,IAAI,CAAC,CAAC,cAAc,EAAE,IAAI,OAAO,kBAAkB,IAAI,EAAE,IAAI;QAEjE,CAAA,GAAA,6KAAA,CAAA,UAAS,AAAD,EAAE,KAAK;YACb,QAAQ;YACR,MAAM;gBAAC;oBAAC;oBAAe;oBAAQ;oBAAY;oBAAU;iBAAS;aAAC;YAC/D,MAAM,UAAU,GAAG,CAAC,CAAA,MAAO;oBACzB,IAAI,EAAE;oBACN,IAAI,IAAI;oBACR,IAAI,QAAQ;oBACZ,IAAI,MAAM;oBACV,IAAI,MAAM;iBACX;YACD,OAAO;YACP,YAAY;gBAAE,WAAW;oBAAC;oBAAI;oBAAK;iBAAI;YAAC;QAC1C;QAEA,IAAI,IAAI,CAAC;IACX;IAEA,MAAM,eAAe,OAAO;QAC1B,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,iBAAc,AAAD,EAAE;QACpC,IAAI,QAAQ;YACR,MAAM;gBACF,OAAO;gBACP,aAAa;YACjB;YACA;QACJ,OAAO;YACH,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,aAAa;YACjB;QACJ;IACF;IAGA,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;;0CACG,6LAAC;gCAAG,WAAU;0CAAmC;;;;;;0CACjD,6LAAC;gCAAE,WAAU;0CAAwB;;;;;;;;;;;;kCAEzC,6LAAC;wBAAI,WAAU;;0CAEX,6LAAC,qIAAA,CAAA,SAAM;gCAAC,SAAQ;gCAAU,SAAS;;kDAAsB,6LAAC,iNAAA,CAAA,WAAQ;;;;;oCAAG;;;;;;;0CACrE,6LAAC,qIAAA,CAAA,SAAM;gCAAC,OAAO;0CACX,cAAA,6LAAC,+JAAA,CAAA,UAAI;oCAAC,MAAK;;sDACP,6LAAC,qNAAA,CAAA,aAAU;;;;;wCAAG;;;;;;;;;;;;;;;;;;;;;;;;0BAO5B,6LAAC,mIAAA,CAAA,OAAI;;kCACH,6LAAC,mIAAA,CAAA,aAAU;;0CACT,6LAAC,mIAAA,CAAA,YAAS;0CAAC;;;;;;0CACX,6LAAC,mIAAA,CAAA,kBAAe;0CAAC;;;;;;0CAEjB,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,oIAAA,CAAA,QAAK;wCAAC,aAAY;wCAA0B,WAAU;;;;;;kDACvD,6LAAC,qIAAA,CAAA,SAAM;wCAAC,OAAO;wCAAgB,eAAe;;0DAC5C,6LAAC,qIAAA,CAAA,gBAAa;0DAAC,cAAA,6LAAC,qIAAA,CAAA,cAAW;oDAAC,aAAY;;;;;;;;;;;0DACxC,6LAAC,qIAAA,CAAA,gBAAa;0DACX,SAAS,GAAG,CAAC,CAAA,kBAAK,6LAAC,qIAAA,CAAA,aAAU;wDAAY,OAAO,EAAE,IAAI;kEAAG,EAAE,IAAI;uDAA5B,EAAE,EAAE;;;;;;;;;;;;;;;;kDAG5C,6LAAC,qIAAA,CAAA,SAAM;wCAAC,OAAO;wCAAoB,eAAe;wCAAuB,UAAU,CAAC,kBAAkB,YAAY,MAAM,KAAK;;0DAC3H,6LAAC,qIAAA,CAAA,gBAAa;0DAAC,cAAA,6LAAC,qIAAA,CAAA,cAAW;oDAAC,aAAY;;;;;;;;;;;0DACxC,6LAAC,qIAAA,CAAA,gBAAa;0DACX,YAAY,GAAG,CAAC,CAAA,kBAAK,6LAAC,qIAAA,CAAA,aAAU;wDAAS,OAAO;kEAAI;uDAAd;;;;;;;;;;;;;;;;kDAG3C,6LAAC,qIAAA,CAAA,SAAM;wCAAC,UAAU,CAAC,sBAAsB,UAAU,MAAM,KAAK;;0DAC5D,6LAAC,qIAAA,CAAA,gBAAa;0DAAC,cAAA,6LAAC,qIAAA,CAAA,cAAW;oDAAC,aAAY;;;;;;;;;;;0DACxC,6LAAC,qIAAA,CAAA,gBAAa;0DACV,UAAU,GAAG,CAAC,CAAA,kBAAK,6LAAC,qIAAA,CAAA,aAAU;wDAAS,OAAO;kEAAI;uDAAd;;;;;;;;;;;;;;;;kDAG1C,6LAAC,qIAAA,CAAA,SAAM;wCAAC,WAAU;;0DAAS,6LAAC,yMAAA,CAAA,SAAM;;;;;4CAAG;;;;;;;;;;;;;;;;;;;kCAGzC,6LAAC,mIAAA,CAAA,cAAW;kCACT,UAAU,MAAM,GAAG,kBAClB,6LAAC,oIAAA,CAAA,QAAK;;8CACJ,6LAAC,oIAAA,CAAA,cAAW;8CACV,cAAA,6LAAC,oIAAA,CAAA,WAAQ;;0DACP,6LAAC,oIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,6LAAC,oIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,6LAAC,oIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,6LAAC,oIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,6LAAC,oIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,6LAAC,oIAAA,CAAA,YAAS;gDAAC,WAAU;0DAAa;;;;;;;;;;;;;;;;;8CAGtC,6LAAC,oIAAA,CAAA,YAAS;8CACP,UAAU,GAAG,CAAC,CAAC,oBACd,6LAAC,oIAAA,CAAA,WAAQ;;8DACP,6LAAC,oIAAA,CAAA,YAAS;oDAAC,WAAU;8DAAqB,IAAI,EAAE;;;;;;8DAChD,6LAAC,oIAAA,CAAA,YAAS;oDAAC,WAAU;8DAAe,IAAI,IAAI;;;;;;8DAC5C,6LAAC,oIAAA,CAAA,YAAS;8DAAE,IAAI,QAAQ;;;;;;8DACxB,6LAAC,oIAAA,CAAA,YAAS;8DAAE,IAAI,MAAM;;;;;;8DACtB,6LAAC,oIAAA,CAAA,YAAS;8DAER,cAAA,6LAAC,oIAAA,CAAA,QAAK;wDAAC,SAAS,IAAI,MAAM,KAAK,WAAW,YAAY,IAAI,MAAM,KAAK,aAAa,cAAc;wDAAe,WAAW,IAAI,MAAM,KAAK,WAAW,iBAAiB;kEAClK,IAAI,MAAM;;;;;;;;;;;8DAGf,6LAAC,oIAAA,CAAA,YAAS;oDAAC,WAAU;8DAEnB,cAAA,6LAAC,+IAAA,CAAA,eAAY;;0EACX,6LAAC,+IAAA,CAAA,sBAAmB;gEAAC,OAAO;0EAC1B,cAAA,6LAAC,qIAAA,CAAA,SAAM;oEAAC,SAAQ;oEAAQ,WAAU;;sFAChC,6LAAC;4EAAK,WAAU;sFAAU;;;;;;sFAC1B,6LAAC,mNAAA,CAAA,iBAAc;;;;;;;;;;;;;;;;0EAGnB,6LAAC,+IAAA,CAAA,sBAAmB;gEAAC,OAAM;;kFACzB,6LAAC,+IAAA,CAAA,mBAAgB;wEAAC,OAAO;kFAAC,cAAA,6LAAC,+JAAA,CAAA,UAAI;4EAAC,MAAM,CAAC,kBAAkB,EAAE,IAAI,EAAE,EAAE;sFAAE;;;;;;;;;;;kFACrE,6LAAC,+IAAA,CAAA,mBAAgB;wEAAC,OAAO;kFAAC,cAAA,6LAAC,+JAAA,CAAA,UAAI;4EAAC,MAAM,CAAC,kBAAkB,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC;sFAAE;;;;;;;;;;;kFAC1E,6LAAC,8IAAA,CAAA,cAAW;;0FACV,6LAAC,8IAAA,CAAA,qBAAkB;gFAAC,OAAO;0FACvB,cAAA,6LAAC,+IAAA,CAAA,mBAAgB;oFAAC,UAAU,CAAC,IAAM,EAAE,cAAc;oFAAI,WAAU;8FAAe;;;;;;;;;;;0FAEpF,6LAAC,8IAAA,CAAA,qBAAkB;;kGACf,6LAAC,8IAAA,CAAA,oBAAiB;;0GACd,6LAAC,8IAAA,CAAA,mBAAgB;0GAAC;;;;;;0GAClB,6LAAC,8IAAA,CAAA,yBAAsB;0GAAC;;;;;;;;;;;;kGAI5B,6LAAC,8IAAA,CAAA,oBAAiB;;0GACd,6LAAC,8IAAA,CAAA,oBAAiB;0GAAC;;;;;;0GACnB,6LAAC,8IAAA,CAAA,oBAAiB;gGAAC,SAAS,IAAM,aAAa,IAAI,EAAE;0GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CApC3D,IAAI,EAAE;;;;;;;;;;;;;;;iDAgD3B,6LAAC;4BAAE,WAAU;sCAAoC;;;;;;;;;;;;;;;;;;;;;;;AAM7D;GAnNwB;;QAEJ,+HAAA,CAAA,WAAQ;;;KAFJ","debugId":null}}]
}