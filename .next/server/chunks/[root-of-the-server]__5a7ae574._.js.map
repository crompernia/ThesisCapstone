{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.js"],"sourcesContent":["/**\n * @fileoverview This file contains the database connection configuration and utilities.\n * It uses the 'pg' library to connect to a PostgreSQL database.\n * The connection details are sourced from environment variables for security.\n */\n\nimport { Pool } from 'pg';\n\n// Create a new connection pool.\n// A pool is better than a single client for web applications\n// because it can manage multiple connections at once.\nconst pool = new Pool({\n  user: process.env.DB_USER || 'postgres',\n  host: process.env.DB_HOST || 'localhost',\n  database: process.env.DB_NAME || 'employeedb',\n  password: process.env.DB_PASSWORD || 'password',\n  port: parseInt(process.env.DB_PORT || '5432', 10),\n});\n\n/**\n * Executes a query against the database.\n * @param {string} text - The SQL query string.\n * @param {any[]} [params] - Optional parameters for the SQL query.\n * @returns {Promise<any>} A promise that resolves with the query result.\n */\nexport const query = (text, params) => {\n    return pool.query(text, params);\n};\n\n\nexport async function initializeDb() {\n    const client = await pool.connect();\n    try {\n        await client.query('BEGIN');\n\n        // Check if employees table exists\n        const employeesTableExists = await client.query(`\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables \n                WHERE  table_name   = 'employees'\n            );\n        `);\n\n        if (!employeesTableExists.rows[0].exists) {\n            console.log(\"Creating database schema...\");\n            await client.query(`\n                -- Table for storing basic employee data\n                CREATE TABLE employees (\n                    id VARCHAR(255) PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    middle_name VARCHAR(255),\n                    position VARCHAR(255),\n                    department VARCHAR(255),\n                    branch VARCHAR(255),\n                    gender VARCHAR(50),\n                    date_of_birth DATE,\n                    date_hired DATE,\n                    status VARCHAR(50) DEFAULT 'Active', -- e.g., Active, On Leave, Resigned\n                    photo_url TEXT,\n                    password VARCHAR(255)\n                );\n\n                -- Table for HR personnel accounts\n                CREATE TABLE hr_personnel (\n                    id SERIAL PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    email VARCHAR(255) UNIQUE NOT NULL,\n                    password VARCHAR(255) NOT NULL\n                );\n                \n                -- Table for Administrator accounts\n                CREATE TABLE admins (\n                    id SERIAL PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    email VARCHAR(255) UNIQUE NOT NULL,\n                    password VARCHAR(255) NOT NULL\n                );\n\n                -- Table for attendance records\n                CREATE TABLE attendance (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    attendance_date DATE NOT NULL,\n                    time_in TIMESTAMP,\n                    time_out TIMESTAMP,\n                    status VARCHAR(50), -- e.g., Present, Late, Absent\n                    notes TEXT,\n                    UNIQUE(employee_id, attendance_date)\n                );\n                \n                -- Table for schedules\n                CREATE TABLE schedules (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    week_start_date DATE NOT NULL,\n                    schedule_data JSONB -- Stores the entire week's schedule as a JSON object\n                );\n\n                -- Table for payslips\n                CREATE TABLE payslips (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    period_start DATE NOT NULL,\n                    period_end DATE NOT NULL,\n                    pay_date DATE,\n                    earnings JSONB,\n                    deductions JSONB,\n                    net_pay NUMERIC(10, 2)\n                );\n                \n                -- Table for leave requests\n                CREATE TABLE leave_requests (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    leave_type VARCHAR(100),\n                    start_date DATE,\n                    end_date DATE,\n                    reason TEXT,\n                    status VARCHAR(50) DEFAULT 'Pending' -- e.g., Pending, Approved, Rejected\n                );\n\n                -- Table for company-wide announcements\n                CREATE TABLE announcements (\n                    id SERIAL PRIMARY KEY,\n                    title VARCHAR(255) NOT NULL,\n                    content TEXT,\n                    posted_by INTEGER REFERENCES hr_personnel(id),\n                    posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    status VARCHAR(50) DEFAULT 'Draft' -- e.g., Draft, Published\n                );\n            `);\n\n            console.log(\"Inserting sample data...\");\n            /**\n             * Default User Accounts for Testing:\n             * \n             * 1. Employee Account\n             *    - Identifier: EMP-00123\n             *    - Password:   password\n             * \n             * 2. HR Account\n             *    - Identifier: olivia.chen.hr@example.com\n             *    - Password:   password\n             * \n             * 3. Admin Account\n             *    - Identifier: super@example.com\n             *    - Password:   password\n             */\n            await client.query(`\n                INSERT INTO employees (id, first_name, last_name, position, department, branch, status, password) VALUES \n                ('EMP-00123', 'Maria', 'Rodriguez', 'Senior Software Engineer', 'Technology', 'Headquarters', 'Active', 'password');\n\n                INSERT INTO hr_personnel (first_name, last_name, email, password) VALUES \n                ('Olivia', 'Chen', 'olivia.chen.hr@example.com', 'password');\n\n                INSERT INTO admins (first_name, last_name, email, password) VALUES \n                ('Super', 'Admin', 'super@example.com', 'password');\n\n                INSERT INTO leave_requests (employee_id, leave_type, start_date, end_date, reason, status) VALUES\n                ('EMP-00123', 'Vacation', '2024-09-01', '2024-09-05', 'Family trip to Japan.', 'Pending');\n            `);\n            console.log(\"Database initialized successfully.\");\n        }\n\n        await client.query('COMMIT');\n    } catch (e) {\n        await client.query('ROLLBACK');\n        throw e;\n    } finally {\n        client.release();\n    }\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AAED;;;;;;AAEA,gCAAgC;AAChC,6DAA6D;AAC7D,sDAAsD;AACtD,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI,QAAQ;AAChD;AAQO,MAAM,QAAQ,CAAC,MAAM;IACxB,OAAO,KAAK,KAAK,CAAC,MAAM;AAC5B;AAGO,eAAe;IAClB,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACA,MAAM,OAAO,KAAK,CAAC;QAEnB,kCAAkC;QAClC,MAAM,uBAAuB,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;QAKjD,CAAC;QAED,IAAI,CAAC,qBAAqB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACtC,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwFpB,CAAC;YAED,QAAQ,GAAG,CAAC;YACZ;;;;;;;;;;;;;;aAcC,GACD,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;YAYpB,CAAC;YACD,QAAQ,GAAG,CAAC;QAChB;QAEA,MAAM,OAAO,KAAK,CAAC;IACvB,EAAE,OAAO,GAAG;QACR,MAAM,OAAO,KAAK,CAAC;QACnB,MAAM;IACV,SAAU;QACN,OAAO,OAAO;IAClB;AACJ","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/login/route.js"],"sourcesContent":["/**\n * @fileoverview API route for handling user authentication.\n * It validates credentials against the database for all user roles.\n */\n\nimport { NextResponse } from 'next/server';\nimport { query } from '@/lib/db';\n\n/**\n * Handles the POST request for user authentication.\n * @param {Request} req - The incoming request object.\n * @returns {NextResponse} The response object.\n */\nexport async function POST(req) {\n  try {\n    const { identifier, password } = await req.json();\n\n    if (!identifier || !password) {\n      return NextResponse.json({ message: 'Identifier and password are required.' }, { status: 400 });\n    }\n\n    const isEmail = identifier.includes('@');\n\n    if (isEmail) {\n      // 1. Check HR personnel table\n      const hrResult = await query('SELECT * FROM hr_personnel WHERE email = $1', [identifier]);\n      if (hrResult.rows.length > 0) {\n        const user = hrResult.rows[0];\n        if (user.password && password === user.password) {\n          const responseUser = { id: user.id, name: `${user.first_name} ${user.last_name}`, email: user.email, role: 'hr' };\n          return NextResponse.json({\n            success: true,\n            message: 'Login successful',\n            user: responseUser,\n            redirectUrl: '/hr/dashboard',\n          }, { status: 200 });\n        }\n      }\n\n      // 2. If not in HR, check Admins table\n      const adminResult = await query('SELECT * FROM admins WHERE email = $1', [identifier]);\n      if (adminResult.rows.length > 0) {\n        const user = adminResult.rows[0];\n        if (user.password && password === user.password) {\n           const responseUser = { id: user.id, name: `${user.first_name} ${user.last_name}`, email: user.email, role: 'admin' };\n           return NextResponse.json({\n            success: true,\n            message: 'Login successful',\n            user: responseUser,\n            redirectUrl: '/admin/dashboard',\n          }, { status: 200 });\n        }\n      }\n    } else {\n      // 3. If not an email, assume it's an employee ID\n      const employeeResult = await query(\"SELECT * FROM employees WHERE id = $1 AND status = 'Active'\", [identifier]);\n      if (employeeResult.rows.length > 0) {\n        const user = employeeResult.rows[0];\n        if (user.password && password === user.password) {\n           const responseUser = { id: user.id, name: `${user.first_name} ${user.last_name}`, role: 'employee' };\n           return NextResponse.json({\n            success: true,\n            message: 'Login successful',\n            user: responseUser,\n            redirectUrl: '/dashboard',\n          }, { status: 200 });\n        }\n      }\n    }\n\n    // If no user was authenticated after all checks, return invalid credentials.\n    return NextResponse.json({ message: 'Invalid credentials.' }, { status: 401 });\n\n  } catch (error) {\n    console.error('Login API Error:', error);\n    // Return a generic error to the client\n    return NextResponse.json({ message: 'An internal server error occurred.' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;AAED;AACA;;;;;;;AAOO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/C,IAAI,CAAC,cAAc,CAAC,UAAU;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAwC,GAAG;gBAAE,QAAQ;YAAI;QAC/F;QAEA,MAAM,UAAU,WAAW,QAAQ,CAAC;QAEpC,IAAI,SAAS;YACX,8BAA8B;YAC9B,MAAM,WAAW,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAE,+CAA+C;gBAAC;aAAW;YACxF,IAAI,SAAS,IAAI,CAAC,MAAM,GAAG,GAAG;gBAC5B,MAAM,OAAO,SAAS,IAAI,CAAC,EAAE;gBAC7B,IAAI,KAAK,QAAQ,IAAI,aAAa,KAAK,QAAQ,EAAE;oBAC/C,MAAM,eAAe;wBAAE,IAAI,KAAK,EAAE;wBAAE,MAAM,GAAG,KAAK,UAAU,CAAC,CAAC,EAAE,KAAK,SAAS,EAAE;wBAAE,OAAO,KAAK,KAAK;wBAAE,MAAM;oBAAK;oBAChH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBACvB,SAAS;wBACT,SAAS;wBACT,MAAM;wBACN,aAAa;oBACf,GAAG;wBAAE,QAAQ;oBAAI;gBACnB;YACF;YAEA,sCAAsC;YACtC,MAAM,cAAc,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAE,yCAAyC;gBAAC;aAAW;YACrF,IAAI,YAAY,IAAI,CAAC,MAAM,GAAG,GAAG;gBAC/B,MAAM,OAAO,YAAY,IAAI,CAAC,EAAE;gBAChC,IAAI,KAAK,QAAQ,IAAI,aAAa,KAAK,QAAQ,EAAE;oBAC9C,MAAM,eAAe;wBAAE,IAAI,KAAK,EAAE;wBAAE,MAAM,GAAG,KAAK,UAAU,CAAC,CAAC,EAAE,KAAK,SAAS,EAAE;wBAAE,OAAO,KAAK,KAAK;wBAAE,MAAM;oBAAQ;oBACnH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBACxB,SAAS;wBACT,SAAS;wBACT,MAAM;wBACN,aAAa;oBACf,GAAG;wBAAE,QAAQ;oBAAI;gBACnB;YACF;QACF,OAAO;YACL,iDAAiD;YACjD,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,QAAK,AAAD,EAAE,+DAA+D;gBAAC;aAAW;YAC9G,IAAI,eAAe,IAAI,CAAC,MAAM,GAAG,GAAG;gBAClC,MAAM,OAAO,eAAe,IAAI,CAAC,EAAE;gBACnC,IAAI,KAAK,QAAQ,IAAI,aAAa,KAAK,QAAQ,EAAE;oBAC9C,MAAM,eAAe;wBAAE,IAAI,KAAK,EAAE;wBAAE,MAAM,GAAG,KAAK,UAAU,CAAC,CAAC,EAAE,KAAK,SAAS,EAAE;wBAAE,MAAM;oBAAW;oBACnG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBACxB,SAAS;wBACT,SAAS;wBACT,MAAM;wBACN,aAAa;oBACf,GAAG;wBAAE,QAAQ;oBAAI;gBACnB;YACF;QACF;QAEA,6EAA6E;QAC7E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAE9E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,uCAAuC;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAqC,GAAG;YAAE,QAAQ;QAAI;IAC5F;AACF","debugId":null}}]
}