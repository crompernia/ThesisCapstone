{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\nimport { Users, CheckCircle, Briefcase, Bell } from 'lucide-react';\n\nasync function executeQuery(queryString, params, errorMessage) {\n    try {\n        const { rows } = await query(queryString, params);\n        return rows;\n    } catch (error) {\n        console.error(errorMessage, error);\n        throw new Error(errorMessage);\n    }\n}\n\n\nexport async function getHRDashboardData() {\n  const employeeCountQuery = \"SELECT COUNT(*) FROM accounts WHERE role = 'Employee' AND status = 'Active'\";\n  const pendingLeavesQuery = \"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\";\n  const recentActivitiesQuery = `\n    SELECT lr.id, a.first_name, a.last_name, lr.leave_type, lr.start_date\n    FROM leave_requests lr\n    JOIN accounts a ON lr.account_id = a.id\n    ORDER BY lr.start_date DESC\n    LIMIT 5\n  `;\n\n  try {\n    const [employeeCountResult, pendingLeavesResult, recentActivitiesResult] = await Promise.all([\n      query(employeeCountQuery),\n      query(pendingLeavesQuery),\n      query(recentActivitiesQuery),\n    ]);\n\n    const employeeCount = employeeCountResult.rows[0].count;\n    const pendingLeaves = pendingLeavesResult.rows[0].count;\n    const recentActivities = recentActivitiesResult.rows.map(row => ({\n      id: row.id,\n      activity: `${row.first_name} ${row.last_name} requested ${row.leave_type.toLowerCase()} leave`,\n      timestamp: formatDistanceToNow(new Date(row.start_date), { addSuffix: true }),\n      type: 'Leave'\n    }));\n    \n    return {\n      stats: [\n        { title: 'Total Employees', value: employeeCount, icon: <Users />, change: '+2 this month' },\n        { title: 'On Time Percentage', value: '96%', icon: <CheckCircle />, change: '-1% from last month' },\n        { title: 'Active Job Postings', value: '4', icon: <Briefcase />, change: '+1 new posting' },\n        { title: 'Pending Leave Requests', value: pendingLeaves, icon: <Bell />, change: `${pendingLeaves} new today` },\n      ],\n      recentActivities\n    };\n\n  } catch (error) {\n    console.error('Database Error fetching HR dashboard data:', error);\n    throw new Error('Failed to fetch HR dashboard data.');\n  }\n}\n\nexport async function getPastAnnouncements() {\n    const queryString = `\n        SELECT a.id, a.title, a.content, a.posted_at, a.status, acc.first_name, acc.last_name\n        FROM announcements a\n        JOIN accounts acc ON a.posted_by_id = acc.id\n        ORDER BY a.posted_at DESC\n    `;\n    const rows = await executeQuery(queryString, [], 'Failed to fetch past announcements.');\n    return rows.map(a => ({\n        ...a,\n        date: format(new Date(a.posted_at), 'yyyy-MM-dd'),\n        postedBy: `${a.first_name} ${a.last_name}`\n    }));\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    const requestedDate = format(new Date(date), 'yyyy-MM-dd');\n    const queryString = `\n        SELECT \n            acc.id, \n            acc.first_name, \n            acc.last_name, \n            acc.position, \n            acc.branch, \n            att.time_in, \n            att.time_out, \n            att.status\n        FROM accounts acc\n        LEFT JOIN attendance att ON acc.id = att.account_id AND att.attendance_date = $1\n        WHERE acc.role = 'Employee' AND acc.status = 'Active'\n    `;\n\n    const rows = await executeQuery(queryString, [requestedDate], 'Failed to fetch daily attendance data.');\n    return rows.map(emp => ({\n        id: emp.id,\n        name: `${emp.first_name} ${emp.last_name}`,\n        position: emp.position,\n        branch: emp.branch,\n        timeIn: emp.time_in ? format(new Date(`1970-01-01T${emp.time_in}`), 'HH:mm') : '--',\n        timeOut: emp.time_out ? format(new Date(`1970-01-01T${emp.time_out}`), 'HH:mm') : '--',\n        status: emp.status || 'Absent'\n    }));\n}\n\n\nexport async function getEmployees() {\n    const queryString = `\n        SELECT id, first_name, last_name, position, branch, status \n        FROM accounts \n        WHERE role = 'Employee'`;\n    const rows = await executeQuery(queryString, [], 'Failed to fetch employees.');\n    return rows.map(acc => ({\n        id: acc.id,\n        name: `${acc.first_name} ${acc.last_name}`,\n        position: acc.position,\n        branch: acc.branch,\n        status: acc.status\n    }));\n}\n\nexport async function getLeaveRequests() {\n    const queryString = `\n        SELECT lr.id, lr.leave_type, lr.start_date, lr.end_date, lr.reason, lr.status, a.first_name, a.last_name, a.id as employeeId\n        FROM leave_requests lr\n        JOIN accounts a ON lr.account_id = a.id\n        ORDER BY lr.start_date DESC\n    `;\n    const rows = await executeQuery(queryString, [], 'Failed to fetch leave requests.');\n    return rows.map(lr => ({\n        id: lr.id,\n        employeeName: `${lr.first_name} ${lr.last_name}`,\n        employeeId: lr.employeeid,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        reason: lr.reason,\n        status: lr.status\n    }));\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    const queryString = `\n        SELECT \n            acc.id, \n            acc.first_name, \n            acc.last_name, \n            acc.position, \n            acc.department,\n            EXISTS(SELECT 1 FROM payslips p WHERE p.account_id = acc.id) as has_payslip\n        FROM accounts acc\n        WHERE acc.role = 'Employee' AND acc.status = 'Active'\n    `;\n    const rows = await executeQuery(queryString, [], 'Failed to fetch employees with payslip status.');\n    return rows.map(emp => ({\n        id: emp.id,\n        name: `${emp.first_name} ${emp.last_name}`,\n        position: emp.position,\n        department: emp.department,\n        payslipStatus: emp.has_payslip ? 'Generated' : 'Pending'\n    }));\n}\n\nexport async function getEmployeesForScheduling() {\n    const queryString = `\n        SELECT id, first_name, last_name \n        FROM accounts \n        WHERE status = 'Active' AND role = 'Employee'\n    `;\n    const rows = await executeQuery(queryString, [], 'Failed to fetch employees for scheduling.');\n    return rows.map(emp => ({\n        id: emp.id,\n        name: `${emp.first_name} ${emp.last_name}`,\n        shift: '9:00 - 17:00' // Default shift, can be customized\n    }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    try {\n        const employeeQuery = \"SELECT id, first_name, last_name, position, department, email FROM accounts WHERE id = $1\";\n        const announcementsQuery = `\n            SELECT id, title, content, posted_at\n            FROM announcements\n            WHERE status = 'Published'\n            ORDER BY posted_at DESC\n            LIMIT 5\n        `;\n        \n        const employeeResult = await query(employeeQuery, [employeeId]);\n        if (employeeResult.rows.length === 0) {\n            throw new Error(`Employee with ID ${employeeId} not found`);\n        }\n        \n        const announcementsResult = await query(announcementsQuery);\n        \n        const employeeData = employeeResult.rows[0];\n        const announcements = announcementsResult.rows.map(a => ({\n            id: a.id,\n            title: a.title,\n            content: a.content,\n            date: format(new Date(a.posted_at), 'MMMM d, yyyy')\n        }));\n\n        return {\n            employee: {\n                employeeId: employeeData.id,\n                name: `${employeeData.first_name} ${employeeData.last_name}`,\n                position: employeeData.position,\n                department: employeeData.department,\n                email: employeeData.email,\n            },\n            announcements\n        };\n    } catch (error) {\n        console.error(`Database Error fetching dashboard data for ${employeeId}:`, error);\n        throw new Error(`Failed to fetch dashboard data for employee ${employeeId}.`);\n    }\n}\n\nexport async function getAttendanceData(employeeId) {\n    const recordsQuery = \"SELECT * FROM attendance WHERE account_id = $1 ORDER BY attendance_date DESC\";\n    const accountQuery = \"SELECT available_leaves FROM accounts WHERE id = $1\";\n\n    const [recordsResult, accountResult] = await Promise.all([\n        query(recordsQuery, [employeeId]),\n        query(accountQuery, [employeeId]),\n    ]);\n\n    const records = recordsResult.rows;\n    const account = accountResult.rows[0];\n\n    const summary = {\n        daysAttended: records.filter(r => r.status === 'Present' || r.status === 'Late').length,\n        lates: records.filter(r => r.status === 'Late').length,\n        absences: records.filter(r => r.status === 'Absent').length,\n        totalHours: records.filter(r => r.status === 'Present' || r.status === 'Late').reduce((sum, r) => {\n            if(r.time_in && r.time_out) {\n                const timeIn = new Date(`1970-01-01T${r.time_in}`);\n                const timeOut = new Date(`1970-01-01T${r.time_out}`);\n                return sum + (timeOut - timeIn) / (1000 * 60 * 60);\n            }\n            return sum;\n        }, 0).toFixed(2),\n        availableLeaves: account?.available_leaves || 0,\n    };\n\n    return {\n        summary,\n        records: records.map(r => ({\n            date: format(new Date(r.attendance_date), 'MMMM d, yyyy'),\n            timeIn: r.time_in ? format(new Date(`1970-01-01T${r.time_in}`), 'HH:mm') : '--',\n            timeOut: r.time_out ? format(new Date(`1970-01-01T${r.time_out}`), 'HH:mm') : '--',\n            status: r.status\n        }))\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const queryString = `\n        SELECT id, leave_type, start_date, end_date, status \n        FROM leave_requests \n        WHERE account_id = $1 \n        ORDER BY start_date DESC\n    `;\n    const rows = await executeQuery(queryString, [employeeId], 'Failed to fetch past leave requests.');\n    return rows.map(lr => ({\n        id: lr.id,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        status: lr.status\n    }));\n}\n\nexport async function createLeaveRequest(leaveRequest) {\n    const { employeeId, leaveType, startDate, endDate, reason } = leaveRequest;\n    const queryString = `\n        INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason, status)\n        VALUES ($1, $2, $3, $4, $5, 'Pending')\n    `;\n    await executeQuery(queryString, [employeeId, leaveType, startDate, endDate, reason], 'Failed to create leave request.');\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    const queryString = \"SELECT id, period_start, period_end, pay_date, earnings, deductions, net_pay FROM payslips WHERE account_id = $1 ORDER BY pay_date DESC\";\n    const rows = await executeQuery(queryString, [employeeId], 'Failed to fetch pay periods.');\n    return rows.map(p => ({\n        id: p.id,\n        period: `${format(new Date(p.period_start), 'yyyy-MM-dd')} - ${format(new Date(p.period_end), 'yyyy-MM-dd')}`,\n        payDate: format(new Date(p.pay_date), 'MMMM d, yyyy'),\n        earnings: p.earnings,\n        deductions: p.deductions,\n        net_pay: p.net_pay\n    }));\n}\n\nexport async function getSchedule(employeeId) {\n    const today = new Date();\n    const weekStartDate = subDays(today, (today.getDay() + 6) % 7);\n    const queryString = \"SELECT day_of_week, time_in, time_out, break_duration_minutes, is_off_day FROM schedules WHERE account_id = $1 AND week_start_date = $2\";\n    \n    const rows = await executeQuery(queryString, [employeeId, format(weekStartDate, 'yyyy-MM-dd')], 'Failed to fetch schedule.');\n\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map((day, i) => {\n        const date = addDays(weekStartDate, i);\n        const scheduledDay = rows.find(s => s.day_of_week === day);\n\n        if (scheduledDay && !scheduledDay.is_off_day) {\n            const timeIn = new Date(`1970-01-01T${scheduledDay.time_in}`);\n            const timeOut = new Date(`1970-01-01T${scheduledDay.time_out}`);\n            const hours = (timeOut - timeIn) / (1000 * 60 * 60) - (scheduledDay.break_duration_minutes / 60);\n            return {\n                day,\n                date: format(date, 'MMM dd'),\n                timeIn: format(timeIn, 'HH:mm'),\n                timeOut: format(timeOut, 'HH:mm'),\n                break: `${scheduledDay.break_duration_minutes} mins`,\n                hours: Math.round(hours)\n            };\n        }\n        return { day, date: format(date, 'MMM dd'), timeIn: 'OFF', timeOut: 'OFF', break: '-', hours: 0 };\n    });\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n    const queryString = `\n        SELECT id, first_name, last_name, position, date_hired\n        FROM accounts \n        WHERE status = 'Pending Approval'`;\n    const rows = await executeQuery(queryString, [], 'Failed to fetch pending employee approvals.');\n    return rows.map(acc => ({\n        id: acc.id,\n        submittedBy: 'HR Department', // This could be joined from another table if available\n        employeeName: `${acc.first_name} ${acc.last_name}`,\n        position: acc.position,\n        submissionDate: format(new Date(acc.date_hired), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const queryString = \"UPDATE accounts SET status = 'Active' WHERE id = $1\";\n    await executeQuery(queryString, [employeeId], `Failed to approve employee ${employeeId}.`);\n}\n\nexport async function rejectEmployee(employeeId) {\n    const queryString = \"DELETE FROM accounts WHERE id = $1\";\n    await executeQuery(queryString, [employeeId], `Failed to reject employee ${employeeId}.`);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const queryString = \"SELECT first_name, last_name FROM accounts WHERE id = $1\";\n    const rows = await executeQuery(queryString, [employeeId], `Failed to fetch name for employee ${employeeId}.`);\n    if (rows.length > 0) {\n        return `${rows[0].first_name} ${rows[0].last_name}`;\n    }\n    return \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This function remains a mock as there is no 'reports' table.\n    // In a real app, you would query your reports table here.\n    return null;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/hr/announcements/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getPastAnnouncements as '0081b652a1ba97ae17200b5330a84c1eaee2045820'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/hr/announcements/page.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/hr/announcements/page.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/hr/announcements/page.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/hr/announcements/page.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/hr/announcements/page.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/hr/announcements/page.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}