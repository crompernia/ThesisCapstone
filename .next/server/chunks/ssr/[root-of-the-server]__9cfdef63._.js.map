{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.js"],"sourcesContent":["/**\n * @fileoverview This file contains the database connection configuration and utilities.\n * It uses the 'pg' library to connect to a PostgreSQL database.\n * The connection details are sourced from environment variables for security.\n */\nimport { Pool } from 'pg';\n\nlet pool;\n\ntry {\n    // Create a new connection pool.\n    // A pool is better than a single client for web applications\n    // because it can manage multiple connections at once.\n    pool = new Pool({\n        user: process.env.DB_USER || 'postgres',\n        host: process.env.DB_HOST || 'localhost',\n        database: process.env.DB_NAME || 'employeedb',\n        password: process.env.DB_PASSWORD || 'password',\n        port: parseInt(process.env.DB_PORT || '5432', 10),\n        // Add a connection timeout to prevent hanging connections\n        connectionTimeoutMillis: 5000, \n    });\n\n    pool.on('error', (err, client) => {\n        console.error('Unexpected error on idle client', err);\n        process.exit(-1);\n    });\n\n} catch (error) {\n    console.error(\"Failed to create a database connection pool:\", error);\n    pool = null; // Ensure pool is null if creation fails\n}\n\n/**\n * Executes a query against the database.\n * @param {string} text - The SQL query string.\n * @param {any[]} [params] - Optional parameters for the SQL query.\n * @returns {Promise<any | undefined>} A promise that resolves with the query result, or undefined if an error occurs.\n */\nexport const query = async (text, params) => {\n    if (!pool) {\n        console.error(\"Database connection pool is not available. Skipping query.\");\n        return undefined;\n    }\n    const start = Date.now();\n    let client;\n    try {\n        client = await pool.connect();\n        const res = await client.query(text, params);\n        const duration = Date.now() - start;\n        // console.log('executed query', { text, duration, rows: res.rowCount });\n        return res;\n    } catch (error) {\n        // Do not re-throw the error. Return undefined to be handled by the data fetching function.\n        return undefined;\n    } finally {\n        if (client) {\n            client.release();\n        }\n    }\n};\n\n/**\n * Initializes the database by creating tables and inserting sample data if they don't exist.\n * This function is designed to be called once at application startup.\n */\nexport async function initializeDb() {\n    if (!pool) {\n        console.error(\"Skipping DB initialization because the pool is not available.\");\n        return;\n    }\n    let client;\n    try {\n        client = await pool.connect();\n    } catch (error) {\n        // Fail silently if the database isn't available at startup.\n        if (client) client.release();\n        return;\n    }\n    \n    try {\n        const tableCheck = await client.query(\"SELECT to_regclass('public.accounts');\");\n        const tableExists = tableCheck.rows[0].to_regclass;\n\n        if (!tableExists) {\n            console.log(\"Database schema not found. Creating tables and seeding data...\");\n            await client.query('BEGIN');\n\n            // Drop old tables if they exist\n            await client.query('DROP TABLE IF EXISTS attendance, schedules, payslips, leave_requests, announcements, accounts CASCADE;');\n\n            // Create Tables\n            await client.query(`\n                CREATE TABLE accounts (\n                    id VARCHAR(255) PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    middle_name VARCHAR(255),\n                    email VARCHAR(255) UNIQUE NOT NULL,\n                    password TEXT NOT NULL,\n                    role VARCHAR(50) NOT NULL, -- 'Employee', 'HR', 'Admin'\n                    position VARCHAR(255),\n                    department VARCHAR(255),\n                    branch VARCHAR(255),\n                    gender VARCHAR(50),\n                    date_of_birth DATE,\n                    date_hired DATE,\n                    status VARCHAR(50) DEFAULT 'Active',\n                    photo_url TEXT,\n                    available_leaves INT DEFAULT 15\n                );\n                CREATE TABLE attendance (\n                    id SERIAL PRIMARY KEY,\n                    account_id VARCHAR(255) REFERENCES accounts(id),\n                    attendance_date DATE NOT NULL,\n                    time_in TIMESTAMP,\n                    time_out TIMESTAMP,\n                    status VARCHAR(50),\n                    notes TEXT,\n                    UNIQUE(account_id, attendance_date)\n                );\n                CREATE TABLE schedules (\n                    id SERIAL PRIMARY KEY,\n                    account_id VARCHAR(255) REFERENCES accounts(id),\n                    week_start_date DATE NOT NULL,\n                    schedule_data JSONB\n                );\n                CREATE TABLE payslips (\n                    id SERIAL PRIMARY KEY,\n                    account_id VARCHAR(255) REFERENCES accounts(id),\n                    period_start DATE NOT NULL,\n                    period_end DATE NOT NULL,\n                    pay_date DATE,\n                    earnings JSONB,\n                    deductions JSONB,\n                    net_pay NUMERIC(10, 2)\n                );\n                CREATE TABLE leave_requests (\n                    id SERIAL PRIMARY KEY,\n                    account_id VARCHAR(255) REFERENCES accounts(id),\n                    leave_type VARCHAR(100),\n                    start_date DATE,\n                    end_date DATE,\n                    reason TEXT,\n                    status VARCHAR(50) DEFAULT 'Pending'\n                );\n                CREATE TABLE announcements (\n                    id SERIAL PRIMARY KEY,\n                    title VARCHAR(255) NOT NULL,\n                    content TEXT,\n                    posted_by_id VARCHAR(255) REFERENCES accounts(id),\n                    posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    status VARCHAR(50) DEFAULT 'Draft'\n                );\n            `);\n\n            // Insert Sample Data\n            // NOTE: In a real application, passwords should be securely hashed.\n            await client.query(`\n                INSERT INTO accounts (id, first_name, last_name, email, password, role, position, department, branch, status, date_hired) VALUES \n                ('EMP-00123', 'Maria', 'Rodriguez', 'maria.rodriguez@example.com', 'password', 'Employee', 'Senior Software Engineer', 'Technology', 'Headquarters', 'Active', '2022-01-15'),\n                ('EMP-00124', 'David', 'Lee', 'david.lee@example.com', 'password', 'Employee', 'Project Manager', 'Management', 'Headquarters', 'Active', '2021-03-20'),\n                ('EMP-00125', 'Sarah', 'Chen', 'sarah.chen@example.com', 'password', 'Employee', 'UX Designer', 'Design', 'Downtown Office', 'Active', '2023-05-10'),\n                ('EMP-00126', 'John', 'Doe', 'john.doe@example.com', 'password', 'Employee', 'QA Tester', 'Technology', 'Remote', 'On Leave', '2022-08-01'),\n                ('HR-001', 'Olivia', 'Chen', 'olivia.chen.hr@example.com', 'password', 'HR', 'HR Manager', 'Human Resources', 'Headquarters', 'Active', '2020-01-01'),\n                ('ADM-001', 'Super', 'Admin', 'super@example.com', 'password', 'Admin', 'System Administrator', 'IT', 'Headquarters', 'Active', '2019-01-01');\n                \n                INSERT INTO announcements (title, content, posted_by_id, status, posted_at) VALUES\n                ('Annual Company Retreat 2024', 'We are excited to announce that this years company retreat will be held at Lakeview Resort from October 10th to 12th. More details to follow!', 'HR-001', 'Published', '2024-08-15 10:00:00'),\n                ('New Health Insurance Policy', 'Please review the updated health insurance policy documents available on the employee portal. The new policy will be effective starting next month.', 'HR-001', 'Published', '2024-08-10 14:30:00'),\n                ('Q3 Performance Reviews', 'The Q3 performance review cycle will begin next week. Please schedule a meeting with your manager to discuss your progress.', 'HR-001', 'Draft', '2024-08-05 11:00:00');\n\n                INSERT INTO attendance (account_id, attendance_date, time_in, time_out, status) VALUES\n                ('EMP-00123', CURRENT_DATE - 3, (CURRENT_DATE - 3) + interval '9 hour', (CURRENT_DATE - 3) + interval '17 hour', 'Present'),\n                ('EMP-00123', CURRENT_DATE - 2, (CURRENT_DATE - 2) + interval '9 hour 15 minute', (CURRENT_DATE - 2) + interval '17 hour 5 minute', 'Late'),\n                ('EMP-00123', CURRENT_DATE - 1, (CURRENT_DATE - 1) + interval '8 hour 58 minute', (CURRENT_DATE - 1) + interval '17 hour 2 minute', 'Present'),\n                ('EMP-00124', CURRENT_DATE - 1, NULL, NULL, 'Absent');\n\n\n                INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason, status) VALUES\n                ('EMP-00123', 'Vacation', '2024-09-01', '2024-09-05', 'Family trip to Japan.', 'Approved'),\n                ('EMP-00124', 'Sick Leave', CURRENT_DATE - 1, CURRENT_DATE - 1, 'Feeling unwell, have a fever.', 'Approved'),\n                ('EMP-00125', 'Personal Day', CURRENT_DATE + 5, CURRENT_DATE + 5, 'Important personal appointment.', 'Pending'),\n                ('EMP-00123', 'Bereavement', '2024-07-20', '2024-07-22', 'Family emergency.', 'Rejected');\n                \n                INSERT INTO schedules (account_id, week_start_date, schedule_data) VALUES\n                ('EMP-00123', date_trunc('week', current_date), \n                    '[\n                        {\"day\": \"Monday\", \"date\": \"Aug 19\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Tuesday\", \"date\": \"Aug 20\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Wednesday\", \"date\": \"Aug 21\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Thursday\", \"date\": \"Aug 22\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Friday\", \"date\": \"Aug 23\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Saturday\", \"date\": \"Aug 24\", \"timeIn\": \"OFF\", \"timeOut\": \"OFF\", \"break\": \"-\", \"hours\": 0},\n                        {\"day\": \"Sunday\", \"date\": \"Aug 25\", \"timeIn\": \"OFF\", \"timeOut\": \"OFF\", \"break\": \"-\", \"hours\": 0}\n                    ]'::jsonb\n                );\n\n                INSERT INTO payslips (account_id, period_start, period_end, pay_date, earnings, deductions, net_pay) VALUES\n                ('EMP-00123', (date_trunc('month', current_date) - interval '1 month'), (date_trunc('month', current_date) - interval '1 day'), current_date,\n                    '[\n                        {\"name\": \"Basic Salary\", \"amount\": 75000.00},\n                        {\"name\": \"Overtime Pay\", \"amount\": 5000.00},\n                        {\"name\": \"Transportation Allowance\", \"amount\": 2000.00}\n                    ]'::jsonb,\n                    '[\n                        {\"name\": \"Tax\", \"amount\": 8500.00},\n                        {\"name\": \"Social Security\", \"amount\": 1500.00},\n                        {\"name\": \"Health Insurance\", \"amount\": 1000.00}\n                    ]'::jsonb,\n                    61000.00\n                );\n            `);\n            \n            await client.query('COMMIT');\n            console.log(\"Database initialized successfully.\");\n        } else {\n            // console.log(\"Database schema already exists. Skipping creation.\");\n        }\n    } catch (e) {\n        if (client) {\n            await client.query('ROLLBACK');\n        }\n        console.error(\"Database initialization failed:\", e.message);\n    } finally {\n        if (client) {\n            client.release();\n        }\n    }\n}\n\n// Immediately try to initialize the DB when this module is loaded.\ninitializeDb();\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACD;;;;;;AAEA,IAAI;AAEJ,IAAI;IACA,gCAAgC;IAChC,6DAA6D;IAC7D,sDAAsD;IACtD,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;QACZ,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;QAC7B,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;QACjC,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;QACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI,QAAQ;QAC9C,0DAA0D;QAC1D,yBAAyB;IAC7B;IAEA,KAAK,EAAE,CAAC,SAAS,CAAC,KAAK;QACnB,QAAQ,KAAK,CAAC,mCAAmC;QACjD,QAAQ,IAAI,CAAC,CAAC;IAClB;AAEJ,EAAE,OAAO,OAAO;IACZ,QAAQ,KAAK,CAAC,gDAAgD;IAC9D,OAAO,MAAM,wCAAwC;AACzD;AAQO,MAAM,QAAQ,OAAO,MAAM;IAC9B,IAAI,CAAC,MAAM;QACP,QAAQ,KAAK,CAAC;QACd,OAAO;IACX;IACA,MAAM,QAAQ,KAAK,GAAG;IACtB,IAAI;IACJ,IAAI;QACA,SAAS,MAAM,KAAK,OAAO;QAC3B,MAAM,MAAM,MAAM,OAAO,KAAK,CAAC,MAAM;QACrC,MAAM,WAAW,KAAK,GAAG,KAAK;QAC9B,yEAAyE;QACzE,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,2FAA2F;QAC3F,OAAO;IACX,SAAU;QACN,IAAI,QAAQ;YACR,OAAO,OAAO;QAClB;IACJ;AACJ;AAMO,eAAe;IAClB,IAAI,CAAC,MAAM;QACP,QAAQ,KAAK,CAAC;QACd;IACJ;IACA,IAAI;IACJ,IAAI;QACA,SAAS,MAAM,KAAK,OAAO;IAC/B,EAAE,OAAO,OAAO;QACZ,4DAA4D;QAC5D,IAAI,QAAQ,OAAO,OAAO;QAC1B;IACJ;IAEA,IAAI;QACA,MAAM,aAAa,MAAM,OAAO,KAAK,CAAC;QACtC,MAAM,cAAc,WAAW,IAAI,CAAC,EAAE,CAAC,WAAW;QAElD,IAAI,CAAC,aAAa;YACd,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,KAAK,CAAC;YAEnB,gCAAgC;YAChC,MAAM,OAAO,KAAK,CAAC;YAEnB,gBAAgB;YAChB,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA8DpB,CAAC;YAED,qBAAqB;YACrB,oEAAoE;YACpE,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAsDpB,CAAC;YAED,MAAM,OAAO,KAAK,CAAC;YACnB,QAAQ,GAAG,CAAC;QAChB,OAAO;QACH,qEAAqE;QACzE;IACJ,EAAE,OAAO,GAAG;QACR,IAAI,QAAQ;YACR,MAAM,OAAO,KAAK,CAAC;QACvB;QACA,QAAQ,KAAK,CAAC,mCAAmC,EAAE,OAAO;IAC9D,SAAU;QACN,IAAI,QAAQ;YACR,OAAO,OAAO;QAClB;IACJ;AACJ;AAEA,mEAAmE;AACnE","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.js"],"sourcesContent":["/**\n * @fileoverview This file contains top-level server actions for the application, such as authentication.\n */\n'use server';\n\nimport { query } from '@/lib/db';\nimport { redirect } from 'next/navigation';\n\nexport async function authenticate(prevState, formData) {\n    try {\n        const email = formData.get('email');\n        const password = formData.get('password');\n        \n        const result = await query(\n            'SELECT email, password, role FROM accounts WHERE email = $1',\n            [email],\n        );\n\n        const user = result?.rows[0];\n        \n        if (!user) {\n            return 'Invalid email or password.';\n        }\n        \n        // In a real application, you would use a library like bcrypt to compare the hashed password.\n        const passwordsMatch = password === user.password;\n\n        if (!passwordsMatch) {\n            return 'Invalid email or password.';\n        }\n\n        // Redirect based on user role\n        if (user.role === 'Employee') {\n            redirect('/dashboard');\n        } else if (user.role === 'HR') {\n            redirect('/hr/dashboard');\n        } else if (user.role === 'Admin') {\n            redirect('/admin/dashboard');\n        } else {\n            // If role is not one of the above, it's an invalid role.\n            return 'Invalid user role.';\n        }\n    } catch (error) {\n        // Next.js's redirect throws an error, so we need to handle it.\n        // If the error is a redirect error, we re-throw it to allow Next.js to handle it.\n        if (error.digest?.startsWith('NEXT_REDIRECT')) {\n            throw error;\n        }\n        console.error('Authentication error:', error);\n        return 'An unexpected error occurred. Please try again.';\n    }\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;AAGD;AACA;AAAA;;;;;;;;;;AAEO,eAAe,aAAa,SAAS,EAAE,QAAQ;IAClD,IAAI;QACA,MAAM,QAAQ,SAAS,GAAG,CAAC;QAC3B,MAAM,WAAW,SAAS,GAAG,CAAC;QAE9B,MAAM,SAAS,MAAM,CAAA,GAAA,gHAAA,CAAA,QAAK,AAAD,EACrB,+DACA;YAAC;SAAM;QAGX,MAAM,OAAO,QAAQ,IAAI,CAAC,EAAE;QAE5B,IAAI,CAAC,MAAM;YACP,OAAO;QACX;QAEA,6FAA6F;QAC7F,MAAM,iBAAiB,aAAa,KAAK,QAAQ;QAEjD,IAAI,CAAC,gBAAgB;YACjB,OAAO;QACX;QAEA,8BAA8B;QAC9B,IAAI,KAAK,IAAI,KAAK,YAAY;YAC1B,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO,IAAI,KAAK,IAAI,KAAK,MAAM;YAC3B,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO,IAAI,KAAK,IAAI,KAAK,SAAS;YAC9B,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO;YACH,yDAAyD;YACzD,OAAO;QACX;IACJ,EAAE,OAAO,OAAO;QACZ,+DAA+D;QAC/D,kFAAkF;QAClF,IAAI,MAAM,MAAM,EAAE,WAAW,kBAAkB;YAC3C,MAAM;QACV;QACA,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO;IACX;AACJ;;;IA3CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {authenticate as '608c5eb2618000e732e7b244b2dbd8b3f3f88e7cf3'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}