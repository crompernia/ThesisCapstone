{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.js"],"sourcesContent":["/**\n * @fileoverview This file contains the database connection configuration and utilities.\n * It uses the 'pg' library to connect to a PostgreSQL database.\n * The connection details are sourced from environment variables for security.\n */\n\nimport { Pool } from 'pg';\n\n// Create a new connection pool.\n// A pool is better than a single client for web applications\n// because it can manage multiple connections at once.\nconst pool = new Pool({\n  user: process.env.DB_USER || 'postgres',\n  host: process.env.DB_HOST || 'localhost',\n  database: process.env.DB_NAME || 'employeedb',\n  password: process.env.DB_PASSWORD || 'password',\n  port: parseInt(process.env.DB_PORT || '5432', 10),\n});\n\n/**\n * Executes a query against the database.\n * @param {string} text - The SQL query string.\n * @param {any[]} [params] - Optional parameters for the SQL query.\n * @returns {Promise<any>} A promise that resolves with the query result.\n */\nexport const query = (text, params) => {\n    return pool.query(text, params);\n};\n\n\nexport async function initializeDb() {\n    const client = await pool.connect();\n    try {\n        await client.query('BEGIN');\n\n        // Check if employees table exists\n        const employeesTableExists = await client.query(`\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables \n                WHERE  table_name   = 'employees'\n            );\n        `);\n\n        if (!employeesTableExists.rows[0].exists) {\n            console.log(\"Creating database schema...\");\n            await client.query(`\n                -- Table for storing basic employee data\n                CREATE TABLE employees (\n                    id VARCHAR(255) PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    middle_name VARCHAR(255),\n                    position VARCHAR(255),\n                    department VARCHAR(255),\n                    branch VARCHAR(255),\n                    gender VARCHAR(50),\n                    date_of_birth DATE,\n                    date_hired DATE,\n                    status VARCHAR(50) DEFAULT 'Active', -- e.g., Active, On Leave, Resigned\n                    photo_url TEXT,\n                    password VARCHAR(255)\n                );\n\n                -- Table for HR personnel accounts\n                CREATE TABLE hr_personnel (\n                    id SERIAL PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    email VARCHAR(255) UNIQUE NOT NULL,\n                    password VARCHAR(255) NOT NULL\n                );\n                \n                -- Table for Administrator accounts\n                CREATE TABLE admins (\n                    id SERIAL PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    email VARCHAR(255) UNIQUE NOT NULL,\n                    password VARCHAR(255) NOT NULL\n                );\n\n                -- Table for attendance records\n                CREATE TABLE attendance (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    attendance_date DATE NOT NULL,\n                    time_in TIMESTAMP,\n                    time_out TIMESTAMP,\n                    status VARCHAR(50), -- e.g., Present, Late, Absent\n                    notes TEXT,\n                    UNIQUE(employee_id, attendance_date)\n                );\n                \n                -- Table for schedules\n                CREATE TABLE schedules (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    week_start_date DATE NOT NULL,\n                    schedule_data JSONB -- Stores the entire week's schedule as a JSON object\n                );\n\n                -- Table for payslips\n                CREATE TABLE payslips (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    period_start DATE NOT NULL,\n                    period_end DATE NOT NULL,\n                    pay_date DATE,\n                    earnings JSONB,\n                    deductions JSONB,\n                    net_pay NUMERIC(10, 2)\n                );\n                \n                -- Table for leave requests\n                CREATE TABLE leave_requests (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    leave_type VARCHAR(100),\n                    start_date DATE,\n                    end_date DATE,\n                    reason TEXT,\n                    status VARCHAR(50) DEFAULT 'Pending' -- e.g., Pending, Approved, Rejected\n                );\n\n                -- Table for company-wide announcements\n                CREATE TABLE announcements (\n                    id SERIAL PRIMARY KEY,\n                    title VARCHAR(255) NOT NULL,\n                    content TEXT,\n                    posted_by INTEGER REFERENCES hr_personnel(id),\n                    posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    status VARCHAR(50) DEFAULT 'Draft' -- e.g., Draft, Published\n                );\n            `);\n\n            console.log(\"Inserting sample data...\");\n            /**\n             * Default User Accounts for Testing:\n             * \n             * 1. Employee Account\n             *    - Identifier: EMP-00123\n             *    - Password:   password\n             * \n             * 2. HR Account\n             *    - Identifier: olivia.chen.hr@example.com\n             *    - Password:   password\n             * \n             * 3. Admin Account\n             *    - Identifier: super@example.com\n             *    - Password:   password\n             */\n            await client.query(`\n                INSERT INTO employees (id, first_name, last_name, position, department, branch, status, password) VALUES \n                ('EMP-00123', 'Maria', 'Rodriguez', 'Senior Software Engineer', 'Technology', 'Headquarters', 'Active', 'password');\n\n                INSERT INTO hr_personnel (first_name, last_name, email, password) VALUES \n                ('Olivia', 'Chen', 'olivia.chen.hr@example.com', 'password');\n\n                INSERT INTO admins (first_name, last_name, email, password) VALUES \n                ('Super', 'Admin', 'super@example.com', 'password');\n\n                INSERT INTO leave_requests (employee_id, leave_type, start_date, end_date, reason, status) VALUES\n                ('EMP-00123', 'Vacation', '2024-09-01', '2024-09-05', 'Family trip to Japan.', 'Pending');\n            `);\n            console.log(\"Database initialized successfully.\");\n        }\n\n        await client.query('COMMIT');\n    } catch (e) {\n        await client.query('ROLLBACK');\n        throw e;\n    } finally {\n        client.release();\n    }\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AAED;;;;;;AAEA,gCAAgC;AAChC,6DAA6D;AAC7D,sDAAsD;AACtD,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI,QAAQ;AAChD;AAQO,MAAM,QAAQ,CAAC,MAAM;IACxB,OAAO,KAAK,KAAK,CAAC,MAAM;AAC5B;AAGO,eAAe;IAClB,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACA,MAAM,OAAO,KAAK,CAAC;QAEnB,kCAAkC;QAClC,MAAM,uBAAuB,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;QAKjD,CAAC;QAED,IAAI,CAAC,qBAAqB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACtC,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwFpB,CAAC;YAED,QAAQ,GAAG,CAAC;YACZ;;;;;;;;;;;;;;aAcC,GACD,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;YAYpB,CAAC;YACD,QAAQ,GAAG,CAAC;QAChB;QAEA,MAAM,OAAO,KAAK,CAAC;IACvB,EAAE,OAAO,GAAG;QACR,MAAM,OAAO,KAAK,CAAC;QACnB,MAAM;IACV,SAAU;QACN,OAAO,OAAO;IAClB;AACJ","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.js"],"sourcesContent":["/**\n * @fileoverview This file defines the server-side actions for the application.\n * Server Actions are asynchronous functions that are executed on the server.\n * They can be called from Server and Client Components to handle form submissions\n * and data mutations, providing a secure way to interact with the database.\n */\n'use server';\n\nimport { query } from '@/lib/db';\n\n/**\n * Authenticates a user based on an identifier (email or employee ID) and password.\n * This function checks against the hr_personnel, admins, and employees tables.\n * @param {string} identifier - The user's email or employee ID.\n * @param {string} password - The user's password.\n * @returns {Promise<{success: boolean, message: string, user?: object, redirectUrl?: string}>}\n */\nexport async function authenticateUser(identifier, password) {\n  try {\n    // Check for HR or Admin first (if identifier is an email)\n    if (identifier.includes('@')) {\n      // 1. Check HR personnel table\n      const hrResult = await query('SELECT * FROM hr_personnel WHERE email = $1', [identifier]);\n      if (hrResult.rows.length > 0) {\n        const user = hrResult.rows[0];\n        if (user.password && password === user.password) {\n          const responseUser = { id: user.id, name: `${user.first_name} ${user.last_name}`, email: user.email, role: 'hr' };\n          return { success: true, message: 'Login successful', user: responseUser, redirectUrl: '/hr/dashboard' };\n        } else {\n          return { success: false, message: 'Invalid credentials.' };\n        }\n      }\n\n      // 2. If not in HR, check Admins table\n      const adminResult = await query('SELECT * FROM admins WHERE email = $1', [identifier]);\n      if (adminResult.rows.length > 0) {\n        const user = adminResult.rows[0];\n        if (user.password && password === user.password) {\n          const responseUser = { id: user.id, name: `${user.first_name} ${user.last_name}`, email: user.email, role: 'admin' };\n          return { success: true, message: 'Login successful', user: responseUser, redirectUrl: '/admin/dashboard' };\n        } else {\n          return { success: false, message: 'Invalid credentials.' };\n        }\n      }\n    }\n\n    // 3. If not an email or not found in admin/hr, check employees table\n    const employeeResult = await query(\"SELECT * FROM employees WHERE id = $1 AND status = 'Active'\", [identifier]);\n    if (employeeResult.rows.length > 0) {\n      const user = employeeResult.rows[0];\n      if (user.password && password === user.password) {\n        const responseUser = { id: user.id, name: `${user.first_name} ${user.last_name}`, role: 'employee' };\n        return { success: true, message: 'Login successful', user: responseUser, redirectUrl: '/dashboard' };\n      } else {\n        return { success: false, message: 'Invalid credentials.' };\n      }\n    }\n\n    // If no user was found in any table after all checks\n    return { success: false, message: 'Invalid credentials.' };\n\n  } catch (error) {\n    console.error('Authentication Server Action Error:', error);\n    return { success: false, message: 'An internal server error occurred.' };\n  }\n}\n\n/**\n * Records an employee's clock-in attendance.\n * This function inserts a new attendance record into the database.\n * @param {string} employeeId - The ID of the employee clocking in.\n * @param {string} photoDataUri - A data URI of the photo taken during clock-in.\n * @returns {Promise<{success: boolean, message: string, attendanceRecord?: object}>}\n */\nexport async function recordClockIn(employeeId, photoDataUri) {\n    try {\n        if (!employeeId) {\n            return { success: false, message: 'Employee ID is required.' };\n        }\n\n        const timeIn = new Date();\n        const attendanceDate = timeIn.toISOString().split('T')[0];\n        const status = 'Present';\n        const notes = 'Geofenced clock-in with photo.';\n\n        const insertQuery = `\n            INSERT INTO attendance (employee_id, attendance_date, time_in, status, notes)\n            VALUES ($1, $2, $3, $4, $5)\n            ON CONFLICT (employee_id, attendance_date) \n            DO UPDATE SET time_in = EXCLUDED.time_in, status = EXCLUDED.status, notes = EXCLUDED.notes || ' (Updated)'\n            RETURNING *;\n        `;\n\n        const result = await query(insertQuery, [employeeId, attendanceDate, timeIn, status, notes]);\n\n        return { success: true, message: 'Clock-in successful!', attendanceRecord: result.rows[0] };\n\n    } catch (error) {\n        console.error('Clock-In Server Action Error:', error);\n        return { success: false, message: 'An internal server error occurred during clock-in.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {authenticateUser as '60ea965871abb7904683c5dede9ee8f1b231b263f5'} from 'ACTIONS_MODULE0'\nexport {recordClockIn as '60e721464b135ce288efa207834021d1a882e9cc2e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/login-form.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/login-form.jsx <module evaluation>\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,+DACA","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/login-form.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/login-form.jsx\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,2CACA","debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/logo.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Logo component.\n * This component displays the company's logo as an SVG.\n */\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Renders the Chumplace company logo.\n * @param {object} props - The component props.\n * @param {string} [props.className] - Optional CSS classes for styling.\n * @returns {JSX.Element} The rendered logo component.\n */\nexport function Logo({ className }) {\n  return (\n    <div\n      className={cn(\n        \"bg-transparent flex items-center justify-center\",\n        className\n      )}\n    >\n      <svg\n        className=\"w-auto h-full\"\n        viewBox=\"0 0 200 120\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {/* Outer green oval */}\n        <path d=\"M100 120C171.228 120 200 93.1371 200 60C200 26.8629 171.228 0 100 0C28.7715 0 0 26.8629 0 60C0 93.1371 28.7715 120 100 120Z\" fill=\"#84C441\"/>\n        {/* Inner dark green oval */}\n        <path d=\"M100 110C160.751 110 185 85.3757 185 55C185 24.6243 160.751 0 100 0C39.2487 0 15 24.6243 15 55C15 85.3757 39.2487 110 100 110Z\" fill=\"#006A35\"/>\n        \n        {/* \"CHUM\" text */}\n        <text x=\"28\" y=\"70\" fontFamily=\"Arial, sans-serif\" fontWeight=\"bold\" fontSize=\"30\" fill=\"white\">CHUM</text>\n        {/* \"PLACE\" text */}\n        <text x=\"105\" y=\"70\" fontFamily=\"Arial, sans-serif\" fontWeight=\"bold\" fontSize=\"30\" fill=\"#F4C13D\">PLACE</text>\n        \n        {/* Boba tea icon */}\n        <g transform=\"translate(140, 20) scale(0.7)\">\n            {/* Cup shape */}\n            <path d=\"M15 5 H 45 L 40 55 C 40 60 35 65 30 65 C 25 65 20 60 20 55 L 15 5 Z\" fill=\"#F4C13D\" fillOpacity=\"0.3\"/>\n            <path d=\"M15 5 H 45 L 40 55 C 40 60 35 65 30 65 C 25 65 20 60 20 55 L 15 5 Z\" stroke=\"white\" strokeWidth=\"2\" fill=\"none\"/>\n            \n            {/* Boba pearls */}\n            <circle cx=\"30\" cy=\"30\" r=\"3\" fill=\"#006A35\"/>\n            <circle cx=\"25\" cy=\"40\" r=\"3\" fill=\"#006A35\"/>\n            <circle cx=\"35\" cy=\"40\" r=\"3\" fill=\"#006A35\"/>\n            <circle cx=\"30\" cy=\"50\" r=\"3\" fill=\"#006A35\"/>\n            \n            {/* Straw */}\n            <path d=\"M42 15 C 52 15 52 0 47 0\" stroke=\"white\" strokeWidth=\"2\" fill=\"none\"/>\n        </g>\n      </svg>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACD;;;AAQO,SAAS,KAAK,EAAE,SAAS,EAAE;IAChC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mDACA;kBAGF,cAAA,8OAAC;YACC,WAAU;YACV,SAAQ;YACR,MAAK;YACL,OAAM;;8BAGN,8OAAC;oBAAK,GAAE;oBAA8H,MAAK;;;;;;8BAE3I,8OAAC;oBAAK,GAAE;oBAAiI,MAAK;;;;;;8BAG9I,8OAAC;oBAAK,GAAE;oBAAK,GAAE;oBAAK,YAAW;oBAAoB,YAAW;oBAAO,UAAS;oBAAK,MAAK;8BAAQ;;;;;;8BAEhG,8OAAC;oBAAK,GAAE;oBAAM,GAAE;oBAAK,YAAW;oBAAoB,YAAW;oBAAO,UAAS;oBAAK,MAAK;8BAAU;;;;;;8BAGnG,8OAAC;oBAAE,WAAU;;sCAET,8OAAC;4BAAK,GAAE;4BAAsE,MAAK;4BAAU,aAAY;;;;;;sCACzG,8OAAC;4BAAK,GAAE;4BAAsE,QAAO;4BAAQ,aAAY;4BAAI,MAAK;;;;;;sCAGlH,8OAAC;4BAAO,IAAG;4BAAK,IAAG;4BAAK,GAAE;4BAAI,MAAK;;;;;;sCACnC,8OAAC;4BAAO,IAAG;4BAAK,IAAG;4BAAK,GAAE;4BAAI,MAAK;;;;;;sCACnC,8OAAC;4BAAO,IAAG;4BAAK,IAAG;4BAAK,GAAE;4BAAI,MAAK;;;;;;sCACnC,8OAAC;4BAAO,IAAG;4BAAK,IAAG;4BAAK,GAAE;4BAAI,MAAK;;;;;;sCAGnC,8OAAC;4BAAK,GAAE;4BAA2B,QAAO;4BAAQ,aAAY;4BAAI,MAAK;;;;;;;;;;;;;;;;;;;;;;;AAKnF","debugId":null}},
    {"offset": {"line": 632, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the main entry point of the application, the login page.\n * It provides a unified user interface for all users to authenticate and\n * gain access to their respective dashboards.\n */\nimport { LoginForm } from \"@/components/login-form\";\nimport { Logo } from \"@/components/logo\";\n\n/**\n * Renders the main login page for the application.\n * It features a central login form for all user roles.\n * @returns {JSX.Element} The login page component.\n */\nexport default function LoginPage() {\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-center bg-muted/40 p-4\">\n      <div className=\"w-full max-w-sm\">\n        {/* The company logo is prominently displayed above the login form. */}\n        <div className=\"flex justify-center mb-6\">\n          <Logo className=\"h-20 w-auto\" />\n        </div>\n        <p className=\"text-muted-foreground text-center mb-8\">\n          Welcome back. Please login to your account.\n        </p>\n        <LoginForm />\n        <p className=\"text-xs text-muted-foreground text-center mt-8\">\n          © {new Date().getFullYear()} Chumplace Inc. All rights reserved.\n        </p>\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACD;AACA;;;;AAOe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BAEb,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,0HAAA,CAAA,OAAI;wBAAC,WAAU;;;;;;;;;;;8BAElB,8OAAC;oBAAE,WAAU;8BAAyC;;;;;;8BAGtD,8OAAC,mIAAA,CAAA,YAAS;;;;;8BACV,8OAAC;oBAAE,WAAU;;wBAAiD;wBACzD,IAAI,OAAO,WAAW;wBAAG;;;;;;;;;;;;;;;;;;AAKtC","debugId":null}}]
}