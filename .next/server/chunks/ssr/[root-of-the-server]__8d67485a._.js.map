{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.js"],"sourcesContent":["/**\n * @fileoverview This file contains the database connection configuration and utilities.\n * It uses the 'pg' library to connect to a PostgreSQL database.\n * The connection details are sourced from environment variables for security.\n */\nimport { Pool } from 'pg';\n\nlet pool;\n\ntry {\n    // Create a new connection pool.\n    // A pool is better than a single client for web applications\n    // because it can manage multiple connections at once.\n    pool = new Pool({\n        user: process.env.DB_USER || 'postgres',\n        host: process.env.DB_HOST || 'localhost',\n        database: process.env.DB_NAME || 'employeedb',\n        password: process.env.DB_PASSWORD || 'password',\n        port: parseInt(process.env.DB_PORT || '5432', 10),\n        // Add a connection timeout to prevent hanging connections\n        connectionTimeoutMillis: 5000, \n    });\n\n    pool.on('error', (err, client) => {\n        console.error('Unexpected error on idle client', err);\n        process.exit(-1);\n    });\n\n} catch (error) {\n    console.error(\"Failed to create a database connection pool:\", error);\n    pool = null; // Ensure pool is null if creation fails\n}\n\n/**\n * Executes a query against the database.\n * @param {string} text - The SQL query string.\n * @param {any[]} [params] - Optional parameters for the SQL query.\n * @returns {Promise<any | undefined>} A promise that resolves with the query result, or undefined if an error occurs.\n */\nexport const query = async (text, params) => {\n    if (!pool) {\n        console.error(\"Database connection pool is not available. Skipping query.\");\n        return undefined;\n    }\n    const start = Date.now();\n    let client;\n    try {\n        client = await pool.connect();\n        const res = await client.query(text, params);\n        const duration = Date.now() - start;\n        // console.log('executed query', { text, duration, rows: res.rowCount });\n        return res;\n    } catch (error) {\n        // Do not re-throw the error. Return undefined to be handled by the data fetching function.\n        return undefined;\n    } finally {\n        if (client) {\n            client.release();\n        }\n    }\n};\n\n/**\n * Initializes the database by creating tables and inserting sample data if they don't exist.\n * This function is designed to be called once at application startup.\n */\nexport async function initializeDb() {\n    if (!pool) {\n        console.error(\"Skipping DB initialization because the pool is not available.\");\n        return;\n    }\n    let client;\n    try {\n        client = await pool.connect();\n    } catch (error) {\n        // Fail silently if the database isn't available at startup.\n        if (client) client.release();\n        return;\n    }\n    \n    try {\n        const tableCheck = await client.query(\"SELECT to_regclass('public.employees');\");\n        const tableExists = tableCheck.rows[0].to_regclass;\n\n        if (!tableExists) {\n            console.log(\"Database schema not found. Creating tables and seeding data...\");\n            await client.query('BEGIN');\n\n            // Create Tables\n            await client.query(`\n                CREATE TABLE employees (\n                    id VARCHAR(255) PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    middle_name VARCHAR(255),\n                    position VARCHAR(255),\n                    department VARCHAR(255),\n                    branch VARCHAR(255),\n                    gender VARCHAR(50),\n                    date_of_birth DATE,\n                    date_hired DATE,\n                    status VARCHAR(50) DEFAULT 'Active',\n                    photo_url TEXT,\n                    available_leaves INT DEFAULT 15\n                );\n                CREATE TABLE hr_personnel (\n                    id VARCHAR(255) PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    email VARCHAR(255) UNIQUE NOT NULL\n                );\n                CREATE TABLE admins (\n                    id VARCHAR(255) PRIMARY KEY,\n                    first_name VARCHAR(255) NOT NULL,\n                    last_name VARCHAR(255) NOT NULL,\n                    email VARCHAR(255) UNIQUE NOT NULL\n                );\n                CREATE TABLE attendance (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    attendance_date DATE NOT NULL,\n                    time_in TIMESTAMP,\n                    time_out TIMESTAMP,\n                    status VARCHAR(50),\n                    notes TEXT,\n                    UNIQUE(employee_id, attendance_date)\n                );\n                CREATE TABLE schedules (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    week_start_date DATE NOT NULL,\n                    schedule_data JSONB\n                );\n                CREATE TABLE payslips (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    period_start DATE NOT NULL,\n                    period_end DATE NOT NULL,\n                    pay_date DATE,\n                    earnings JSONB,\n                    deductions JSONB,\n                    net_pay NUMERIC(10, 2)\n                );\n                CREATE TABLE leave_requests (\n                    id SERIAL PRIMARY KEY,\n                    employee_id VARCHAR(255) REFERENCES employees(id),\n                    leave_type VARCHAR(100),\n                    start_date DATE,\n                    end_date DATE,\n                    reason TEXT,\n                    status VARCHAR(50) DEFAULT 'Pending'\n                );\n                CREATE TABLE announcements (\n                    id SERIAL PRIMARY KEY,\n                    title VARCHAR(255) NOT NULL,\n                    content TEXT,\n                    posted_by_id VARCHAR(255) REFERENCES hr_personnel(id),\n                    posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    status VARCHAR(50) DEFAULT 'Draft'\n                );\n            `);\n\n            // Insert Sample Data\n            await client.query(`\n                INSERT INTO employees (id, first_name, last_name, position, department, branch, status, date_hired) VALUES \n                ('EMP-00123', 'Maria', 'Rodriguez', 'Senior Software Engineer', 'Technology', 'Headquarters', 'Active', '2022-01-15'),\n                ('EMP-00124', 'David', 'Lee', 'Project Manager', 'Management', 'Headquarters', 'Active', '2021-03-20'),\n                ('EMP-00125', 'Sarah', 'Chen', 'UX Designer', 'Design', 'Downtown Office', 'Active', '2023-05-10'),\n                ('EMP-00126', 'John', 'Doe', 'QA Tester', 'Technology', 'Remote', 'On Leave', '2022-08-01');\n\n                INSERT INTO hr_personnel (id, first_name, last_name, email) VALUES \n                ('HR-001', 'Olivia', 'Chen', 'olivia.chen.hr@example.com');\n\n                INSERT INTO admins (id, first_name, last_name, email) VALUES \n                ('ADM-001', 'Super', 'Admin', 'super@example.com');\n\n                INSERT INTO announcements (title, content, posted_by_id, status, posted_at) VALUES\n                ('Annual Company Retreat 2024', 'We are excited to announce that this years company retreat will be held at Lakeview Resort from October 10th to 12th. More details to follow!', 'HR-001', 'Published', '2024-08-15 10:00:00'),\n                ('New Health Insurance Policy', 'Please review the updated health insurance policy documents available on the employee portal. The new policy will be effective starting next month.', 'HR-001', 'Published', '2024-08-10 14:30:00'),\n                ('Q3 Performance Reviews', 'The Q3 performance review cycle will begin next week. Please schedule a meeting with your manager to discuss your progress.', 'HR-001', 'Draft', '2024-08-05 11:00:00');\n\n                INSERT INTO attendance (employee_id, attendance_date, time_in, time_out, status) VALUES\n                ('EMP-00123', CURRENT_DATE - 3, (CURRENT_DATE - 3) + interval '9 hour', (CURRENT_DATE - 3) + interval '17 hour', 'Present'),\n                ('EMP-00123', CURRENT_DATE - 2, (CURRENT_DATE - 2) + interval '9 hour 15 minute', (CURRENT_DATE - 2) + interval '17 hour 5 minute', 'Late'),\n                ('EMP-00123', CURRENT_DATE - 1, (CURRENT_DATE - 1) + interval '8 hour 58 minute', (CURRENT_DATE - 1) + interval '17 hour 2 minute', 'Present'),\n                ('EMP-00124', CURRENT_DATE - 1, NULL, NULL, 'Absent');\n\n\n                INSERT INTO leave_requests (employee_id, leave_type, start_date, end_date, reason, status) VALUES\n                ('EMP-00123', 'Vacation', '2024-09-01', '2024-09-05', 'Family trip to Japan.', 'Approved'),\n                ('EMP-00124', 'Sick Leave', CURRENT_DATE - 1, CURRENT_DATE - 1, 'Feeling unwell, have a fever.', 'Approved'),\n                ('EMP-00125', 'Personal Day', CURRENT_DATE + 5, CURRENT_DATE + 5, 'Important personal appointment.', 'Pending'),\n                ('EMP-00123', 'Bereavement', '2024-07-20', '2024-07-22', 'Family emergency.', 'Rejected');\n                \n                INSERT INTO schedules (employee_id, week_start_date, schedule_data) VALUES\n                ('EMP-00123', date_trunc('week', current_date), \n                    '[\n                        {\"day\": \"Monday\", \"date\": \"Aug 19\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Tuesday\", \"date\": \"Aug 20\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Wednesday\", \"date\": \"Aug 21\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Thursday\", \"date\": \"Aug 22\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Friday\", \"date\": \"Aug 23\", \"timeIn\": \"09:00\", \"timeOut\": \"17:00\", \"break\": \"1 hour\", \"hours\": 7},\n                        {\"day\": \"Saturday\", \"date\": \"Aug 24\", \"timeIn\": \"OFF\", \"timeOut\": \"OFF\", \"break\": \"-\", \"hours\": 0},\n                        {\"day\": \"Sunday\", \"date\": \"Aug 25\", \"timeIn\": \"OFF\", \"timeOut\": \"OFF\", \"break\": \"-\", \"hours\": 0}\n                    ]'::jsonb\n                );\n\n                INSERT INTO payslips (employee_id, period_start, period_end, pay_date, earnings, deductions, net_pay) VALUES\n                ('EMP-00123', (date_trunc('month', current_date) - interval '1 month'), (date_trunc('month', current_date) - interval '1 day'), current_date,\n                    '[\n                        {\"name\": \"Basic Salary\", \"amount\": 75000.00},\n                        {\"name\": \"Overtime Pay\", \"amount\": 5000.00},\n                        {\"name\": \"Transportation Allowance\", \"amount\": 2000.00}\n                    ]'::jsonb,\n                    '[\n                        {\"name\": \"Tax\", \"amount\": 8500.00},\n                        {\"name\": \"Social Security\", \"amount\": 1500.00},\n                        {\"name\": \"Health Insurance\", \"amount\": 1000.00}\n                    ]'::jsonb,\n                    61000.00\n                );\n            `);\n            \n            await client.query('COMMIT');\n            console.log(\"Database initialized successfully.\");\n        } else {\n            // console.log(\"Database schema already exists. Skipping creation.\");\n        }\n    } catch (e) {\n        if (client) {\n            await client.query('ROLLBACK');\n        }\n        console.error(\"Database initialization failed:\", e.message);\n    } finally {\n        if (client) {\n            client.release();\n        }\n    }\n}\n\n// Immediately try to initialize the DB when this module is loaded.\ninitializeDb();\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;AACD;;;;;;AAEA,IAAI;AAEJ,IAAI;IACA,gCAAgC;IAChC,6DAA6D;IAC7D,sDAAsD;IACtD,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;QACZ,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;QAC7B,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;QACjC,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;QACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,IAAI,QAAQ;QAC9C,0DAA0D;QAC1D,yBAAyB;IAC7B;IAEA,KAAK,EAAE,CAAC,SAAS,CAAC,KAAK;QACnB,QAAQ,KAAK,CAAC,mCAAmC;QACjD,QAAQ,IAAI,CAAC,CAAC;IAClB;AAEJ,EAAE,OAAO,OAAO;IACZ,QAAQ,KAAK,CAAC,gDAAgD;IAC9D,OAAO,MAAM,wCAAwC;AACzD;AAQO,MAAM,QAAQ,OAAO,MAAM;IAC9B,IAAI,CAAC,MAAM;QACP,QAAQ,KAAK,CAAC;QACd,OAAO;IACX;IACA,MAAM,QAAQ,KAAK,GAAG;IACtB,IAAI;IACJ,IAAI;QACA,SAAS,MAAM,KAAK,OAAO;QAC3B,MAAM,MAAM,MAAM,OAAO,KAAK,CAAC,MAAM;QACrC,MAAM,WAAW,KAAK,GAAG,KAAK;QAC9B,yEAAyE;QACzE,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,2FAA2F;QAC3F,OAAO;IACX,SAAU;QACN,IAAI,QAAQ;YACR,OAAO,OAAO;QAClB;IACJ;AACJ;AAMO,eAAe;IAClB,IAAI,CAAC,MAAM;QACP,QAAQ,KAAK,CAAC;QACd;IACJ;IACA,IAAI;IACJ,IAAI;QACA,SAAS,MAAM,KAAK,OAAO;IAC/B,EAAE,OAAO,OAAO;QACZ,4DAA4D;QAC5D,IAAI,QAAQ,OAAO,OAAO;QAC1B;IACJ;IAEA,IAAI;QACA,MAAM,aAAa,MAAM,OAAO,KAAK,CAAC;QACtC,MAAM,cAAc,WAAW,IAAI,CAAC,EAAE,CAAC,WAAW;QAElD,IAAI,CAAC,aAAa;YACd,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,KAAK,CAAC;YAEnB,gBAAgB;YAChB,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAuEpB,CAAC;YAED,qBAAqB;YACrB,MAAM,OAAO,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA0DpB,CAAC;YAED,MAAM,OAAO,KAAK,CAAC;YACnB,QAAQ,GAAG,CAAC;QAChB,OAAO;QACH,qEAAqE;QACzE;IACJ,EAAE,OAAO,GAAG;QACR,IAAI,QAAQ;YACR,MAAM,OAAO,KAAK,CAAC;QACvB;QACA,QAAQ,KAAK,CAAC,mCAAmC,EAAE,OAAO;IAC9D,SAAU;QACN,IAAI,QAAQ;YACR,OAAO,OAAO;QAClB;IACJ;AACJ;AAEA,mEAAmE;AACnE","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n * It acts as a centralized and server-side-only data access layer.\n * All functions include error handling to return safe default values in case of\n * a database error, preventing the application from crashing.\n */\n'use server';\n\nimport { query } from './db';\nimport { formatDistanceToNow } from 'date-fns';\n\n/**\n * Fetches all the necessary data for the HR dashboard from the database.\n * This includes employee counts, leave requests, and recent activities.\n * @returns {Promise<object>} A promise that resolves with the dashboard data.\n */\nexport async function getHRDashboardData() {\n    try {\n        const employeeCountQuery = \"SELECT COUNT(*) FROM employees WHERE status = 'Active'\";\n        const pendingLeaveQuery = \"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\";\n        const recentActivityQuery = `\n            SELECT \n                lr.id, \n                e.first_name || ' ' || e.last_name as employee_name, \n                lr.leave_type, \n                lr.start_date \n            FROM leave_requests lr\n            JOIN employees e ON lr.employee_id = e.id\n            ORDER BY lr.id DESC\n            LIMIT 5;\n        `;\n\n        const [employeeResult, pendingLeaveResult, activityResult] = await Promise.all([\n            query(employeeCountQuery),\n            query(pendingLeaveQuery),\n            query(recentActivityQuery)\n        ]);\n\n        const employeeCount = employeeResult?.rows?.[0]?.count ?? 0;\n        const pendingLeaves = pendingLeaveResult?.rows?.[0]?.count ?? 0;\n        const recentActivities = activityResult?.rows?.map(row => ({\n            id: row.id,\n            activity: `${row.employee_name} requested ${row.leave_type.toLowerCase()} leave`,\n            timestamp: formatDistanceToNow(new Date(row.start_date), { addSuffix: true }),\n            type: 'Leave'\n        })) ?? [];\n\n        return {\n            stats: [\n                { title: 'Total Employees', value: employeeCount, icon: '<Users />', change: '+2 this month' },\n                { title: 'On Time Percentage', value: '96%', icon: '<CheckCircle />', change: '-1% from last month' },\n                { title: 'Active Job Postings', value: '4', icon: '<Briefcase />', change: '+1 new posting' },\n                { title: 'Pending Leave Requests', value: pendingLeaves, icon: '<Bell />', change: `${pendingLeaves} new today` },\n            ],\n            recentActivities\n        };\n    } catch (error) {\n        console.error(\"Database Error fetching HR dashboard data:\", error);\n        return {\n            stats: [],\n            recentActivities: []\n        };\n    }\n}\n\n/**\n * Fetches past announcements from the database.\n * @returns {Promise<object[]>}\n */\nexport async function getPastAnnouncements() {\n    try {\n        const announcementsQuery = `\n            SELECT \n                a.id, \n                a.title, \n                p.first_name || ' ' || p.last_name as \"postedBy\",\n                to_char(a.posted_at, 'YYYY-MM-DD') as date,\n                a.status\n            FROM announcements a\n            JOIN hr_personnel p ON a.posted_by_id = p.id\n            ORDER BY a.posted_at DESC;\n        `;\n        const result = await query(announcementsQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching announcements:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches attendance data for a specific date.\n * @param {string} date - The date to fetch data for in 'YYYY-MM-DD' format.\n * @returns {Promise<object[]>}\n */\nexport async function getDailyAttendanceData(date) {\n    try {\n        const attendanceQuery = `\n            SELECT \n                e.id, \n                e.first_name || ' ' || e.last_name as name,\n                e.position,\n                e.branch,\n                to_char(a.time_in, 'HH24:MI') as \"timeIn\",\n                to_char(a.time_out, 'HH24:MI') as \"timeOut\",\n                a.status\n            FROM employees e\n            LEFT JOIN attendance a ON e.id = a.employee_id AND a.attendance_date = $1\n            WHERE e.status = 'Active'\n            ORDER BY e.last_name, e.first_name;\n        `;\n        const result = await query(attendanceQuery, [date]);\n        if (!result) return [];\n        return result.rows.map(row => ({\n            ...row,\n            status: row.status || 'Absent'\n        }));\n    } catch (error) {\n        console.error(\"Database Error fetching daily attendance data:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all employees from the database.\n * @returns {Promise<object[]>} A promise that resolves to an array of employee objects.\n */\nexport async function getEmployees() {\n    try {\n        const employeesQuery = `\n            SELECT \n                id,\n                first_name || ' ' || last_name as name,\n                position,\n                branch,\n                status\n            FROM employees\n            ORDER BY last_name, first_name;\n        `;\n        const result = await query(employeesQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching employees:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all leave requests from the database.\n * @returns {Promise<object[]>}\n */\nexport async function getLeaveRequests() {\n    try {\n        const leaveRequestsQuery = `\n            SELECT \n                lr.id,\n                e.first_name || ' ' || e.last_name as \"employeeName\",\n                e.id as \"employeeId\",\n                lr.leave_type,\n                to_char(lr.start_date, 'YYYY-MM-DD') as \"startDate\",\n                to_char(lr.end_date, 'YYYY-MM-DD') as \"endDate\",\n                lr.reason,\n                lr.status\n            FROM leave_requests lr\n            JOIN employees e ON lr.employee_id = e.id\n            ORDER BY \n                CASE lr.status\n                    WHEN 'Pending' THEN 1\n                    WHEN 'Approved' THEN 2\n                    WHEN 'Rejected' THEN 3\n                    ELSE 4\n                END,\n                lr.start_date ASC;\n        `;\n        const result = await query(leaveRequestsQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching leave requests:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all employees and their latest payslip status.\n * @returns {Promise<object[]>}\n */\nexport async function getEmployeesWithPayslipStatus() {\n    try {\n        const employeesQuery = `\n            SELECT \n                e.id,\n                e.first_name || ' ' || e.last_name as name,\n                e.position,\n                e.department,\n                CASE \n                    WHEN p.id IS NOT NULL THEN 'Generated'\n                    ELSE 'Pending'\n                END as \"payslipStatus\"\n            FROM employees e\n            LEFT JOIN payslips p ON e.id = p.employee_id \n                AND p.period_start >= date_trunc('month', current_date)\n                AND p.period_end <= (date_trunc('month', current_date) + interval '1 month - 1 day')\n            WHERE e.status = 'Active'\n            ORDER BY e.last_name, e.first_name;\n        `;\n        const result = await query(employeesQuery);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching employee payslip status:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches all active employees to be scheduled.\n * @returns {Promise<object[]>}\n */\nexport async function getEmployeesForScheduling() {\n    try {\n        const employeesQuery = `\n            SELECT id, first_name || ' ' || last_name as name\n            FROM employees\n            WHERE status = 'Active'\n            ORDER BY last_name, first_name;\n        `;\n        const result = await query(employeesQuery);\n        if (!result) return [];\n        return result.rows.map(emp => ({...emp, shift: '9:00 - 17:00'}));\n    } catch (error) {\n        console.error(\"Database Error fetching employees for scheduling:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches the dashboard data for a specific employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<{employee: object, announcements: object[]}>}\n */\nexport async function getEmployeeDashboardData(employeeId) {\n    try {\n        const employeeQuery = \"SELECT id as \\\"employeeId\\\", first_name || ' ' || last_name as name, position, department FROM employees WHERE id = $1\";\n        const announcementsQuery = \"SELECT id, title, content, to_char(posted_at, 'Month DD, YYYY') as date FROM announcements WHERE status = 'Published' ORDER BY posted_at DESC LIMIT 5\";\n        \n        const [employeeResult, announcementsResult] = await Promise.all([\n            query(employeeQuery, [employeeId]),\n            query(announcementsQuery)\n        ]);\n\n        return {\n            employee: employeeResult?.rows[0] || null,\n            announcements: announcementsResult?.rows || []\n        };\n    } catch (error) {\n        console.error(\"Database Error fetching employee dashboard data:\", error);\n        return { employee: null, announcements: [] };\n    }\n}\n\n/**\n * Fetches attendance data for a specific employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<{summary: object, records: object[]}>}\n */\nexport async function getAttendanceData(employeeId) {\n    const defaultData = { \n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: [] \n    };\n\n    try {\n        const attendanceQuery = `\n            SELECT \n                attendance_date, \n                to_char(time_in, 'HH24:MI') as \"time_in\", \n                to_char(time_out, 'HH24:MI') as \"time_out\", \n                status\n            FROM attendance\n            WHERE employee_id = $1 \n              AND attendance_date >= date_trunc('month', current_date)\n            ORDER BY attendance_date DESC;\n        `;\n        const leaveBalanceQuery = `\n            SELECT available_leaves FROM employees WHERE id = $1;\n        `;\n        \n        const [attendanceResult, leaveResult] = await Promise.all([\n            query(attendanceQuery, [employeeId]),\n            query(leaveBalanceQuery, [employeeId])\n        ]);\n\n        if (!attendanceResult || !leaveResult) {\n             return defaultData;\n        }\n\n        const records = attendanceResult.rows.map(r => ({\n            date: new Date(r.attendance_date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric'}),\n            timeIn: r.time_in,\n            timeOut: r.time_out,\n            status: r.status\n        }));\n        \n        let daysAttended = 0;\n        let lates = 0;\n        let absences = 0;\n        let totalHours = 0;\n\n        records.forEach(record => {\n            if (record.status === 'Present' || record.status === 'Late') {\n                daysAttended++;\n                totalHours += 8;\n            }\n            if (record.status === 'Late') {\n                lates++;\n            }\n        });\n        \n        const availableLeaves = leaveResult?.rows?.[0]?.available_leaves ?? 0;\n        const summary = { daysAttended, lates, absences, totalHours, availableLeaves };\n\n        return { summary, records };\n    } catch (error) {\n        console.error(\"Database Error fetching attendance data:\", error);\n        return defaultData;\n    }\n}\n\n/**\n * Fetches past leave requests for a given employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<object[]>}\n */\nexport async function getPastLeaveRequests(employeeId) {\n    try {\n        const pastRequestsQuery = `\n            SELECT \n                id, \n                leave_type, \n                to_char(start_date, 'YYYY-MM-DD') as \"startDate\", \n                to_char(end_date, 'YYYY-MM-DD') as \"endDate\", \n                status \n            FROM leave_requests \n            WHERE employee_id = $1 \n            ORDER BY start_date DESC;\n        `;\n        const result = await query(pastRequestsQuery, [employeeId]);\n        return result ? result.rows : [];\n    } catch (error) {\n        console.error(\"Database error fetching leave requests:\", error);\n        return [];\n    }\n}\n\n/**\n * Creates a new leave request in the database.\n * @param {object} leaveRequest - The leave request data.\n * @returns {Promise<void>}\n */\nexport async function createLeaveRequest(leaveRequest) {\n    const { employeeId, leaveType, startDate, endDate, reason } = leaveRequest;\n    try {\n        const insertQuery = `\n            INSERT INTO leave_requests (employee_id, leave_type, start_date, end_date, reason)\n            VALUES ($1, $2, $3, $4, $5);\n        `;\n        await query(insertQuery, [employeeId, leaveType, startDate, endDate, reason]);\n    } catch (error) {\n        console.error(\"Database error creating leave request:\", error);\n        throw new Error(\"Failed to create leave request in database.\");\n    }\n}\n\n/**\n * Fetches the pay periods for the specified employee.\n * @param {string} employeeId - The ID of the employee.\n * @returns {Promise<object[]>} A promise that resolves to an array of pay periods.\n */\nexport async function getPayPeriods(employeeId) {\n    try {\n        const result = await query(\n            `SELECT \n                id,\n                period_start,\n                period_end,\n                to_char(pay_date, 'Month DD, YYYY') as \"payDate\",\n                earnings,\n                deductions,\n                net_pay\n             FROM payslips \n             WHERE employee_id = $1 \n             ORDER BY period_start DESC`,\n            [employeeId]\n        );\n        if (!result) return [];\n        const formattedPeriods = result.rows.map(p => ({\n            ...p,\n            period: `${new Date(p.period_start).toLocaleDateString()} - ${new Date(p.period_end).toLocaleDateString()}`\n        }));\n        return formattedPeriods;\n    } catch (error) {\n        console.error(\"Failed to fetch pay periods:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches the schedule for a given employee for the current week.\n * @param {string} employeeId The ID of the employee.\n * @returns {Promise<object[]>}\n */\nexport async function getSchedule(employeeId) {\n    try {\n        const scheduleQuery = `\n            SELECT schedule_data \n            FROM schedules\n            WHERE employee_id = $1 \n              AND week_start_date = date_trunc('week', current_date);\n        `;\n        const result = await query(scheduleQuery, [employeeId]);\n        if (result && result.rows.length > 0 && result.rows[0].schedule_data) {\n            return result.rows[0].schedule_data;\n        }\n        return [];\n    } catch (error) {\n        console.error(\"Database error fetching schedule:\", error);\n        return [];\n    }\n}\n\n/**\n * Fetches the details for a specific report.\n * In this mock version, it returns null.\n * @param {string} id - The ID of the report to fetch.\n * @returns {Promise<null>} A promise that resolves with null.\n */\nexport async function getReportDetails(id) {\n    try {\n        // In a real application, this would query the database.\n        // For now, we return null to simulate a report not being found\n        // which demonstrates the UI's handling of this case.\n        return null;\n    } catch (error) {\n        console.error(\"Database Error fetching report details:\", error);\n        return null;\n    }\n}\n\n/**\n * Fetches all pending employee approvals from the database.\n * In this mock version, it returns a hardcoded list.\n * @returns {Promise<object[]>}\n */\nexport async function getPendingEmployeeApprovals() {\n    try {\n        // In a real application, this would query the database for employees with 'Pending Approval' status.\n        // For now, we return a hardcoded list to demonstrate the feature.\n        return [\n            { id: 'PEND-001', submittedBy: 'Olivia Chen (HR)', employeeName: 'Michael Johnson', position: 'Software Engineer', submissionDate: '2024-08-22' },\n            { id: 'PEND-002', submittedBy: 'Olivia Chen (HR)', employeeName: 'Jessica Williams', position: 'Marketing Lead', submissionDate: '2024-08-21' },\n            { id: 'PEND-003', submittedBy: 'Olivia Chen (HR)', employeeName: 'Chris Brown', position: 'IT Support', submissionDate: '2024-08-20' },\n        ];\n    } catch (error) {\n        console.error(\"Database Error fetching pending approvals:\", error);\n        return [];\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 766, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/admin/approvals/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getEmployeesWithPayslipStatus as '002dd23120083517493f1856b5ce3e27ca1098d244'} from 'ACTIONS_MODULE0'\nexport {getHRDashboardData as '0041d2031c64a9612535dcab2138817eeef5f5974c'} from 'ACTIONS_MODULE0'\nexport {getPendingEmployeeApprovals as '0067b71c9617499970f47f615b607f992a7b35b7ca'} from 'ACTIONS_MODULE0'\nexport {getPastAnnouncements as '0081b652a1ba97ae17200b5330a84c1eaee2045820'} from 'ACTIONS_MODULE0'\nexport {getLeaveRequests as '00acc9d5c2e411c4f8f6e3b8e0c4a2c3da73708524'} from 'ACTIONS_MODULE0'\nexport {getEmployees as '00c619ec02afa7d57568b4e0406ecec6a6bf21e12a'} from 'ACTIONS_MODULE0'\nexport {getEmployeesForScheduling as '00d5a8089689a75a56fcc38e7013d6855f6b64deb6'} from 'ACTIONS_MODULE0'\nexport {getAttendanceData as '40360376d7fc3085764bf086e59364b9a7bd931021'} from 'ACTIONS_MODULE0'\nexport {getPastLeaveRequests as '40885e633df6cf5d24407734484d3a4bcc7bc878e0'} from 'ACTIONS_MODULE0'\nexport {getDailyAttendanceData as '40a5b75da077963d47ebe0f5fc53e2a123ce19ae24'} from 'ACTIONS_MODULE0'\nexport {getSchedule as '40b0eb7305a3d24b1488b76f6edba4bab27c969bfe'} from 'ACTIONS_MODULE0'\nexport {getEmployeeDashboardData as '40b7b79cef1785e3c75ae17348edfad469c103bb85'} from 'ACTIONS_MODULE0'\nexport {getPayPeriods as '40e36f9c74786f4cdb1a562f7c79abdf9440a06d44'} from 'ACTIONS_MODULE0'\nexport {createLeaveRequest as '40e89487447e1f133bfc1c734cc2338626fb053105'} from 'ACTIONS_MODULE0'\nexport {getReportDetails as '40fdc91fc4350406f04eb4a57938354df3e9a76bac'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 889, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 986, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Table component and its parts.\n * This provides a set of styled components for creating tables.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root `<table>` element. */\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\n/** The `<thead>` element. */\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\n/** The `<tbody>` element. */\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\n/** The `<tfoot>` element. */\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\n/** The `<tr>` element. */\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\n/** The `<th>` element. */\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\n/** The `<td>` element. */\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\n/** The `<caption>` element. */\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;AACD;AAEA;;;;AAEA,gCAAgC,GAChC,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,2BAA2B,GAC3B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,wBAAwB,GACxB,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,6BAA6B,GAC7B,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC9D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1099, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Badge component.\n * Badges are used to highlight small pieces of information, such as a status or a category.\n * They come in different visual styles (variants).\n */\nimport * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the visual styles for the badge component.\n * Includes variants for different states like 'default', 'secondary', 'destructive', and 'outline'.\n */\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n/**\n * The Badge component itself.\n * @param {BadgeProps} props - The properties for the badge.\n * @returns {JSX.Element} The rendered badge component.\n */\nfunction Badge({ className, variant, ...props }) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;AACD;AACA;AAEA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF;;;;CAIC,GACD,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO;IAC7C,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 1154, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Button component.\n * It is a versatile button component with various styles (variants) and sizes.\n * It is built using class-variance-authority (cva) for easy customization.\n */\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the different visual styles and sizes for the button.\n * Variants include 'default', 'destructive', 'outline', 'secondary', 'ghost', 'link'.\n * Sizes include 'default', 'sm', 'lg', 'icon'.\n */\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\n/**\n * The Button component.\n * @param {ButtonProps} props - The properties for the button.\n * @returns {JSX.Element} The rendered button.\n */\nconst Button = React.forwardRef(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    // If `asChild` is true, it renders the child as the button, passing the props.\n    // Otherwise, it renders a standard <button> element.\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;AACD;AACA;AACA;AAEA;;;;;;AAEA;;;;CAIC,GACD,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF;;;;CAIC,GACD,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,+EAA+E;IAC/E,qDAAqD;IACrD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/approvals/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Pending Approvals page for the Admin portal.\n * It provides administrators with a view to manage and approve/reject new employee submissions.\n */\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    CardTitle,\n    CardDescription,\n} from \"@/components/ui/card\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, X, Eye } from \"lucide-react\";\nimport { getPendingEmployeeApprovals } from \"@/lib/data\";\n\n/**\n * Renders the admin pending approvals page.\n * @returns {JSX.Element} The pending approvals page component.\n */\nexport default async function PendingApprovalsPage() {\n    const pendingApprovals = await getPendingEmployeeApprovals();\n\n    return (\n        <div className=\"space-y-6\">\n            <h1 className=\"text-3xl font-bold font-headline\">Pending Employee Approvals</h1>\n\n            {/* Pending Approvals Table */}\n            <Card>\n                <CardHeader>\n                    <CardTitle>Incoming Employee Submissions</CardTitle>\n                    <CardDescription>Review and act on new employee profiles submitted by HR.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    {pendingApprovals.length > 0 ? (\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Submitted By</TableHead>\n                                    <TableHead>Employee Name</TableHead>\n                                    <TableHead>Position</TableHead>\n                                    <TableHead>Submission Date</TableHead>\n                                    <TableHead className=\"text-right\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {pendingApprovals.map((req) => (\n                                    <TableRow key={req.id}>\n                                        <TableCell>\n                                            <div className=\"font-medium\">{req.submittedBy}</div>\n                                        </TableCell>\n                                        <TableCell>{req.employeeName}</TableCell>\n                                        <TableCell>{req.position}</TableCell>\n                                        <TableCell>{req.submissionDate}</TableCell>\n                                        <TableCell className=\"text-right\">\n                                            <div className=\"flex gap-2 justify-end\">\n                                                    <Button variant=\"outline\" size=\"sm\">\n                                                    <Eye className=\"mr-2 h-4 w-4\" /> View Details\n                                                </Button>\n                                                <Button variant=\"outline\" size=\"sm\" className=\"text-green-600 border-green-600 hover:bg-green-100 hover:text-green-700\">\n                                                    <Check className=\"h-4 w-4\" /> Approve\n                                                </Button>\n                                                <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 border-red-600 hover:bg-red-100 hover:text-red-700\">\n                                                    <X className=\"h-4 w-4\" /> Reject\n                                                </Button>\n                                            </div>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    ) : (\n                        <p className=\"text-muted-foreground text-center\">No pending employee approvals.</p>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACD;AAOA;AAQA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;AAMe,eAAe;IAC1B,MAAM,mBAAmB,MAAM,CAAA,GAAA,kHAAA,CAAA,8BAA2B,AAAD;IAEzD,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAG,WAAU;0BAAmC;;;;;;0BAGjD,8OAAC,gIAAA,CAAA,OAAI;;kCACD,8OAAC,gIAAA,CAAA,aAAU;;0CACP,8OAAC,gIAAA,CAAA,YAAS;0CAAC;;;;;;0CACX,8OAAC,gIAAA,CAAA,kBAAe;0CAAC;;;;;;;;;;;;kCAErB,8OAAC,gIAAA,CAAA,cAAW;kCACP,iBAAiB,MAAM,GAAG,kBACvB,8OAAC,iIAAA,CAAA,QAAK;;8CACF,8OAAC,iIAAA,CAAA,cAAW;8CACR,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;0DACL,8OAAC,iIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,iIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,iIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,iIAAA,CAAA,YAAS;0DAAC;;;;;;0DACX,8OAAC,iIAAA,CAAA,YAAS;gDAAC,WAAU;0DAAa;;;;;;;;;;;;;;;;;8CAG1C,8OAAC,iIAAA,CAAA,YAAS;8CACL,iBAAiB,GAAG,CAAC,CAAC,oBACnB,8OAAC,iIAAA,CAAA,WAAQ;;8DACL,8OAAC,iIAAA,CAAA,YAAS;8DACN,cAAA,8OAAC;wDAAI,WAAU;kEAAe,IAAI,WAAW;;;;;;;;;;;8DAEjD,8OAAC,iIAAA,CAAA,YAAS;8DAAE,IAAI,YAAY;;;;;;8DAC5B,8OAAC,iIAAA,CAAA,YAAS;8DAAE,IAAI,QAAQ;;;;;;8DACxB,8OAAC,iIAAA,CAAA,YAAS;8DAAE,IAAI,cAAc;;;;;;8DAC9B,8OAAC,iIAAA,CAAA,YAAS;oDAAC,WAAU;8DACjB,cAAA,8OAAC;wDAAI,WAAU;;0EACP,8OAAC,kIAAA,CAAA,SAAM;gEAAC,SAAQ;gEAAU,MAAK;;kFAC/B,8OAAC,gMAAA,CAAA,MAAG;wEAAC,WAAU;;;;;;oEAAiB;;;;;;;0EAEpC,8OAAC,kIAAA,CAAA,SAAM;gEAAC,SAAQ;gEAAU,MAAK;gEAAK,WAAU;;kFAC1C,8OAAC,oMAAA,CAAA,QAAK;wEAAC,WAAU;;;;;;oEAAY;;;;;;;0EAEjC,8OAAC,kIAAA,CAAA,SAAM;gEAAC,SAAQ;gEAAU,MAAK;gEAAK,WAAU;;kFAC1C,8OAAC,4LAAA,CAAA,IAAC;wEAAC,WAAU;;;;;;oEAAY;;;;;;;;;;;;;;;;;;;2CAhB1B,IAAI,EAAE;;;;;;;;;;;;;;;iDAyBjC,8OAAC;4BAAE,WAAU;sCAAoC;;;;;;;;;;;;;;;;;;;;;;;AAMzE","debugId":null}}]
}