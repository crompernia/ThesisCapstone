{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Desktop/Thesis/ThesisCapstone/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Desktop/Thesis/ThesisCapstone/src/components/ui/select.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Select component and its parts.\n * A select component allows the user to choose one option from a list.\n * It is built on top of the Radix UI Select primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/select\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root component for a select dropdown. */\nconst Select = SelectPrimitive.Root\n\n/** A group of related options in a select dropdown. */\nconst SelectGroup = SelectPrimitive.Group\n\n/** The part of the select that displays the currently selected value. */\nconst SelectValue = SelectPrimitive.Value\n\n/** The trigger that opens the select dropdown. */\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\n/** The button to scroll up in the select content. */\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\n/** The button to scroll down in the select content. */\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\n/** The content of the select dropdown, containing the list of options. */\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\n/** A label for a group of options in the select dropdown. */\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\n/** An individual option in the select dropdown. */\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\n/** A separator between groups of options in the select dropdown. */\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Desktop/Thesis/ThesisCapstone/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format } from 'date-fns';\n\nexport async function getHRDashboardData() {\n    const totalEmployeesResult = await query(\"SELECT COUNT(*) FROM accounts WHERE role = 'Employee'\");\n    const totalEmployees = totalEmployeesResult.rows[0].count || '0';\n\n    const pendingLeaveRequestsResult = await query(\"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\");\n    const pendingLeaveRequests = pendingLeaveRequestsResult.rows[0].count || '0';\n\n    // Mocking some stats as there's no table for them yet\n    const stats = [\n        { title: 'Total Employees', value: String(totalEmployees), change: '' },\n        { title: 'On Time Percentage', value: `0%`, change: '' }, // No attendance data yet\n        { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n    ];\n\n    // No activity log table yet\n    return {\n        stats,\n        recentActivities: []\n    };\n}\n\n\nexport async function getPastAnnouncements() {\n    const result = await query(`\n        SELECT a.id, a.title, a.content, a.status, a.created_at, acc.first_name, acc.last_name\n        FROM announcements a\n        JOIN accounts acc ON a.posted_by = acc.id\n        ORDER BY a.created_at DESC\n    `);\n    return result.rows.map(a => ({\n        ...a,\n        postedBy: `${a.first_name} ${a.last_name}`,\n        date: format(new Date(a.created_at), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const id = 'HR-001'; // In a real app, this should come from session\n    await query(\n        'INSERT INTO announcements (title, content, status, posted_by) VALUES ($1, $2, $3, $4)',\n        [title, content, status, id]\n    );\n}\n\nexport async function deleteAnnouncement(id) {\n    await query('DELETE FROM announcements WHERE id = $1', [id]);\n}\n\nexport async function getDailyAttendanceData(date) {\n    // This is a placeholder as there is no attendance table yet.\n    return [];\n}\n\n\nexport async function getEmployees() {\n    const result = await query(`\n        SELECT id, first_name, last_name, position, branch, status\n        FROM accounts\n        WHERE role = 'Employee' AND status != 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const result = await query('SELECT * FROM accounts WHERE id = $1', [id]);\n    const employee = result.rows[0];\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const result = await query('DELETE FROM accounts WHERE id = $1', [id]);\n    return result.rowCount > 0;\n}\n\nexport async function getLeaveRequests() {\n    const result = await query(`\n        SELECT lr.id, lr.leave_type, lr.start_date, lr.end_date, lr.reason, lr.status,\n               a.id as \"employeeId\", a.first_name, a.last_name\n        FROM leave_requests lr\n        JOIN accounts a ON lr.employee_id = a.id\n        ORDER BY lr.created_at DESC\n    `);\n    return result.rows.map(lr => ({\n        id: lr.id,\n        employeeId: lr.employeeId,\n        employeeName: `${lr.first_name} ${lr.last_name}`,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        reason: lr.reason,\n        status: lr.status\n    }));\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    await query('UPDATE leave_requests SET status = $1 WHERE id = $2', [status, requestId]);\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", department, sss_number, philhealth_number, pagibig_number, tin\n        FROM accounts\n        WHERE role = 'Employee'\n    `);\n    \n    return result.rows.map(a => {\n        const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n        return {\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            department: a.department,\n            payslipStatus: 'Pending', // No payslip table yet\n            benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n        };\n    });\n}\n\nexport async function getEmployeesForScheduling() {\n    const result = await query(`\n        SELECT id, first_name, last_name FROM accounts WHERE role = 'Employee' AND status = 'Active'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        shift: '9:00 - 17:00' // Default shift\n    }));\n}\n    // Fetch Employee Data from Database\nexport async function getEmployeeDashboardData(employeeid) {\n    const result = await query('SELECT id, first_name, last_name, \"position\", department, branch, email FROM accounts WHERE id = $1', [employeeid]);\n    const employee = result.rows[0];\n    \n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n\n    const announcementsResult = await query(\"SELECT title, content, created_at FROM announcements WHERE status = 'Published' ORDER BY created_at DESC LIMIT 5\");\n    \n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            branch: employee.branch,\n            email: employee.email,\n        },\n        announcements: announcementsResult.rows.map(a => ({\n            id: a.id,\n            title: a.title,\n            content: a.content,\n            date: format(new Date(a.created_at), 'MMMM d, yyyy')\n        }))\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    // This is a placeholder as there is no attendance table yet.\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const result = await query(\n        'SELECT id, leave_type, start_date, end_date, status FROM leave_requests WHERE employee_id = $1 ORDER BY start_date DESC',\n        [employeeId]\n    );\n\n    return result.rows.map(lr => ({\n        id: lr.id,\n        leave_type: lr.leave_type,\n        startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n        endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n        status: lr.status,\n    }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    await query(\n        'INSERT INTO leave_requests (employee_id, leave_type, start_date, end_date, reason) VALUES ($1, $2, $3, $4, $5)',\n        [employeeId, leaveType, startDate, endDate, reason]\n    );\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n  // This is a placeholder as there is no payslip table yet.\n  const data = [\n    {\n      id: 1,\n      period: \"January 2025\",\n      payDate: \"2025-01-31\",\n      earnings: [\n        { name: \"Daily Rate\", amount: 885 },\n        { name: \"No. of Days\", amount: 0 },\n        { name: \"BASIC PAY\", amount: 8850},\n        { name: \"Overtime\", amount: 0 },\n        { name: \"Night Differential\", amount: 0 },\n        { name: \"RH OT\", amount: 0 },\n        { name: \"Special Holiday\", amount: 0 },\n        { name: \"SP OT\", amount: 0 },\n        { name: \"Salary Adjustment\", amount: 0 },\n        { name: \"Allowances\", amount: 0 },\n      ],\n      deductions: [\n        { name: \"Late/Undertime\", amount: 0 },\n        { name: \"SSS\", amount: 0 },\n        { name: \"Philhealth\", amount: 0 },\n        { name: \"Tax\", amount: 0 },\n        { name: \"SSS Loan\", amount: 0 },\n        { name: \"HDMF Loan\", amount: 0 },\n        { name: \"Company Deduction\", amount: 0 },\n        { name: \"Company Loan\", amount: 0 },\n      ],\n      net_pay: 0, \n    },\n    {\n      id: 2,\n      period: \"February 2025\",\n      payDate: \"2025-02-31\",\n      earnings: [\n        { name: \"Daily Rate\", amount: 0 },\n        { name: \"No. of Days\", amount: 0 },\n        { name: \"BASIC PAY\", amount: 100 },\n        { name: \"Overtime\", amount: 0 },\n        { name: \"Night Differential\", amount: 0 },\n        { name: \"RH OT\", amount: 0 },\n        { name: \"Special Holiday\", amount: 0 },\n        { name: \"SP OT\", amount: 0 },\n        { name: \"Salary Adjustment\", amount: 0 },\n        { name: \"Allowances\", amount: 0 },\n      ],\n      deductions: [\n        { name: \"Late/Undertime\", amount: 0 },\n        { name: \"SSS\", amount: 0 },\n        { name: \"Philhealth\", amount: 0 },\n        { name: \"Tax\", amount: 0 },\n        { name: \"SSS Loan\", amount: 0 },\n        { name: \"HDMF Loan\", amount: 0 },\n        { name: \"Company Deduction\", amount: 0 },\n        { name: \"Company Loan\", amount: 0 },\n      ],\n      net_pay: 0, \n    },\n]\n\n  // Calculate net_pay dynamically for each pay period\n  const excludedEarnings = [\"Daily Rate\", \"No. of Days\"];\n\ndata.forEach((period) => {\n  const totalEarnings = period.earnings.reduce((sum, e) => {\n    return excludedEarnings.includes(e.name) ? sum : sum + e.amount;\n  }, 0);\n\n  const totalDeductions = period.deductions.reduce((sum, d) => sum + d.amount, 0);\n  period.net_pay = totalEarnings - totalDeductions;\n});\n\n  return data;\n}\n\nexport async function getSchedule(employeeId) {\n    // This is a placeholder as there is no schedule table yet.\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     const result = await query(`\n        SELECT id, first_name, last_name, \"position\", date_hired\n        FROM accounts\n        WHERE status = 'Pending Approval'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        employeeName: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        submittedBy: 'Olivia Chen', // Placeholder\n        submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n    }));\n}\n\nexport async function approveEmployee(employeeId) {\n    await query(\"UPDATE accounts SET status = 'Active' WHERE id = $1\", [employeeId]);\n}\n\nexport async function rejectEmployee(employeeId) {\n    await query(\"DELETE FROM accounts WHERE id = $1\", [employeeId]);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const result = await query('SELECT first_name, last_name FROM accounts WHERE id = $1', [employeeId]);\n    const employee = result.rows[0];\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This is a placeholder as there is no reports table yet.\n    return null;\n}\n\nexport async function getHrPersonnel() {\n    const result = await query(`\n        SELECT id, first_name, last_name, \"position\", managed_branches\n        FROM accounts WHERE role = 'HR'\n    `);\n    return result.rows.map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        managed_branches: a.managed_branches || []\n    }));\n}\n\nexport async function getBranches() {\n    const result = await query('SELECT id, name, coordinates FROM branches ORDER BY name');\n    return result.rows;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    try {\n        const result = await query(\n            'INSERT INTO branches (name, coordinates) VALUES ($1, $2) RETURNING *',\n            [branchName, coordinates]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A branch with this name already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deleteBranch(branchId) {\n    // Check if any HR personnel is assigned to this branch\n    const branchResult = await query('SELECT name FROM branches WHERE id = $1', [branchId]);\n    if (branchResult.rowCount === 0) return;\n    const branchName = branchResult.rows[0].name;\n\n    const hrResult = await query(\"SELECT 1 FROM accounts WHERE role = 'HR' AND $1 = ANY(managed_branches)\", [branchName]);\n    if (hrResult.rowCount > 0) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    await query('DELETE FROM branches WHERE id = $1', [branchId]);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const result = await query(\n        'UPDATE accounts SET managed_branches = $1 WHERE id = $2',\n        [branches, hrId]\n    );\n    return { success: result.rowCount > 0 };\n}\n\n\nexport async function updateEmployee(id, data) {\n    const { firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email } = data;\n    const result = await query(`\n        UPDATE accounts SET\n            first_name = $1, last_name = $2, middle_name = $3, gender = $4,\n            date_of_birth = $5, \"position\" = $6, department = $7, branch = $8,\n            date_hired = $9, email = $10\n        WHERE id = $11\n    `, [firstName, lastName, middleName, gender, dob, position, department, branch, hireDate, email, id]);\n    \n    return { success: result.rowCount > 0, message: result.rowCount > 0 ? 'Employee updated successfully.' : 'Employee not found.' };\n}\n\n\nexport async function getPositions() {\n    const result = await query('SELECT id, title, rate FROM positions ORDER BY title');\n    return result.rows;\n}\n\nexport async function createPosition(title, rate) {\n    try {\n        const result = await query(\n            'INSERT INTO positions (title, rate) VALUES ($1, $2) RETURNING *',\n            [title, rate]\n        );\n        return result.rows[0];\n    } catch(e) {\n        if (e.code === '23505') { // unique_violation\n            throw new Error('A position with this title already exists.');\n        }\n        throw e;\n    }\n}\n\nexport async function deletePosition(positionId) {\n    const positionResult = await query('SELECT title FROM positions WHERE id = $1', [positionId]);\n    if (positionResult.rowCount === 0) return;\n    const positionTitle = positionResult.rows[0].title;\n\n    const accountResult = await query(\"SELECT 1 FROM accounts WHERE position = $1\", [positionTitle]);\n    if (accountResult.rowCount > 0) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    await query('DELETE FROM positions WHERE id = $1', [positionId]);\n}\n\nexport async function getDepartmentsForBranch(branchName) {\n    // This assumes a separate 'departments' table or similar structure.\n    // For now, let's query distinct departments from accounts in that branch.\n    const result = await query(\n        'SELECT DISTINCT department FROM accounts WHERE branch = $1 AND department IS NOT NULL ORDER BY department',\n        [branchName]\n    );\n    return result.rows.map(r => r.department);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    // This is a simplification. A real app might have a departments_positions link table.\n    // Here we get all positions associated with employees in that department.\n    const result = await query(\n        'SELECT DISTINCT \"position\" FROM accounts WHERE department = $1 AND \"position\" IS NOT NULL ORDER BY \"position\"',\n        [departmentName]\n    );\n    return result.rows.map(r => r.position);\n}\n"],"names":[],"mappings":";;;;;;IA6YsB,eAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Marxus%20Reyes/Desktop/Thesis/ThesisCapstone/src/app/dashboard/payslip/payslip-client-page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the client-side component for the Payslip page.\n * It handles the user interaction for selecting and displaying payslip details.\n */\n'use client';\n\nimport * as React from 'react';\nimport jsPDF from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FileDown, Building2 } from \"lucide-react\";\nimport { getPositions } from '@/lib/data';\n\n\n/**\n * Renders the interactive part of the employee's payslip page.\n * @param {{ payPeriods: object[], employeeName: string }} props - The props for the component.\n * @returns {JSX.Element} The payslip page client component.\n */\nexport default function PayslipClientPage({ payPeriods, employeeName }) {\n  React.useEffect(() => {\n      document.title = \"Employee Payslip\";\n      }, []);\n  const [selectedPeriod, setSelectedPeriod] = React.useState('');\n\n  React.useEffect(() => {\n    if (payPeriods && payPeriods.length > 0) {\n      setSelectedPeriod(String(payPeriods[0].id));\n    }\n  }, [payPeriods]);\n  \n  const payslipData = payPeriods?.find(p => String(p.id) === selectedPeriod);\n\n  // Calculate totals from payslip data if it exists.\n  const totalEarnings = payslipData?.earnings.reduce((sum, item) => sum + item.amount, 0) ?? 0;\n  const totalDeductions = payslipData?.deductions.reduce((sum, item) => sum + item.amount, 0) ?? 0;\n  const netPay = payslipData?.net_pay ?? 0;\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n    }).format(value);\n  };\n\n  const handleDownloadPdf = () => {\n    if (!payslipData) return;\n    \n    const doc = new jsPDF();\n\n    // Header\n    doc.setFontSize(22);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.text(\"Chumplace\", 14, 22);\n    doc.setFontSize(16);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.text(\"Payslip\", 14, 30);\n    \n    doc.setFontSize(10);\n    doc.text(`Employee: ${employeeName}`, 14, 40);\n    doc.text(`Pay Period: ${payslipData.period}`, 14, 45);\n    doc.text(`Pay Date: ${payslipData.payDate}`, 14, 50);\n\n    // Earnings Table\n    autoTable(doc, {\n      startY: 60,\n      head: [['Earnings', 'Amount']],\n      body: payslipData.earnings.map(e => [e.name, formatCurrency(e.amount)]),\n      foot: [['Gross Earnings', formatCurrency(totalEarnings)]],\n      theme: 'striped',\n      headStyles: { fillColor: [22, 163, 74] }, // Green\n      footStyles: { fillColor: [244, 244, 245], textColor: [15, 23, 42], fontStyle: 'bold' },\n    });\n\n    // Deductions Table\n    const lastTableY = doc.lastAutoTable.finalY;\n    autoTable(doc, {\n      startY: lastTableY + 10,\n      head: [['Deductions', 'Amount']],\n      body: payslipData.deductions.map(d => [d.name, `(${formatCurrency(d.amount)})`]),\n      foot: [['Total Deductions', `(${formatCurrency(totalDeductions)})`]],\n      theme: 'striped',\n      headStyles: { fillColor: [220, 38, 38] }, // Red\n      footStyles: { fillColor: [244, 244, 245], textColor: [15, 23, 42], fontStyle: 'bold' },\n    });\n    \n    // Net Pay\n    const finalY = doc.lastAutoTable.finalY;\n    doc.setFontSize(14);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.text(\"Net Pay:\", 14, finalY + 15);\n    doc.text(formatCurrency(netPay), doc.internal.pageSize.getWidth() - 14, finalY + 15, { align: 'right' });\n\n\n    doc.save(`Payslip-${employeeName.replace(' ', '-')}-${payslipData.period}.pdf`);\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-4xl mx-auto\">\n      {/* Page Header and Period Selector */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold font-headline\">My Payslip</h1>\n          <p className=\"text-muted-foreground\">View and download your payslips.</p>\n        </div>\n        <div className=\"flex gap-2 w-full sm:w-auto\">\n          {/* A dropdown to select the pay period */}\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod} disabled={!payPeriods || payPeriods.length === 0}>\n            <SelectTrigger className=\"w-full sm:w-[200px]\">\n              <SelectValue placeholder=\"Select Period\" />\n            </SelectTrigger>\n            <SelectContent>\n              {payPeriods && payPeriods.length > 0 ? (\n                payPeriods.map(p => (\n                  <SelectItem key={p.id} value={String(p.id)}>{p.period}</SelectItem>\n                ))\n              ) : (\n                <SelectItem value=\"none\" disabled>No periods available</SelectItem>\n              )}\n            </SelectContent>\n          </Select>\n          <Button onClick={handleDownloadPdf} disabled={!payslipData}>\n            <FileDown />\n            PDF\n          </Button>\n        </div>\n      </div>\n\n      {/* Payslip Details Card */}\n      <Card className=\"overflow-hidden\">\n        <CardHeader className=\"bg-muted/30 p-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n                <div className=\"flex items-center gap-2\">\n                    <Building2 />\n                    <h2 className=\"text-2xl font-bold font-headline\">CHUMTING TRADING CORPORATION</h2>\n                </div>\n                <p className=\"text-muted-foreground\">{payslipData ? `Employee Name: ${employeeName}` : 'Select a period to view payslip'}\n                </p>\n                <p className=\"text-muted-foreground\">{payslipData ? `Employee ID: ${getPositions}` : ''}</p>\n            </div>\n            {payslipData && (\n              <div className=\"text-right\">\n                  <p className=\"text-sm text-muted-foreground\">Pay Date</p>\n                  <p className=\"font-semibold\">{payslipData.payDate}</p>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        {payslipData ? (\n          <>\n            <CardContent className=\"p-6\">\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                {/* Earnings Section: Lists all income sources for the period. */}\n                <div>\n                <h3 className=\"font-semibold text-lg mb-4 text-green-600\">Earnings</h3>\n\n                <ul className=\"space-y-2\">\n                 {/* Show all earnings */}\n                  {payslipData.earnings.map((item, index) => (\n                    <li key={index} className=\"flex justify-between items-center text-sm\">\n                      <span>{item.name}</span>\n                      <span className=\"font-mono\">{formatCurrency(item.amount)}</span>\n                    </li>\n                  ))}\n                </ul>\n\n                <Separator className=\"my-4\" />\n                <div className=\"flex justify-between items-center font-semibold\">\n                  <span>Gross Earnings</span>\n                  <span className=\"font-mono\">\n                    {formatCurrency(\n                      payslipData.earnings\n                        .filter(item => ![\"Daily Rate\", \"No. of Days\"].includes(item.name))\n                        .reduce((sum, e) => sum + e.amount, 0)\n                    )}\n                  </span>\n                </div>\n              </div>\n                    {/* Deductions Section: Lists all deductions for the period. */}\n                    <div>\n                        <h3 className=\"font-semibold text-lg mb-4 text-red-600\">Deductions</h3>\n                        <ul className=\"space-y-2\">\n                        {payslipData.deductions.map((item, index) => (\n                            <li key={index} className=\"flex justify-between items-center text-sm\">\n                                <span>{item.name}</span>\n                                <span className=\"font-mono\">({formatCurrency(item.amount)})</span>\n                            </li>\n                        ))}\n                        </ul>\n                        <Separator className=\"my-4\"/>\n                        <div className=\"flex justify-between items-center font-semibold\">\n                            <span>Total Deductions</span>\n                            <span className=\"font-mono\">({formatCurrency(totalDeductions)})</span>\n                        </div>\n                    </div>\n                </div>\n            </CardContent>\n            <CardFooter className=\"bg-muted/30 p-6\">\n                {/* Net Pay Section: The final take-home pay. */}\n                <div className=\"w-full flex justify-between items-center\">\n                    <span className=\"text-xl font-bold font-headline\">Net Pay</span>\n                    <span className=\"text-2xl font-bold font-headline text-primary\">{formatCurrency(netPay)}</span>\n                </div>\n            </CardFooter>\n          </>\n        ) : (\n          <CardContent className=\"p-6 text-center text-muted-foreground\">\n            No payslip data available for the selected period.\n          </CardContent>\n        )}\n      </Card>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}