{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/select.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Select component and its parts.\n * A select component allows the user to choose one option from a list.\n * It is built on top of the Radix UI Select primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/select\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root component for a select dropdown. */\nconst Select = SelectPrimitive.Root\n\n/** A group of related options in a select dropdown. */\nconst SelectGroup = SelectPrimitive.Group\n\n/** The part of the select that displays the currently selected value. */\nconst SelectValue = SelectPrimitive.Value\n\n/** The trigger that opens the select dropdown. */\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\n/** The button to scroll up in the select content. */\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\n/** The button to scroll down in the select content. */\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\n/** The content of the select dropdown, containing the list of options. */\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\n/** A label for a group of options in the select dropdown. */\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\n/** An individual option in the select dropdown. */\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\n/** A separator between groups of options in the select dropdown. */\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Textarea component.\n * It is a multi-line text input field with styling that matches the application's theme.\n */\nimport * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\n/**\n * The Textarea component.\n * @param {React.ComponentProps<'textarea'>} props - The properties for the textarea element.\n * @returns {JSX.Element} The rendered textarea element.\n */\nconst Textarea = React.forwardRef(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACD;AAEA;;;;AAEA;;;;CAIC,GACD,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Table component and its parts.\n * This provides a set of styled components for creating tables.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root `<table>` element. */\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\n/** The `<thead>` element. */\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\n/** The `<tbody>` element. */\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\n/** The `<tfoot>` element. */\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\n/** The `<tr>` element. */\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\n/** The `<th>` element. */\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\n/** The `<td>` element. */\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\n/** The `<caption>` element. */\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;AACD;AAEA;;;;AAEA,gCAAgC,GAChC,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,2BAA2B,GAC3B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,wBAAwB,GACxB,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,6BAA6B,GAC7B,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC9D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Badge component.\n * Badges are used to highlight small pieces of information, such as a status or a category.\n * They come in different visual styles (variants).\n */\nimport * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the visual styles for the badge component.\n * Includes variants for different states like 'default', 'secondary', 'destructive', and 'outline'.\n */\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n/**\n * The Badge component itself.\n * @param {BadgeProps} props - The properties for the badge.\n * @returns {JSX.Element} The rendered badge component.\n */\nfunction Badge({ className, variant, ...props }) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;AACD;AACA;AAEA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF;;;;CAIC,GACD,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO;IAC7C,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 504, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { query } from './db';\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\nimport { Users, CheckCircle, Briefcase, Bell } from 'lucide-react';\n\nexport async function getHRDashboardData() {\n  const totalEmployeesPromise = query(\"SELECT COUNT(*) FROM accounts WHERE role = 'Employee'\");\n  const onTimePercentagePromise = query(\"SELECT COUNT(*) * 100.0 / COUNT(*) FROM attendance WHERE status = 'Present' OR status = 'Late'\");\n  const pendingLeaveRequestsPromise = query(\"SELECT COUNT(*) FROM leave_requests WHERE status = 'Pending'\");\n\n  const [totalEmployeesRes, onTimePercentageRes, pendingLeaveRequestsRes] = await Promise.all([\n    totalEmployeesPromise,\n    onTimePercentagePromise,\n    pendingLeaveRequestsPromise\n  ]);\n\n  const stats = [\n      { title: 'Total Employees', value: totalEmployeesRes.rows[0].count || '0', icon: <Users />, change: '' },\n      { title: 'On Time Percentage', value: `${parseFloat(onTimePercentageRes.rows[0]['?column?'] || 0).toFixed(0)}%`, icon: <CheckCircle />, change: '' },\n      { title: 'Active Job Postings', value: '4', icon: <Briefcase />, change: 'External API' },\n      { title: 'Pending Leave Requests', value: pendingLeaveRequestsRes.rows[0].count || '0', icon: <Bell />, change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    const res = await query(`\n        SELECT a.id, a.title, a.content, a.status, TO_CHAR(a.posted_at, 'YYYY-MM-DD') as \"date\", ac.first_name || ' ' || ac.last_name as \"postedBy\"\n        FROM announcements a\n        JOIN accounts ac ON a.posted_by_id = ac.id\n        ORDER BY a.posted_at DESC\n    `);\n    return res.rows;\n}\n\nexport async function createAnnouncement(title, content, status) {\n    // In a real app, the user ID would come from the session.\n    const hrUserId = 'HR-001';\n    await query(\n        'INSERT INTO announcements (title, content, posted_by_id, status) VALUES ($1, $2, $3, $4)',\n        [title, content, hrUserId, status]\n    );\n}\n\nexport async function deleteAnnouncement(id) {\n    await query('DELETE FROM announcements WHERE id = $1', [id]);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    const res = await query(`\n        SELECT id, first_name || ' ' || last_name AS name, position, branch, status\n        FROM accounts\n        WHERE id IN (SELECT account_id FROM attendance WHERE attendance_date = $1)\n    `, [date]);\n    return res.rows;\n}\n\n\nexport async function getEmployees() {\n    const res = await query(`\n        SELECT id, first_name || ' ' || last_name AS name, position, branch, status\n        FROM accounts\n        WHERE role = 'Employee' AND status != 'Pending Approval'\n    `);\n    return res.rows;\n}\n\nexport async function getLeaveRequests() {\n    const res = await query(`\n        SELECT \n            lr.id,\n            a.id as \"employeeId\",\n            a.first_name || ' ' || a.last_name AS \"employeeName\",\n            lr.leave_type,\n            TO_CHAR(lr.start_date, 'YYYY-MM-DD') AS \"startDate\",\n            TO_CHAR(lr.end_date, 'YYYY-MM-DD') AS \"endDate\",\n            lr.reason,\n            lr.status\n        FROM leave_requests lr\n        JOIN accounts a ON lr.account_id = a.id\n        ORDER BY\n            CASE\n                WHEN lr.status = 'Pending' THEN 1\n                WHEN lr.status = 'Approved' THEN 2\n                WHEN lr.status = 'Rejected' THEN 3\n            END,\n            lr.start_date DESC\n    `);\n    return res.rows;\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    await query('UPDATE leave_requests SET status = $1 WHERE id = $2', [status, requestId]);\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    const res = await query(`\n        SELECT \n            a.id, \n            a.first_name || ' ' || a.last_name AS \"name\", \n            a.position, \n            a.department,\n            CASE \n                WHEN p.id IS NOT NULL THEN 'Generated'\n                ELSE 'Pending'\n            END as \"payslipStatus\"\n        FROM accounts a\n        LEFT JOIN payslips p ON a.id = p.account_id \n            AND p.period_start = date_trunc('month', CURRENT_DATE)\n        WHERE a.role = 'Employee'\n    `);\n    return res.rows;\n}\n\nexport async function getEmployeesForScheduling() {\n    const res = await query(`\n        SELECT id, first_name || ' ' || last_name as name, '9:00 - 17:00' as shift\n        FROM accounts\n        WHERE role = 'Employee' AND status = 'Active'\n    `);\n    return res.rows;\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    try {\n        const res = await query(`\n            SELECT\n                id AS \"employeeId\",\n                first_name || ' ' || last_name AS \"name\",\n                position,\n                department,\n                email\n            FROM\n                accounts\n            WHERE\n                id = $1\n        `, [employeeId]);\n        \n        const announcementsRes = await query(`\n            SELECT id, title, content, TO_CHAR(posted_at, 'Month DD, YYYY') as date \n            FROM announcements \n            WHERE status = 'Published' \n            ORDER BY posted_at DESC\n        `);\n\n        return {\n            employee: res.rows[0] || { name: 'Employee Not Found' },\n            announcements: announcementsRes.rows\n        };\n    } catch (error) {\n        console.error(`Database Error fetching dashboard data for ${employeeId}:`, error);\n        throw new Error(`Failed to fetch dashboard data for employee ${employeeId}.`);\n    }\n}\n\nexport async function getAttendanceData(employeeId) {\n    const summaryQuery = `\n        SELECT\n            COUNT(*) FILTER (WHERE status = 'Present' OR status = 'Late') AS \"daysAttended\",\n            COUNT(*) FILTER (WHERE status = 'Late') AS \"lates\",\n            COUNT(*) FILTER (WHERE status = 'Absent') AS \"absences\",\n            SUM(EXTRACT(EPOCH FROM (time_out - time_in))/3600) AS \"totalHours\",\n            (SELECT available_leaves FROM accounts WHERE id = $1)\n        FROM attendance\n        WHERE account_id = $1 AND attendance_date >= date_trunc('month', CURRENT_DATE);\n    `;\n    \n    const recordsQuery = `\n        SELECT\n            TO_CHAR(attendance_date, 'YYYY-MM-DD') AS \"date\",\n            TO_CHAR(time_in, 'HH24:MI') AS \"timeIn\",\n            TO_CHAR(time_out, 'HH24:MI') AS \"timeOut\",\n            status\n        FROM attendance\n        WHERE account_id = $1\n        ORDER BY attendance_date DESC;\n    `;\n\n    const summaryRes = await query(summaryQuery, [employeeId]);\n    const recordsRes = await query(recordsQuery, [employeeId]);\n\n    return {\n        summary: summaryRes.rows[0] || { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, available_leaves: 0 },\n        records: recordsRes.rows\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    const res = await query(`\n        SELECT\n            id,\n            leave_type,\n            TO_CHAR(start_date, 'YYYY-MM-DD') AS \"startDate\",\n            TO_CHAR(end_date, 'YYYY-MM-DD') AS \"endDate\",\n            status\n        FROM\n            leave_requests\n        WHERE\n            account_id = $1\n        ORDER BY\n            start_date DESC;\n    `, [employeeId]);\n    return res.rows;\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    await query(\n        `INSERT INTO leave_requests (account_id, leave_type, start_date, end_date, reason, status)\n         VALUES ($1, $2, $3, $4, $5, 'Pending')`,\n        [employeeId, leaveType, startDate, endDate, reason]\n    );\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    const res = await query(`\n        SELECT\n            id,\n            TO_CHAR(period_start, 'Mon DD, YYYY') || ' - ' || TO_CHAR(period_end, 'Mon DD, YYYY') AS \"period\",\n            TO_CHAR(pay_date, 'YYYY-MM-DD') as \"payDate\",\n            earnings,\n            deductions,\n            net_pay\n        FROM\n            payslips\n        WHERE\n            account_id = $1\n        ORDER BY\n            period_start DESC;\n    `, [employeeId]);\n    return res.rows;\n}\n\nexport async function getSchedule(employeeId) {\n    const res = await query(`\n        SELECT\n            day_of_week AS \"day\",\n            TO_CHAR(week_start_date + (CAST(day_of_week AS INT) - 1) * INTERVAL '1 day', 'YYYY-MM-DD') AS \"date\",\n            TO_CHAR(time_in, 'HH24:MI') AS \"timeIn\",\n            TO_CHAR(time_out, 'HH24:MI') AS \"timeOut\",\n            break_duration_minutes || ' mins' AS \"break\",\n            EXTRACT(EPOCH FROM (time_out - time_in))/3600 - (break_duration_minutes / 60.0) AS \"hours\"\n        FROM\n            schedules\n        WHERE\n            account_id = $1\n        ORDER BY\n            day_of_week;\n    `, [employeeId]);\n    return res.rows;\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     const res = await query(`\n        SELECT\n            id,\n            first_name || ' ' || last_name AS \"employeeName\",\n            position,\n            'Olivia Chen' as \"submittedBy\",\n            TO_CHAR(date_hired, 'YYYY-MM-DD') AS \"submissionDate\"\n        FROM accounts\n        WHERE status = 'Pending Approval'\n    `);\n    return res.rows;\n}\n\nexport async function approveEmployee(employeeId) {\n    await query(\"UPDATE accounts SET status = 'Active' WHERE id = $1\", [employeeId]);\n}\n\nexport async function rejectEmployee(employeeId) {\n    await query('DELETE FROM accounts WHERE id = $1', [employeeId]);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const res = await query(`SELECT first_name || ' ' || last_name as name FROM accounts WHERE id = $1`, [employeeId]);\n    return res.rows[0]?.name || \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    // This function can be expanded with a reports table in the future\n    return null;\n}\n"],"names":[],"mappings":";;;;;;IAoMsB,uBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/leave/actions.js"],"sourcesContent":["/**\n * @fileoverview This file contains the server actions for the leave request page.\n */\n'use server';\n\nimport { createLeaveRequest as createLeaveRequestDb } from '@/lib/data';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\n\nconst leaveRequestSchema = z.object({\n    employeeId: z.string(),\n    leaveType: z.string(),\n    startDate: z.string(),\n    endDate: z.string(),\n    reason: z.string().optional(),\n});\n\nexport async function createLeaveRequest(prevState, formData) {\n    const validatedFields = leaveRequestSchema.safeParse({\n        employeeId: formData.get('employeeId'),\n        leaveType: formData.get('leaveType'),\n        startDate: formData.get('startDate'),\n        endDate: formData.get('endDate'),\n        reason: formData.get('reason'),\n    });\n\n    if (!validatedFields.success) {\n        return {\n            message: 'Invalid form data. Please check your entries.',\n        };\n    }\n    \n    try {\n        await createLeaveRequestDb(validatedFields.data);\n        revalidatePath('/dashboard/leave');\n        return { message: 'Leave request created successfully.' };\n    } catch (e) {\n        return { message: 'Failed to create leave request.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAiBsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Label component.\n * It is a styled text label, typically used for form fields.\n * It is built on top of the Radix UI Label primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/label\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the base styles for the label.\n */\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\n/**\n * The Label component.\n */\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF;;CAEC,GACD,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 571, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines a set of components for building forms.\n * It integrates with `react-hook-form` to provide a structured way to create\n * forms with validation and state management.\n * @see https://react-hook-form.com/\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\n/**\n * The FormProvider component from react-hook-form. It provides the form context\n * to all its children.\n */\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext(\n  {}\n)\n\n/**\n * A component that connects a form field to the form context. It uses the\n * Controller component from react-hook-form.\n */\nconst FormField = ({\n  ...props\n}) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\n/**\n * A hook to get information about the current form field, such as its ID, name,\n * and validation state. It must be used within a FormField component.\n * @returns {object} The form field state.\n */\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext(\n  {}\n)\n\n/**\n * A container for a single form item, including its label, input, description,\n * and error message.\n */\nconst FormItem = React.forwardRef(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\n/**\n * The label for a form item.\n */\nconst FormLabel = React.forwardRef(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\n/**\n * A wrapper for the form input control. It connects the input to the form\n * context for accessibility.\n */\nconst FormControl = React.forwardRef(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\n/**\n * A description for the form item, providing additional context or instructions.\n */\nconst FormDescription = React.forwardRef(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\n/**\n * A message that displays validation errors for the form item.\n */\nconst FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the AlertDialog component and its parts.\n * It is a modal dialog that interrupts the user with important content and\n * requires a response. It is built on top of the Radix UI Alert Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/alert-dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\n/**\n * The root component for an alert dialog.\n */\nconst AlertDialog = AlertDialogPrimitive.Root\n\n/**\n * The trigger that opens the alert dialog.\n */\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the alert dialog.\n */\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\n/**\n * The header of the alert dialog, containing the title and description.\n */\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\n/**\n * The footer of the alert dialog, containing action buttons.\n */\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\n/**\n * The title of the alert dialog.\n */\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\n/**\n * The description of the alert dialog.\n */\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\n/**\n * The action button that typically performs the primary action of the dialog.\n */\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\n/**\n * The cancel button that closes the dialog.\n */\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 906, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/leave/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Leave Request page for the employee dashboard.\n * It allows employees to submit leave requests and view the status of their past requests.\n */\n'use client';\n\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    CardTitle,\n    CardDescription,\n    CardFooter,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { getPastLeaveRequests } from \"@/lib/data\";\nimport { createLeaveRequest } from './actions';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\n// Hardcoded employee ID for demonstration purposes.\nconst EMPLOYEE_ID = 'EMP-00123';\n\nconst leaveRequestSchema = z.object({\n    leaveType: z.string().min(1, { message: \"Leave type is required.\" }),\n    startDate: z.string().min(1, { message: \"Start date is required.\" }),\n    endDate: z.string().min(1, { message: \"End date is required.\" }),\n    reason: z.string().optional(),\n});\n\n/**\n * Renders the employee leave request page.\n * @returns {JSX.Element} The leave request page component.\n */\nexport default function LeaveRequestPage() {\n    const { toast } = useToast();\n    const [pastRequests, setPastRequests] = React.useState([]);\n    \n    const form = useForm({\n        resolver: zodResolver(leaveRequestSchema),\n        defaultValues: {\n            leaveType: \"\",\n            startDate: \"\",\n            endDate: \"\",\n            reason: \"\",\n        }\n    });\n\n     const fetchLeaveRequests = React.useCallback(async () => {\n        const requests = await getPastLeaveRequests(EMPLOYEE_ID);\n        setPastRequests(requests);\n    }, []);\n\n    React.useEffect(() => {\n        fetchLeaveRequests();\n    }, [fetchLeaveRequests]);\n\n    const handleSubmit = async (formData) => {\n        const result = await createLeaveRequest(null, formData);\n\n        if (result?.message.includes(\"success\")) {\n            toast({\n                title: \"Success\",\n                description: \"Your leave request has been submitted.\",\n            });\n            form.reset();\n            fetchLeaveRequests(); // Re-fetch data on success\n        } else {\n            toast({\n                variant: \"destructive\",\n                title: \"Error\",\n                description: result?.message || 'An unknown error occurred.',\n            });\n        }\n    };\n\n\n    return (\n        <div className=\"space-y-6\">\n            <h1 className=\"text-3xl font-bold font-headline\">Leave Request</h1>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Leave Request Form */}\n                <div className=\"lg:col-span-1\">\n                    <Form {...form}>\n                        <form action={form.handleSubmit(data => handleSubmit(new FormData(document.getElementById('leave-request-form'))))} id=\"leave-request-form\">\n                             <Card>\n                                <CardHeader>\n                                    <CardTitle>File a Leave Request</CardTitle>\n                                    <CardDescription>Complete the form to request time off.</CardDescription>\n                                </CardHeader>\n                                <CardContent className=\"space-y-4\">\n                                     <input type=\"hidden\" name=\"employeeId\" value={EMPLOYEE_ID} />\n                                     <FormField\n                                        control={form.control}\n                                        name=\"leaveType\"\n                                        render={({ field }) => (\n                                            <FormItem>\n                                                <FormLabel>Leave Type</FormLabel>\n                                                <Select onValueChange={field.onChange} value={field.value} name=\"leaveType\">\n                                                    <FormControl>\n                                                        <SelectTrigger><SelectValue placeholder=\"Select a type\" /></SelectTrigger>\n                                                    </FormControl>\n                                                    <SelectContent>\n                                                        <SelectItem value=\"Vacation\">Vacation</SelectItem>\n                                                        <SelectItem value=\"Sick Leave\">Sick Leave</SelectItem>\n                                                        <SelectItem value=\"Personal\">Personal Day</SelectItem>\n                                                        <SelectItem value=\"Bereavement\">Bereavement</SelectItem>\n                                                    </SelectContent>\n                                                </Select>\n                                                <FormMessage />\n                                            </FormItem>\n                                        )}\n                                    />\n                                    <div className=\"grid grid-cols-2 gap-4\">\n                                        <FormField\n                                            control={form.control}\n                                            name=\"startDate\"\n                                            render={({ field }) => (\n                                                <FormItem>\n                                                    <FormLabel>Start Date</FormLabel>\n                                                    <FormControl><Input type=\"date\" {...field} name=\"startDate\" /></FormControl>\n                                                    <FormMessage />\n                                                </FormItem>\n                                            )}\n                                        />\n                                        <FormField\n                                            control={form.control}\n                                            name=\"endDate\"\n                                            render={({ field }) => (\n                                                <FormItem>\n                                                    <FormLabel>End Date</FormLabel>\n                                                    <FormControl><Input type=\"date\" {...field} name=\"endDate\" /></FormControl>\n                                                    <FormMessage />\n                                                </FormItem>\n                                            )}\n                                        />\n                                    </div>\n                                    <FormField\n                                        control={form.control}\n                                        name=\"reason\"\n                                        render={({ field }) => (\n                                            <FormItem>\n                                                <FormLabel>Reason (Optional)</FormLabel>\n                                                <FormControl>\n                                                    <Textarea placeholder=\"Please provide a brief reason for your leave.\" {...field} name=\"reason\" />\n                                                </FormControl>\n                                                <FormMessage />\n                                            </FormItem>\n                                        )}\n                                    />\n                                </CardContent>\n                                <CardFooter>\n                                    <AlertDialog>\n                                        <AlertDialogTrigger asChild>\n                                            <Button type=\"button\" className=\"w-full\">Submit Request</Button>\n                                        </AlertDialogTrigger>\n                                        <AlertDialogContent>\n                                            <AlertDialogHeader>\n                                                <AlertDialogTitle>Are you sure you want to submit?</AlertDialogTitle>\n                                                <AlertDialogDescription>\n                                                    This action cannot be undone. This will submit your leave request for approval.\n                                                </AlertDialogDescription>\n                                            </AlertDialogHeader>\n                                            <AlertDialogFooter>\n                                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                                <AlertDialogAction onClick={() => document.getElementById('leave-request-form')?.requestSubmit()}>Submit</AlertDialogAction>\n                                            </AlertDialogFooter>\n                                        </AlertDialogContent>\n                                    </AlertDialog>\n                                </CardFooter>\n                            </Card>\n                        </form>\n                    </Form>\n                </div>\n\n                {/* Past Leave Requests Table */}\n                <div className=\"lg:col-span-2\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Request History</CardTitle>\n                            <CardDescription>The status of your past leave requests.</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            {pastRequests.length > 0 ? (\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead>Type</TableHead>\n                                            <TableHead>Start Date</TableHead>\n                                            <TableHead>End Date</TableHead>\n                                            <TableHead className=\"text-right\">Status</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {pastRequests.map((req) => (\n                                            <TableRow key={req.id}>\n                                                <TableCell className=\"font-medium\">{req.leave_type}</TableCell>\n                                                <TableCell>{req.startDate}</TableCell>\n                                                <TableCell>{req.endDate}</TableCell>\n                                                <TableCell className=\"text-right\">\n                                                    <Badge variant={\n                                                        req.status === 'Approved' ? 'default' \n                                                        : req.status === 'Rejected' ? 'destructive' \n                                                        : 'secondary'\n                                                    } className={req.status === 'Approved' ? 'bg-green-500' : ''}>\n                                                        {req.status}\n                                                    </Badge>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            ) : (\n                                <p className=\"text-muted-foreground text-center\">You have no past leave requests.</p>\n                            )}\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    );\n}"],"names":[],"mappings":"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","debugId":null}}]
}