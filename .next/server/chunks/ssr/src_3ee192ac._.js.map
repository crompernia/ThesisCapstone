{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Textarea component.\n * It is a multi-line text input field with styling that matches the application's theme.\n */\nimport * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\n/**\n * The Textarea component.\n * @param {React.ComponentProps<'textarea'>} props - The properties for the textarea element.\n * @returns {JSX.Element} The rendered textarea element.\n */\nconst Textarea = React.forwardRef(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACD;AAEA;;;;AAEA;;;;CAIC,GACD,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Table component and its parts.\n * This provides a set of styled components for creating tables.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root `<table>` element. */\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\n/** The `<thead>` element. */\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\n/** The `<tbody>` element. */\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\n/** The `<tfoot>` element. */\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\n/** The `<tr>` element. */\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\n/** The `<th>` element. */\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\n/** The `<td>` element. */\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\n/** The `<caption>` element. */\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;AACD;AAEA;;;;AAEA,gCAAgC,GAChC,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,2BAA2B,GAC3B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,wBAAwB,GACxB,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,6BAA6B,GAC7B,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC9D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Badge component.\n * Badges are used to highlight small pieces of information, such as a status or a category.\n * They come in different visual styles (variants).\n */\nimport * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the visual styles for the badge component.\n * Includes variants for different states like 'default', 'secondary', 'destructive', and 'outline'.\n */\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n/**\n * The Badge component itself.\n * @param {BadgeProps} props - The properties for the badge.\n * @returns {JSX.Element} The rendered badge component.\n */\nfunction Badge({ className, variant, ...props }) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;AACD;AACA;AAEA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF;;;;CAIC,GACD,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO;IAC7C,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Label component.\n * It is a styled text label, typically used for form fields.\n * It is built on top of the Radix UI Label primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/label\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the base styles for the label.\n */\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\n/**\n * The Label component.\n */\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF;;CAEC,GACD,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20', sss_number: '00-0000000-0', philhealth_number: '00-000000000-0', pagibig_number: '0000-0000-0000', tin: '000-000-000-000' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters', coordinates: '14.5547, 121.0244' },\n    { id: 2, name: 'Downtown Office', coordinates: '14.5995, 120.9842' },\n    { id: 3, name: 'Remote', coordinates: 'N/A' },\n];\nlet MOCK_POSITIONS = [\n    { id: 1, title: 'Senior Software Engineer', rate: 50.00 },\n    { id: 2, title: 'Project Manager', rate: 55.00 },\n    { id: 3, title: 'UX Designer', rate: 45.00 },\n    { id: 4, title: 'QA Tester', rate: 35.00 },\n    { id: 5, title: 'Junior Developer', rate: 30.00 },\n    { id: 6, title: 'HR Manager', rate: 48.00 },\n    { id: 7, title: 'System Administrator', rate: 52.00 },\n];\nconst MOCK_STRUCTURE = {\n    'Headquarters': {\n        'Technology': ['Senior Software Engineer', 'Junior Developer', 'QA Tester'],\n        'Management': ['Project Manager'],\n        'Human Resources': ['HR Manager'],\n        'IT': ['System Administrator']\n    },\n    'Downtown Office': {\n        'Design': ['UX Designer'],\n        'Sales': ['Sales Associate'],\n        'Marketing': ['Marketing Specialist']\n    },\n    'Remote': {\n        'Technology': ['Senior Software Engineer', 'QA Tester'],\n        'Design': ['UX Designer']\n    }\n};\n\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${''}${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === id);\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const initialLength = MOCK_ACCOUNTS.length;\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== id);\n    return MOCK_ACCOUNTS.length < initialLength;\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => {\n            const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n            const positionDetails = MOCK_POSITIONS.find(p => p.title === a.position);\n            return {\n                id: a.id,\n                name: `${a.first_name} ${a.last_name}`,\n                position: a.position,\n                department: a.department,\n                rate: positionDetails ? positionDetails.rate : 0,\n                payslipStatus: 'Pending',\n                benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n            };\n        });\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName, coordinates };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    const branchInUse = MOCK_ACCOUNTS.some(hr => hr.managed_branches?.includes(MOCK_BRANCHES.find(b => b.id === branchId)?.name));\n    if (branchInUse) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n\nexport async function updateEmployee(id, data) {\n    const index = MOCK_ACCOUNTS.findIndex(a => a.id === id);\n    if (index === -1) {\n        return { success: false, message: 'Employee not found.' };\n    }\n\n    const updatedEmployee = {\n        ...MOCK_ACCOUNTS[index],\n        first_name: data.firstName,\n        last_name: data.lastName,\n        middle_name: data.middleName,\n        gender: data.gender,\n        date_of_birth: data.dob,\n        position: data.position,\n        department: data.department,\n        branch: data.branch,\n        date_hired: data.hireDate,\n        email: data.email,\n        // Assuming phone number is not directly on the main account object in this mock\n    };\n\n    MOCK_ACCOUNTS[index] = updatedEmployee;\n    return { success: true, message: 'Employee updated successfully.' };\n}\n\n\n// --- Positions & Rates Functions ---\n\nexport async function getPositions() {\n    // This now returns all unique position titles across all departments/branches\n    const allPositions = new Set();\n    Object.values(MOCK_STRUCTURE).forEach(departments => {\n        Object.values(departments).forEach(positions => {\n            positions.forEach(p => allPositions.add(p));\n        });\n    });\n    return Array.from(allPositions).map((title, index) => {\n        // Find original rate if possible, otherwise default\n        const originalPosition = MOCK_POSITIONS.find(p => p.title === title);\n        return {\n            id: index + 1,\n            title,\n            rate: originalPosition ? originalPosition.rate : 0\n        }\n    });\n}\n\nexport async function createPosition(title, rate) {\n    if (MOCK_POSITIONS.some(p => p.title.toLowerCase() === title.toLowerCase())) {\n        throw new Error('A position with this title already exists.');\n    }\n    const newId = MOCK_POSITIONS.length > 0 ? Math.max(...MOCK_POSITIONS.map(p => p.id)) + 1 : 1;\n    const newPosition = { id: newId, title, rate };\n    MOCK_POSITIONS.push(newPosition);\n    return newPosition;\n}\n\nexport async function deletePosition(positionId) {\n    const positionInUse = MOCK_ACCOUNTS.some(acc => acc.position === MOCK_POSITIONS.find(p => p.id === positionId)?.title);\n    if (positionInUse) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    MOCK_POSITIONS = MOCK_POSITIONS.filter(p => p.id !== positionId);\n}\n\n// --- Cascading Dropdown Functions ---\n\nexport async function getDepartmentsForBranch(branchName) {\n    if (!branchName || !MOCK_STRUCTURE[branchName]) {\n        return [];\n    }\n    return Object.keys(MOCK_STRUCTURE[branchName]);\n}\n\nexport async function getPositionsForDepartment(departmentName) {\n    for (const branch in MOCK_STRUCTURE) {\n        if (MOCK_STRUCTURE[branch][departmentName]) {\n            return MOCK_STRUCTURE[branch][departmentName];\n        }\n    }\n    return [];\n}\n\n    "],"names":[],"mappings":";;;;;;IA2EsB,uBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/hr/announcements/actions.js"],"sourcesContent":["/**\n * @fileoverview This file contains the server actions for the announcements page.\n */\n'use server';\n\nimport { createAnnouncement, deleteAnnouncement } from '@/lib/data';\nimport { revalidatePath } from 'next/cache';\n\nexport async function createAnnouncementAction(title, content, status) {\n    if (!title || !content || !status) {\n        return { success: false, message: 'Title, content, and status are required.' };\n    }\n    try {\n        await createAnnouncement(title, content, status);\n        revalidatePath('/hr/announcements');\n        revalidatePath('/dashboard');\n        return { success: true };\n    } catch (e) {\n        console.error('Failed to create announcement:', e);\n        return { success: false, message: 'Failed to create announcement.' };\n    }\n}\n\nexport async function deleteAnnouncementAction(id) {\n     if (!id) {\n        return { success: false, message: 'Announcement ID is required.' };\n    }\n    try {\n        await deleteAnnouncement(id);\n        revalidatePath('/hr/announcements');\n        revalidatePath('/dashboard');\n        return { success: true };\n    } catch (e) {\n        console.error('Failed to delete announcement:', e);\n        return { success: false, message: 'Failed to delete announcement.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAQsB,2BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/hr/announcements/actions.js"],"sourcesContent":["/**\n * @fileoverview This file contains the server actions for the announcements page.\n */\n'use server';\n\nimport { createAnnouncement, deleteAnnouncement } from '@/lib/data';\nimport { revalidatePath } from 'next/cache';\n\nexport async function createAnnouncementAction(title, content, status) {\n    if (!title || !content || !status) {\n        return { success: false, message: 'Title, content, and status are required.' };\n    }\n    try {\n        await createAnnouncement(title, content, status);\n        revalidatePath('/hr/announcements');\n        revalidatePath('/dashboard');\n        return { success: true };\n    } catch (e) {\n        console.error('Failed to create announcement:', e);\n        return { success: false, message: 'Failed to create announcement.' };\n    }\n}\n\nexport async function deleteAnnouncementAction(id) {\n     if (!id) {\n        return { success: false, message: 'Announcement ID is required.' };\n    }\n    try {\n        await deleteAnnouncement(id);\n        revalidatePath('/hr/announcements');\n        revalidatePath('/dashboard');\n        return { success: true };\n    } catch (e) {\n        console.error('Failed to delete announcement:', e);\n        return { success: false, message: 'Failed to delete announcement.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAuBsB,2BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the AlertDialog component and its parts.\n * It is a modal dialog that interrupts the user with important content and\n * requires a response. It is built on top of the Radix UI Alert Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/alert-dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\n/**\n * The root component for an alert dialog.\n */\nconst AlertDialog = AlertDialogPrimitive.Root\n\n/**\n * The trigger that opens the alert dialog.\n */\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the alert dialog.\n */\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\n/**\n * The header of the alert dialog, containing the title and description.\n */\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\n/**\n * The footer of the alert dialog, containing action buttons.\n */\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\n/**\n * The title of the alert dialog.\n */\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\n/**\n * The description of the alert dialog.\n */\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\n/**\n * The action button that typically performs the primary action of the dialog.\n */\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\n/**\n * The cancel button that closes the dialog.\n */\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/hr/announcements/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Announcements page for the HR portal.\n * It provides HR personnel with tools to create, view, and manage company-wide announcements.\n */\n'use client';\nimport * as React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MoreHorizontal, Trash2 } from \"lucide-react\";\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { getPastAnnouncements } from \"@/lib/data\";\nimport { createAnnouncementAction, deleteAnnouncementAction } from './actions';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n    AlertDialog,\n    AlertDialogAction,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\n/**\n * Renders the HR announcements management page.\n * Allows creating, viewing, and managing company-wide announcements.\n * @returns {JSX.Element} The announcements page component.\n */\nexport default function AnnouncementsPage() {\n    const { toast } = useToast();\n    const [pastAnnouncements, setPastAnnouncements] = React.useState([]);\n    const [title, setTitle] = React.useState('');\n    const [content, setContent] = React.useState('');\n    const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n    const fetchAnnouncements = React.useCallback(async () => {\n        const data = await getPastAnnouncements();\n        setPastAnnouncements(data);\n    }, []);\n\n    React.useEffect(() => {\n        fetchAnnouncements();\n    }, [fetchAnnouncements]);\n\n    const handleSubmit = async (status) => {\n        setIsSubmitting(true);\n        const result = await createAnnouncementAction(title, content, status);\n        if (result?.success) {\n            toast({\n                title: 'Success',\n                description: `Announcement has been ${status === 'Published' ? 'posted' : 'saved as draft'}.`,\n            });\n            setTitle('');\n            setContent('');\n            fetchAnnouncements();\n        } else {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: result?.message || 'Failed to create announcement.',\n            });\n        }\n        setIsSubmitting(false);\n    };\n\n    const handleDelete = async (id) => {\n        const result = await deleteAnnouncementAction(id);\n        if (result?.success) {\n            toast({\n                title: 'Success',\n                description: 'Announcement has been deleted.',\n            });\n            fetchAnnouncements();\n        } else {\n             toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: result?.message || 'Failed to delete announcement.',\n            });\n        }\n    };\n\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-3xl font-bold font-headline\">Company Announcements</h1>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* New Announcement Form */}\n        <div className=\"lg:col-span-1\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>New Announcement</CardTitle>\n                    <CardDescription>Create a new announcement for all employees.</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"announcement-title\">Title</Label>\n                        <Input id=\"announcement-title\" placeholder=\"Enter the title\" value={title} onChange={(e) => setTitle(e.target.value)} disabled={isSubmitting} />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"announcement-content\">Content</Label>\n                        <Textarea id=\"announcement-content\" placeholder=\"Type your announcement here...\" className=\"min-h-[200px]\" value={content} onChange={(e) => setContent(e.target.value)} disabled={isSubmitting}/>\n                    </div>\n                </CardContent>\n                <CardFooter className=\"flex justify-between\">\n                    <Button variant=\"outline\" onClick={() => handleSubmit('Draft')} disabled={isSubmitting || !title || !content}>Save Draft</Button>\n                    <Button onClick={() => handleSubmit('Published')} disabled={isSubmitting || !title || !content}>Post Announcement</Button>\n                </CardFooter>\n            </Card>\n        </div>\n\n        {/* Past Announcements Table */}\n        <div className=\"lg:col-span-2\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Past Announcements</CardTitle>\n                    <CardDescription>Manage and view previous announcements.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    {pastAnnouncements.length > 0 ? (\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead>Title</TableHead>\n                                    <TableHead>Posted By</TableHead>\n                                    <TableHead>Date</TableHead>\n                                    <TableHead>Status</TableHead>\n                                    <TableHead className=\"text-right\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {pastAnnouncements.map(a => (\n                                    <TableRow key={a.id}>\n                                        <TableCell className=\"font-medium\">{a.title}</TableCell>\n                                        <TableCell>{a.postedBy}</TableCell>\n                                        <TableCell>{a.date}</TableCell>\n                                        <TableCell><Badge variant={a.status === 'Published' ? 'default' : 'secondary'} className={a.status === 'Published' ? 'bg-blue-500' : ''}>{a.status}</Badge></TableCell>\n                                        <TableCell className=\"text-right\">\n                                            <AlertDialog>\n                                                <AlertDialogTrigger asChild>\n                                                    <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive\">\n                                                        <Trash2 className=\"h-4 w-4\" />\n                                                    </Button>\n                                                </AlertDialogTrigger>\n                                                <AlertDialogContent>\n                                                    <AlertDialogHeader>\n                                                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                                        <AlertDialogDescription>\n                                                            This action cannot be undone. This will permanently delete the announcement.\n                                                        </AlertDialogDescription>\n                                                    </AlertDialogHeader>\n                                                    <AlertDialogFooter>\n                                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                                        <AlertDialogAction onClick={() => handleDelete(a.id)}>Delete</AlertDialogAction>\n                                                    </AlertDialogFooter>\n                                                </AlertDialogContent>\n                                            </AlertDialog>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    ) : (\n                        <p className=\"text-muted-foreground text-center\">No past announcements found.</p>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AAED;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjCA;;;;;;;;;;;;;;;;AAkDe,SAAS;IACpB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE,EAAE;IACnE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IAC7C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IAEvD,MAAM,qBAAqB,CAAA,GAAA,qMAAA,CAAA,cAAiB,AAAD,EAAE;QACzC,MAAM,OAAO,MAAM,CAAA,GAAA,kJAAA,CAAA,uBAAoB,AAAD;QACtC,qBAAqB;IACzB,GAAG,EAAE;IAEL,CAAA,GAAA,qMAAA,CAAA,YAAe,AAAD,EAAE;QACZ;IACJ,GAAG;QAAC;KAAmB;IAEvB,MAAM,eAAe,OAAO;QACxB,gBAAgB;QAChB,MAAM,SAAS,MAAM,CAAA,GAAA,yKAAA,CAAA,2BAAwB,AAAD,EAAE,OAAO,SAAS;QAC9D,IAAI,QAAQ,SAAS;YACjB,MAAM;gBACF,OAAO;gBACP,aAAa,CAAC,sBAAsB,EAAE,WAAW,cAAc,WAAW,iBAAiB,CAAC,CAAC;YACjG;YACA,SAAS;YACT,WAAW;YACX;QACJ,OAAO;YACH,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,aAAa,QAAQ,WAAW;YACpC;QACJ;QACA,gBAAgB;IACpB;IAEA,MAAM,eAAe,OAAO;QACxB,MAAM,SAAS,MAAM,CAAA,GAAA,yKAAA,CAAA,2BAAwB,AAAD,EAAE;QAC9C,IAAI,QAAQ,SAAS;YACjB,MAAM;gBACF,OAAO;gBACP,aAAa;YACjB;YACA;QACJ,OAAO;YACF,MAAM;gBACH,SAAS;gBACT,OAAO;gBACP,aAAa,QAAQ,WAAW;YACpC;QACJ;IACJ;IAGF,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAmC;;;;;;0BAEjD,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;kCACX,cAAA,8OAAC,gIAAA,CAAA,OAAI;;8CACD,8OAAC,gIAAA,CAAA,aAAU;;sDACP,8OAAC,gIAAA,CAAA,YAAS;sDAAC;;;;;;sDACX,8OAAC,gIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAErB,8OAAC,gIAAA,CAAA,cAAW;oCAAC,WAAU;;sDACnB,8OAAC;4CAAI,WAAU;;8DACX,8OAAC,iIAAA,CAAA,QAAK;oDAAC,SAAQ;8DAAqB;;;;;;8DACpC,8OAAC,iIAAA,CAAA,QAAK;oDAAC,IAAG;oDAAqB,aAAY;oDAAkB,OAAO;oDAAO,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oDAAG,UAAU;;;;;;;;;;;;sDAEpI,8OAAC;4CAAI,WAAU;;8DACX,8OAAC,iIAAA,CAAA,QAAK;oDAAC,SAAQ;8DAAuB;;;;;;8DACtC,8OAAC,oIAAA,CAAA,WAAQ;oDAAC,IAAG;oDAAuB,aAAY;oDAAiC,WAAU;oDAAgB,OAAO;oDAAS,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;oDAAG,UAAU;;;;;;;;;;;;;;;;;;8CAG1L,8OAAC,gIAAA,CAAA,aAAU;oCAAC,WAAU;;sDAClB,8OAAC,kIAAA,CAAA,SAAM;4CAAC,SAAQ;4CAAU,SAAS,IAAM,aAAa;4CAAU,UAAU,gBAAgB,CAAC,SAAS,CAAC;sDAAS;;;;;;sDAC9G,8OAAC,kIAAA,CAAA,SAAM;4CAAC,SAAS,IAAM,aAAa;4CAAc,UAAU,gBAAgB,CAAC,SAAS,CAAC;sDAAS;;;;;;;;;;;;;;;;;;;;;;;kCAM5G,8OAAC;wBAAI,WAAU;kCACX,cAAA,8OAAC,gIAAA,CAAA,OAAI;;8CACD,8OAAC,gIAAA,CAAA,aAAU;;sDACP,8OAAC,gIAAA,CAAA,YAAS;sDAAC;;;;;;sDACX,8OAAC,gIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAErB,8OAAC,gIAAA,CAAA,cAAW;8CACP,kBAAkB,MAAM,GAAG,kBACxB,8OAAC,iIAAA,CAAA,QAAK;;0DACF,8OAAC,iIAAA,CAAA,cAAW;0DACR,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;sEACL,8OAAC,iIAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,8OAAC,iIAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,8OAAC,iIAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,8OAAC,iIAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,8OAAC,iIAAA,CAAA,YAAS;4DAAC,WAAU;sEAAa;;;;;;;;;;;;;;;;;0DAG1C,8OAAC,iIAAA,CAAA,YAAS;0DACL,kBAAkB,GAAG,CAAC,CAAA,kBACnB,8OAAC,iIAAA,CAAA,WAAQ;;0EACL,8OAAC,iIAAA,CAAA,YAAS;gEAAC,WAAU;0EAAe,EAAE,KAAK;;;;;;0EAC3C,8OAAC,iIAAA,CAAA,YAAS;0EAAE,EAAE,QAAQ;;;;;;0EACtB,8OAAC,iIAAA,CAAA,YAAS;0EAAE,EAAE,IAAI;;;;;;0EAClB,8OAAC,iIAAA,CAAA,YAAS;0EAAC,cAAA,8OAAC,iIAAA,CAAA,QAAK;oEAAC,SAAS,EAAE,MAAM,KAAK,cAAc,YAAY;oEAAa,WAAW,EAAE,MAAM,KAAK,cAAc,gBAAgB;8EAAK,EAAE,MAAM;;;;;;;;;;;0EAClJ,8OAAC,iIAAA,CAAA,YAAS;gEAAC,WAAU;0EACjB,cAAA,8OAAC,2IAAA,CAAA,cAAW;;sFACR,8OAAC,2IAAA,CAAA,qBAAkB;4EAAC,OAAO;sFACvB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gFAAC,SAAQ;gFAAQ,MAAK;gFAAO,WAAU;0FAC1C,cAAA,8OAAC,0MAAA,CAAA,SAAM;oFAAC,WAAU;;;;;;;;;;;;;;;;sFAG1B,8OAAC,2IAAA,CAAA,qBAAkB;;8FACf,8OAAC,2IAAA,CAAA,oBAAiB;;sGACd,8OAAC,2IAAA,CAAA,mBAAgB;sGAAC;;;;;;sGAClB,8OAAC,2IAAA,CAAA,yBAAsB;sGAAC;;;;;;;;;;;;8FAI5B,8OAAC,2IAAA,CAAA,oBAAiB;;sGACd,8OAAC,2IAAA,CAAA,oBAAiB;sGAAC;;;;;;sGACnB,8OAAC,2IAAA,CAAA,oBAAiB;4FAAC,SAAS,IAAM,aAAa,EAAE,EAAE;sGAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDArB3D,EAAE,EAAE;;;;;;;;;;;;;;;6DA+B/B,8OAAC;wCAAE,WAAU;kDAAoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQzE","debugId":null}}]
}