{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Card component and its parts.\n * A card is a flexible and extensible content container. It includes options for\n * headers, footers, titles, descriptions, and content.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The main container for the card component.\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * The header section of the card. Typically contains the title and description.\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * The title of the card. Should be placed inside a CardHeader.\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * A description for the card. Should be placed inside a CardHeader.\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * The main content area of the card.\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n_The footer section of the card.\n*/\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACD;AAEA;;;;AAEA;;CAEC,GACD,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACtD,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB;;CAEC,GACD,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB;;CAEC,GACD,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB;;CAEC,GACD,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACjE,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B;;AAEA,GACA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Table component and its parts.\n * This provides a set of styled components for creating tables.\n */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/** The root `<table>` element. */\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\n/** The `<thead>` element. */\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\n/** The `<tbody>` element. */\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\n/** The `<tfoot>` element. */\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\n/** The `<tr>` element. */\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\n/** The `<th>` element. */\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\n/** The `<td>` element. */\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\n/** The `<caption>` element. */\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;;;;;AACD;AAEA;;;;AAEA,gCAAgC,GAChC,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,2BAA2B,GAC3B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,2BAA2B,GAC3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,wBAAwB,GACxB,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,wBAAwB,GACxB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC3D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,6BAA6B,GAC7B,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC9D,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Badge component.\n * Badges are used to highlight small pieces of information, such as a status or a category.\n * They come in different visual styles (variants).\n */\nimport * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the visual styles for the badge component.\n * Includes variants for different states like 'default', 'secondary', 'destructive', and 'outline'.\n */\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n/**\n * The Badge component itself.\n * @param {BadgeProps} props - The properties for the badge.\n * @returns {JSX.Element} The rendered badge component.\n */\nfunction Badge({ className, variant, ...props }) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;AACD;AACA;AAEA;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF;;;;CAIC,GACD,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO;IAC7C,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Dialog component and its parts.\n * A dialog is a window overlaid on either the primary window or another dialog window.\n * It is built on top of the Radix UI Dialog primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/dialog\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The root component for a dialog.\n */\nconst Dialog = DialogPrimitive.Root\n\n/**\n * The trigger that opens the dialog.\n */\nconst DialogTrigger = DialogPrimitive.Trigger\n\n/**\n * A portal that renders its children into a new stacking context.\n */\nconst DialogPortal = DialogPrimitive.Portal\n\n/**\n * A button that closes the dialog.\n */\nconst DialogClose = DialogPrimitive.Close\n\n/**\n * A semi-transparent overlay that is rendered behind the dialog.\n */\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\n/**\n * The main content of the dialog.\n */\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\n/**\n * The header of the dialog, containing the title and description.\n */\nconst DialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\n/**\n * The footer of the dialog, typically containing action buttons.\n */\nconst DialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\n/**\n * The title of the dialog.\n */\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\n/**\n * The description of the dialog.\n */\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC;;CAEC,GACD,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C;;CAEC,GACD,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C;;CAEC,GACD,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC;;CAEC,GACD,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC/D,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D;;CAEC,GACD,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACzE,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D;;CAEC,GACD,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACJ,iBACC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B;;CAEC,GACD,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACJ,iBACC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B;;CAEC,GACD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC7D,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D;;CAEC,GACD,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACnE,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 429, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Checkbox component.\n * A checkbox allows the user to select one or more options from a set.\n * It is built on top of the Radix UI Checkbox primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/checkbox\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * The Checkbox component.\n */\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1D,8OAAC,oKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,oKAAA,CAAA,YAA2B;YAC1B,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE;sBAEd,cAAA,8OAAC,oMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,oKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.jsx"],"sourcesContent":["/**\n * @fileoverview Defines the Label component.\n * It is a styled text label, typically used for form fields.\n * It is built on top of the Radix UI Label primitive.\n * @see https://www.radix-ui.com/primitives/docs/components/label\n */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Defines the base styles for the label.\n */\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\n/**\n * The Label component.\n */\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;;AAGD;AACA;AACA;AAEA;AANA;;;;;;AAQA;;CAEC,GACD,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF;;CAEC,GACD,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBACvD,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20', sss_number: '00-0000000-0', philhealth_number: '00-000000000-0', pagibig_number: '0000-0000-0000', tin: '000-000-000-000' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters', coordinates: '14.5547, 121.0244' },\n    { id: 2, name: 'Downtown Office', coordinates: '14.5995, 120.9842' },\n    { id: 3, name: 'Remote', coordinates: 'N/A' },\n];\nlet MOCK_POSITIONS = [\n    { id: 1, title: 'Senior Software Engineer', rate: 50.00 },\n    { id: 2, title: 'Project Manager', rate: 55.00 },\n    { id: 3, title: 'UX Designer', rate: 45.00 },\n    { id: 4, title: 'QA Tester', rate: 35.00 },\n    { id: 5, title: 'Junior Developer', rate: 30.00 },\n    { id: 6, title: 'HR Manager', rate: 48.00 },\n    { id: 7, title: 'System Administrator', rate: 52.00 },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${''}${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === id);\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const initialLength = MOCK_ACCOUNTS.length;\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== id);\n    return MOCK_ACCOUNTS.length < initialLength;\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => {\n            const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n            return {\n                id: a.id,\n                name: `${a.first_name} ${a.last_name}`,\n                position: a.position,\n                department: a.department,\n                payslipStatus: 'Pending',\n                benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n            };\n        });\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName, coordinates };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    const branchInUse = MOCK_ACCOUNTS.some(hr => hr.managed_branches?.includes(MOCK_BRANCHES.find(b => b.id === branchId)?.name));\n    if (branchInUse) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n\nexport async function updateEmployee(id, data) {\n    const index = MOCK_ACCOUNTS.findIndex(a => a.id === id);\n    if (index === -1) {\n        return { success: false, message: 'Employee not found.' };\n    }\n\n    const updatedEmployee = {\n        ...MOCK_ACCOUNTS[index],\n        first_name: data.firstName,\n        last_name: data.lastName,\n        middle_name: data.middleName,\n        gender: data.gender,\n        date_of_birth: data.dob,\n        position: data.position,\n        department: data.department,\n        branch: data.branch,\n        date_hired: data.hireDate,\n        email: data.email,\n        // Assuming phone number is not directly on the main account object in this mock\n    };\n\n    MOCK_ACCOUNTS[index] = updatedEmployee;\n    return { success: true, message: 'Employee updated successfully.' };\n}\n\n\n// --- Positions & Rates Functions ---\n\nexport async function getPositions() {\n    return MOCK_POSITIONS;\n}\n\nexport async function createPosition(title, rate) {\n    if (MOCK_POSITIONS.some(p => p.title.toLowerCase() === title.toLowerCase())) {\n        throw new Error('A position with this title already exists.');\n    }\n    const newId = MOCK_POSITIONS.length > 0 ? Math.max(...MOCK_POSITIONS.map(p => p.id)) + 1 : 1;\n    const newPosition = { id: newId, title, rate };\n    MOCK_POSITIONS.push(newPosition);\n    return newPosition;\n}\n\nexport async function deletePosition(positionId) {\n    const positionInUse = MOCK_ACCOUNTS.some(acc => acc.position === MOCK_POSITIONS.find(p => p.id === positionId)?.title);\n    if (positionInUse) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    MOCK_POSITIONS = MOCK_POSITIONS.filter(p => p.id !== positionId);\n}\n"],"names":[],"mappings":";;;;;;IAqQsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20', sss_number: '00-0000000-0', philhealth_number: '00-000000000-0', pagibig_number: '0000-0000-0000', tin: '000-000-000-000' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters', coordinates: '14.5547, 121.0244' },\n    { id: 2, name: 'Downtown Office', coordinates: '14.5995, 120.9842' },\n    { id: 3, name: 'Remote', coordinates: 'N/A' },\n];\nlet MOCK_POSITIONS = [\n    { id: 1, title: 'Senior Software Engineer', rate: 50.00 },\n    { id: 2, title: 'Project Manager', rate: 55.00 },\n    { id: 3, title: 'UX Designer', rate: 45.00 },\n    { id: 4, title: 'QA Tester', rate: 35.00 },\n    { id: 5, title: 'Junior Developer', rate: 30.00 },\n    { id: 6, title: 'HR Manager', rate: 48.00 },\n    { id: 7, title: 'System Administrator', rate: 52.00 },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${''}${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === id);\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const initialLength = MOCK_ACCOUNTS.length;\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== id);\n    return MOCK_ACCOUNTS.length < initialLength;\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => {\n            const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n            return {\n                id: a.id,\n                name: `${a.first_name} ${a.last_name}`,\n                position: a.position,\n                department: a.department,\n                payslipStatus: 'Pending',\n                benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n            };\n        });\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName, coordinates };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    const branchInUse = MOCK_ACCOUNTS.some(hr => hr.managed_branches?.includes(MOCK_BRANCHES.find(b => b.id === branchId)?.name));\n    if (branchInUse) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n\nexport async function updateEmployee(id, data) {\n    const index = MOCK_ACCOUNTS.findIndex(a => a.id === id);\n    if (index === -1) {\n        return { success: false, message: 'Employee not found.' };\n    }\n\n    const updatedEmployee = {\n        ...MOCK_ACCOUNTS[index],\n        first_name: data.firstName,\n        last_name: data.lastName,\n        middle_name: data.middleName,\n        gender: data.gender,\n        date_of_birth: data.dob,\n        position: data.position,\n        department: data.department,\n        branch: data.branch,\n        date_hired: data.hireDate,\n        email: data.email,\n        // Assuming phone number is not directly on the main account object in this mock\n    };\n\n    MOCK_ACCOUNTS[index] = updatedEmployee;\n    return { success: true, message: 'Employee updated successfully.' };\n}\n\n\n// --- Positions & Rates Functions ---\n\nexport async function getPositions() {\n    return MOCK_POSITIONS;\n}\n\nexport async function createPosition(title, rate) {\n    if (MOCK_POSITIONS.some(p => p.title.toLowerCase() === title.toLowerCase())) {\n        throw new Error('A position with this title already exists.');\n    }\n    const newId = MOCK_POSITIONS.length > 0 ? Math.max(...MOCK_POSITIONS.map(p => p.id)) + 1 : 1;\n    const newPosition = { id: newId, title, rate };\n    MOCK_POSITIONS.push(newPosition);\n    return newPosition;\n}\n\nexport async function deletePosition(positionId) {\n    const positionInUse = MOCK_ACCOUNTS.some(acc => acc.position === MOCK_POSITIONS.find(p => p.id === positionId)?.title);\n    if (positionInUse) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    MOCK_POSITIONS = MOCK_POSITIONS.filter(p => p.id !== positionId);\n}\n"],"names":[],"mappings":";;;;;;IAgRsB,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.js"],"sourcesContent":["/**\n * @fileoverview This file contains all the functions for fetching data from the database.\n */\n'use server';\n\nimport { format, formatDistanceToNow, addDays, subDays } from 'date-fns';\n\n// --- MOCK DATA ---\n\nlet MOCK_ACCOUNTS = [\n    { id: 'EMP-00123', first_name: 'Maria', last_name: 'Rodriguez', email: 'maria.rodriguez@example.com', password: 'password', role: 'Employee', position: 'Senior Software Engineer', department: 'Technology', branch: 'Headquarters', status: 'Active', date_hired: '2022-01-15', available_leaves: 12, gender: 'Female', date_of_birth: '1990-05-20', sss_number: '00-0000000-0', philhealth_number: '00-000000000-0', pagibig_number: '0000-0000-0000', tin: '000-000-000-000' },\n    { id: 'EMP-00124', first_name: 'David', last_name: 'Lee', email: 'david.lee@example.com', password: 'password', role: 'Employee', position: 'Project Manager', department: 'Management', branch: 'Headquarters', status: 'Active', date_hired: '2021-03-20', available_leaves: 15, gender: 'Male', date_of_birth: '1988-11-12' },\n    { id: 'EMP-00125', first_name: 'Sarah', last_name: 'Chen', email: 'sarah.chen@example.com', password: 'password', role: 'Employee', position: 'UX Designer', department: 'Design', branch: 'Downtown Office', status: 'Active', date_hired: '2023-05-10', available_leaves: 10, gender: 'Female', date_of_birth: '1995-02-25' },\n    { id: 'EMP-00126', first_name: 'John', last_name: 'Doe', email: 'john.doe@example.com', password: 'password', role: 'Employee', position: 'QA Tester', department: 'Technology', branch: 'Remote', status: 'On Leave', date_hired: '2022-08-01', available_leaves: 5, gender: 'Male', date_of_birth: '1992-07-30' },\n    { id: 'HR-001', first_name: 'Olivia', last_name: 'Chen', email: 'olivia.chen.hr@example.com', password: 'password', role: 'HR', position: 'HR Manager', department: 'Human Resources', branch: 'Headquarters', status: 'Active', date_hired: '2020-01-01', available_leaves: 15, gender: 'Female', date_of_birth: '1985-09-05', managed_branches: ['Headquarters', 'Downtown Office'] },\n    { id: 'ADM-001', first_name: 'Super', last_name: 'Admin', email: 'super@example.com', password: 'password', role: 'Admin', position: 'System Administrator', department: 'IT', branch: 'Headquarters', status: 'Active', date_hired: '2019-01-01', available_leaves: 20, gender: 'Male', date_of_birth: '1980-01-01' },\n    { id: 'EMP-PENDING-01', first_name: 'Michael', last_name: 'Brown', email: 'michael.brown@example.com', password: 'password', role: 'Employee', position: 'Junior Developer', department: 'Technology', branch: 'Headquarters', status: 'Pending Approval', date_hired: '2024-01-01', available_leaves: 15, gender: 'Male', date_of_birth: '1998-06-15' },\n];\nlet MOCK_BRANCHES = [\n    { id: 1, name: 'Headquarters', coordinates: '14.5547, 121.0244' },\n    { id: 2, name: 'Downtown Office', coordinates: '14.5995, 120.9842' },\n    { id: 3, name: 'Remote', coordinates: 'N/A' },\n];\nlet MOCK_POSITIONS = [\n    { id: 1, title: 'Senior Software Engineer', rate: 50.00 },\n    { id: 2, title: 'Project Manager', rate: 55.00 },\n    { id: 3, title: 'UX Designer', rate: 45.00 },\n    { id: 4, title: 'QA Tester', rate: 35.00 },\n    { id: 5, title: 'Junior Developer', rate: 30.00 },\n    { id: 6, title: 'HR Manager', rate: 48.00 },\n    { id: 7, title: 'System Administrator', rate: 52.00 },\n];\nlet MOCK_ANNOUNCEMENTS = [];\nlet MOCK_LEAVE_REQUESTS = [];\nlet MOCK_SCHEDULES = [];\nlet MOCK_ATTENDANCE = [];\nlet MOCK_PAYSLIPS = [];\n\n// --- END MOCK DATA ---\n\nexport async function getHRDashboardData() {\n  const totalEmployees = MOCK_ACCOUNTS.filter(a => a.role === 'Employee').length;\n  const pendingLeaveRequests = MOCK_LEAVE_REQUESTS.filter(lr => lr.status === 'Pending').length;\n\n  const stats = [\n      { title: 'Total Employees', value: String(totalEmployees), change: '' },\n      { title: 'On Time Percentage', value: `0%`, change: '' },\n      { title: 'Active Job Postings', value: '4', change: 'External API' },\n      { title: 'Pending Leave Requests', value: String(pendingLeaveRequests), change: '' },\n  ];\n\n  return {\n    stats,\n    recentActivities: []\n  };\n}\n\nexport async function getPastAnnouncements() {\n    return MOCK_ANNOUNCEMENTS.map(a => {\n        const postedBy = MOCK_ACCOUNTS.find(acc => acc.id === a.posted_by_id);\n        return {\n            ...a,\n            postedBy: postedBy ? `${''}${postedBy.first_name} ${postedBy.last_name}` : 'Unknown',\n            date: format(new Date(a.posted_at), 'yyyy-MM-dd')\n        };\n    }).sort((a, b) => new Date(b.posted_at) - new Date(a.posted_at));\n}\n\nexport async function createAnnouncement(title, content, status) {\n    const hrUserId = 'HR-001';\n    const newAnnouncement = {\n        id: MOCK_ANNOUNCEMENTS.length + 1,\n        title,\n        content,\n        posted_by_id: hrUserId,\n        status,\n        posted_at: new Date().toISOString()\n    };\n    MOCK_ANNOUNCEMENTS.push(newAnnouncement);\n}\n\nexport async function deleteAnnouncement(id) {\n    MOCK_ANNOUNCEMENTS = MOCK_ANNOUNCEMENTS.filter(a => a.id !== id);\n}\n\n\nexport async function getDailyAttendanceData(date) {\n    return [];\n}\n\n\nexport async function getEmployees() {\n    return MOCK_ACCOUNTS.filter(a => a.role === 'Employee' && a.status !== 'Pending Approval').map(a => ({\n        id: a.id,\n        name: `${a.first_name} ${a.last_name}`,\n        position: a.position,\n        branch: a.branch,\n        status: a.status\n    }));\n}\n\nexport async function getEmployeeById(id) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === id);\n    if (!employee) return null;\n\n    return {\n        ...employee,\n        name: `${employee.first_name} ${employee.last_name}`,\n        date_hired: format(new Date(employee.date_hired), 'yyyy-MM-dd'),\n        date_of_birth: format(new Date(employee.date_of_birth), 'yyyy-MM-dd'),\n    };\n}\n\n\nexport async function deleteEmployee(id) {\n    const initialLength = MOCK_ACCOUNTS.length;\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== id);\n    return MOCK_ACCOUNTS.length < initialLength;\n}\n\nexport async function getLeaveRequests() {\n    return MOCK_LEAVE_REQUESTS.map(lr => {\n        const employee = MOCK_ACCOUNTS.find(a => a.id === lr.account_id);\n        return {\n            id: lr.id,\n            employeeId: employee.id,\n            employeeName: `${employee.first_name} ${employee.last_name}`,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            reason: lr.reason,\n            status: lr.status\n        }\n    });\n}\n\nexport async function updateLeaveRequestStatus(requestId, status) {\n    const request = MOCK_LEAVE_REQUESTS.find(lr => lr.id === requestId);\n    if (request) {\n        request.status = status;\n    }\n}\n\nexport async function getEmployeesWithPayslipStatus() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee')\n        .map(a => {\n            const hasBenefits = a.sss_number && a.philhealth_number && a.pagibig_number && a.tin;\n            return {\n                id: a.id,\n                name: `${a.first_name} ${a.last_name}`,\n                position: a.position,\n                department: a.department,\n                payslipStatus: 'Pending',\n                benefitsStatus: hasBenefits ? 'Complete' : 'Incomplete',\n            };\n        });\n}\n\nexport async function getEmployeesForScheduling() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'Employee' && a.status === 'Active')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            shift: '9:00 - 17:00'\n        }));\n}\n\nexport async function getEmployeeDashboardData(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if (!employee) {\n        return { employee: { name: 'Employee Not Found' }, announcements: [] };\n    }\n    return {\n        employee: {\n            employeeId: employee.id,\n            name: `${employee.first_name} ${employee.last_name}`,\n            position: employee.position,\n            department: employee.department,\n            email: employee.email,\n        },\n        announcements: []\n    };\n}\n\nexport async function getAttendanceData(employeeId) {\n    return {\n        summary: { daysAttended: 0, lates: 0, absences: 0, totalHours: 0, availableLeaves: 0 },\n        records: []\n    };\n}\n\nexport async function getPastLeaveRequests(employeeId) {\n    return MOCK_LEAVE_REQUESTS\n        .filter(lr => lr.account_id === employeeId)\n        .map(lr => ({\n            id: lr.id,\n            leave_type: lr.leave_type,\n            startDate: format(new Date(lr.start_date), 'yyyy-MM-dd'),\n            endDate: format(new Date(lr.end_date), 'yyyy-MM-dd'),\n            status: lr.status,\n        }));\n}\n\nexport async function createLeaveRequest(data) {\n    const { employeeId, leaveType, startDate, endDate, reason } = data;\n    const newRequest = {\n        id: MOCK_LEAVE_REQUESTS.length + 1,\n        account_id: employeeId,\n        leave_type: leaveType,\n        start_date: startDate,\n        end_date: endDate,\n        reason: reason,\n        status: 'Pending'\n    };\n    MOCK_LEAVE_REQUESTS.push(newRequest);\n    return { success: true };\n}\n\nexport async function getPayPeriods(employeeId) {\n    return [];\n}\n\nexport async function getSchedule(employeeId) {\n    return [];\n}\n\n\nexport async function getPendingEmployeeApprovals() {\n     return MOCK_ACCOUNTS\n        .filter(a => a.status === 'Pending Approval')\n        .map(a => ({\n            id: a.id,\n            employeeName: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            submittedBy: 'Olivia Chen',\n            submissionDate: format(new Date(a.date_hired), 'yyyy-MM-dd')\n        }));\n}\n\nexport async function approveEmployee(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    if(employee) employee.status = 'Active';\n}\n\nexport async function rejectEmployee(employeeId) {\n    MOCK_ACCOUNTS = MOCK_ACCOUNTS.filter(a => a.id !== employeeId);\n}\n\nexport async function getEmployeeName(employeeId) {\n    const employee = MOCK_ACCOUNTS.find(a => a.id === employeeId);\n    return employee ? `${employee.first_name} ${employee.last_name}` : \"Unknown Employee\";\n}\n\nexport async function getReportDetails(reportId) {\n    return null;\n}\n\n// --- Branch Allocation & Management Functions ---\n\nexport async function getHrPersonnel() {\n    return MOCK_ACCOUNTS\n        .filter(a => a.role === 'HR')\n        .map(a => ({\n            id: a.id,\n            name: `${a.first_name} ${a.last_name}`,\n            position: a.position,\n            managed_branches: a.managed_branches || []\n        }));\n}\n\nexport async function getBranches() {\n    // We now use the dedicated MOCK_BRANCHES array.\n    return MOCK_BRANCHES;\n}\n\nexport async function createBranch(branchName, coordinates) {\n    // Check if branch already exists\n    if (MOCK_BRANCHES.some(b => b.name.toLowerCase() === branchName.toLowerCase())) {\n        throw new Error('A branch with this name already exists.');\n    }\n    const newId = MOCK_BRANCHES.length > 0 ? Math.max(...MOCK_BRANCHES.map(b => b.id)) + 1 : 1;\n    const newBranch = { id: newId, name: branchName, coordinates };\n    MOCK_BRANCHES.push(newBranch);\n    return newBranch;\n}\n\nexport async function deleteBranch(branchId) {\n    const branchInUse = MOCK_ACCOUNTS.some(hr => hr.managed_branches?.includes(MOCK_BRANCHES.find(b => b.id === branchId)?.name));\n    if (branchInUse) {\n        throw new Error('This branch is currently assigned to HR personnel and cannot be deleted.');\n    }\n    MOCK_BRANCHES = MOCK_BRANCHES.filter(b => b.id !== branchId);\n}\n\n\nexport async function updateHrBranchAllocation(hrId, branches) {\n    const hrAccount = MOCK_ACCOUNTS.find(a => a.id === hrId);\n    if (hrAccount) {\n        hrAccount.managed_branches = branches;\n        return { success: true };\n    }\n    return { success: false, message: \"HR personnel not found.\" };\n}\n\nexport async function updateEmployee(id, data) {\n    const index = MOCK_ACCOUNTS.findIndex(a => a.id === id);\n    if (index === -1) {\n        return { success: false, message: 'Employee not found.' };\n    }\n\n    const updatedEmployee = {\n        ...MOCK_ACCOUNTS[index],\n        first_name: data.firstName,\n        last_name: data.lastName,\n        middle_name: data.middleName,\n        gender: data.gender,\n        date_of_birth: data.dob,\n        position: data.position,\n        department: data.department,\n        branch: data.branch,\n        date_hired: data.hireDate,\n        email: data.email,\n        // Assuming phone number is not directly on the main account object in this mock\n    };\n\n    MOCK_ACCOUNTS[index] = updatedEmployee;\n    return { success: true, message: 'Employee updated successfully.' };\n}\n\n\n// --- Positions & Rates Functions ---\n\nexport async function getPositions() {\n    return MOCK_POSITIONS;\n}\n\nexport async function createPosition(title, rate) {\n    if (MOCK_POSITIONS.some(p => p.title.toLowerCase() === title.toLowerCase())) {\n        throw new Error('A position with this title already exists.');\n    }\n    const newId = MOCK_POSITIONS.length > 0 ? Math.max(...MOCK_POSITIONS.map(p => p.id)) + 1 : 1;\n    const newPosition = { id: newId, title, rate };\n    MOCK_POSITIONS.push(newPosition);\n    return newPosition;\n}\n\nexport async function deletePosition(positionId) {\n    const positionInUse = MOCK_ACCOUNTS.some(acc => acc.position === MOCK_POSITIONS.find(p => p.id === positionId)?.title);\n    if (positionInUse) {\n        throw new Error('This position is currently assigned to employees and cannot be deleted.');\n    }\n    MOCK_POSITIONS = MOCK_POSITIONS.filter(p => p.id !== positionId);\n}\n"],"names":[],"mappings":";;;;;;IAySsB,2BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 561, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/branch-allocation/page.jsx"],"sourcesContent":["/**\n * @fileoverview This file defines the Branch Allocation page for the Admin portal.\n * It allows administrators to assign specific branches to HR personnel.\n */\n'use client';\n\nimport * as React from 'react';\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    CardTitle,\n    CardDescription,\n    CardFooter,\n} from \"@/components/ui/card\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n    Dialog,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogDescription,\n    DialogFooter,\n    DialogTrigger,\n    DialogClose\n} from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { getHrPersonnel, getBranches, updateHrBranchAllocation } from \"@/lib/data\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\n\n/**\n * Renders the admin branch allocation page.\n * @returns {JSX.Element} The branch allocation page component.\n */\nexport default function BranchAllocationPage() {\n    const { toast } = useToast();\n    const [hrPersonnel, setHrPersonnel] = React.useState([]);\n    const [branches, setBranches] = React.useState([]);\n    const [selectedHr, setSelectedHr] = React.useState(null);\n    const [selectedBranches, setSelectedBranches] = React.useState(new Set());\n\n    const fetchData = React.useCallback(async () => {\n        const hrData = await getHrPersonnel();\n        const branchData = await getBranches();\n        setHrPersonnel(hrData);\n        setBranches(branchData);\n    }, []);\n\n    React.useEffect(() => {\n        fetchData();\n    }, [fetchData]);\n\n    const handleManageClick = (hr) => {\n        setSelectedHr(hr);\n        setSelectedBranches(new Set(hr.managed_branches || []));\n    };\n\n    const handleBranchChange = (branchName, isChecked) => {\n        setSelectedBranches(prev => {\n            const newSet = new Set(prev);\n            if (isChecked) {\n                newSet.add(branchName);\n            } else {\n                newSet.delete(branchName);\n            }\n            return newSet;\n        });\n    };\n\n    const handleSaveAllocation = async () => {\n        if (!selectedHr) return;\n        const result = await updateHrBranchAllocation(selectedHr.id, Array.from(selectedBranches));\n        if (result.success) {\n            toast({\n                title: 'Success',\n                description: `Branch allocation for ${selectedHr.name} has been updated.`,\n            });\n            fetchData(); // Refresh data\n        } else {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: result.message || 'Failed to update branch allocation.',\n            });\n        }\n    };\n    \n    // Determine which branches are already assigned to other HR personnel\n    const assignedBranchesByOthers = React.useMemo(() => {\n        const assignedSet = new Set();\n        hrPersonnel.forEach(hr => {\n            if (hr.id !== selectedHr?.id) {\n                hr.managed_branches?.forEach(branch => assignedSet.add(branch));\n            }\n        });\n        return assignedSet;\n    }, [hrPersonnel, selectedHr]);\n\n\n    return (\n        <div className=\"space-y-6\">\n            <h1 className=\"text-3xl font-bold font-headline\">HR Branch Allocation</h1>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle>Manage HR Personnel Branches</CardTitle>\n                    <CardDescription>Assign the branches that each HR personnel is responsible for. A branch cannot be assigned to more than one HR person.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead>HR Personnel</TableHead>\n                                <TableHead>Assigned Branches</TableHead>\n                                <TableHead className=\"text-right\">Actions</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {hrPersonnel.map((hr) => (\n                                <TableRow key={hr.id}>\n                                    <TableCell>\n                                        <div className=\"font-medium\">{hr.name}</div>\n                                        <div className=\"text-xs text-muted-foreground\">{hr.position}</div>\n                                    </TableCell>\n                                    <TableCell>\n                                        <div className=\"flex flex-wrap gap-2\">\n                                            {hr.managed_branches?.length > 0 ? (\n                                                hr.managed_branches.map(branch => (\n                                                    <Badge key={branch} variant=\"secondary\">{branch}</Badge>\n                                                ))\n                                            ) : (\n                                                <span className=\"text-muted-foreground text-sm\">No branches assigned</span>\n                                            )}\n                                        </div>\n                                    </TableCell>\n                                    <TableCell className=\"text-right\">\n                                        <Dialog onOpenChange={(isOpen) => !isOpen && setSelectedHr(null)}>\n                                            <DialogTrigger asChild>\n                                                <Button variant=\"outline\" size=\"sm\" onClick={() => handleManageClick(hr)}>\n                                                    Manage\n                                                </Button>\n                                            </DialogTrigger>\n                                            <DialogContent>\n                                                <DialogHeader>\n                                                    <DialogTitle>Allocate Branches for {selectedHr?.name}</DialogTitle>\n                                                    <DialogDescription>\n                                                        Select the branches this HR person will manage. Unavailable branches are already assigned.\n                                                    </DialogDescription>\n                                                </DialogHeader>\n                                                <div className=\"py-4 space-y-4\">\n                                                    <TooltipProvider>\n                                                        {branches.map(branch => {\n                                                            const isAssignedToOther = assignedBranchesByOthers.has(branch.name);\n                                                            const isChecked = selectedBranches.has(branch.name);\n                                                            \n                                                            const checkbox = (\n                                                                 <div key={branch.id} className=\"flex items-center space-x-2\">\n                                                                    <Checkbox\n                                                                        id={`branch-${branch.id}`}\n                                                                        checked={isChecked}\n                                                                        disabled={isAssignedToOther}\n                                                                        onCheckedChange={(checked) => handleBranchChange(branch.name, checked)}\n                                                                    />\n                                                                    <Label htmlFor={`branch-${branch.id}`} className={isAssignedToOther ? 'text-muted-foreground cursor-not-allowed' : ''}>{branch.name}</Label>\n                                                                </div>\n                                                            );\n\n                                                            if (isAssignedToOther) {\n                                                                return (\n                                                                    <Tooltip key={branch.id}>\n                                                                        <TooltipTrigger asChild>\n                                                                            <span>{checkbox}</span>\n                                                                        </TooltipTrigger>\n                                                                        <TooltipContent>\n                                                                            <p>This branch is already managed by another HR person.</p>\n                                                                        </TooltipContent>\n                                                                    </Tooltip>\n                                                                )\n                                                            }\n                                                            return checkbox;\n                                                        })}\n                                                    </TooltipProvider>\n                                                </div>\n                                                <DialogFooter>\n                                                    <DialogClose asChild>\n                                                        <Button variant=\"outline\">Cancel</Button>\n                                                    </DialogClose>\n                                                    <DialogClose asChild>\n                                                      <Button onClick={handleSaveAllocation}>Save Changes</Button>\n                                                    </DialogClose>\n                                                </DialogFooter>\n                                            </DialogContent>\n                                        </Dialog>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}